import{_ as h}from"./chunks/ArticleMetadata.Yw6SSleQ.js";import{_ as k,D as p,o as n,c as r,I as o,w as c,k as e,a as d,R as g,b as F,e as y}from"./chunks/framework.FHZ5yb6k.js";import"./chunks/md5.0oexlRJv.js";const f=JSON.parse('{"title":"在 Kubernetes 中使用 Keycloak OIDC Provider 对用户进行身份验证","description":"","frontmatter":{"title":"在 Kubernetes 中使用 Keycloak OIDC Provider 对用户进行身份验证","author":"Se7en","date":"2023/03/02 22:00","categories":["原创"],"tags":["Kubernetes","OIDC","Keycloak"]},"headers":[],"relativePath":"blogs/original/2023/04-kubernetes-keycloak-oidc.md","filePath":"blogs/original/2023/04-kubernetes-keycloak-oidc.md","lastUpdated":1707311695000}'),C={name:"blogs/original/2023/04-kubernetes-keycloak-oidc.md"},u=e("h1",{id:"在-kubernetes-中使用-keycloak-oidc-provider-对用户进行身份验证",tabindex:"-1"},[d("在 Kubernetes 中使用 Keycloak OIDC Provider 对用户进行身份验证 "),e("a",{class:"header-anchor",href:"#在-kubernetes-中使用-keycloak-oidc-provider-对用户进行身份验证","aria-label":'Permalink to "在 Kubernetes 中使用 Keycloak OIDC Provider 对用户进行身份验证"'},"​")],-1),D=g(`<p>API Server 作为 Kubernetes 的网关，是用户访问和管理资源对象的入口。对于每个访问请求， API Server 都需要对访问者的合法性进行检查，包括身份验证、权限验证等等。Kubernetes 支持多种身份验证的方式，本文将对 OpenID Connect 认证进行介绍。</p><h2 id="_1-openid-connect-oidc-介绍" tabindex="-1">1 OpenID Connect（OIDC）介绍 <a class="header-anchor" href="#_1-openid-connect-oidc-介绍" aria-label="Permalink to &quot;1 OpenID Connect（OIDC）介绍&quot;">​</a></h2><p>OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方应用访问他们存储在其他服务提供者上的信息，而不需要将用户名和密码提供给第三方应用。OAuth 在全世界得到了广泛的应用，目前的版本是 2.0 。</p><p>OpenID Connect (OIDC) 是一种身份验证协议，基于 OAuth 2.0 系列规范。OAuth2 提供了 <code>access_token</code> 来解决授权第三方客户端访问受保护资源的问题，OpenID Connect 在这个基础上提供了 <code>id_token</code> 来解决第三方客户端<strong>标识用户身份</strong>的问题。</p><p>OpenID Connect 的核心在于，在 OAuth2 的授权流程中，同时提供用户的身份信息（<code>id_token</code>）给到第三方客户端。<code>id_token</code> 使用JWT（JSON Web Token）格式进行封装，得益于 JWT 的自包含性，紧凑性以及防篡改机制等特点，使得 <code>id_token</code> 可以安全地传递给第三方客户端程序并且易于验证。</p><p>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简洁的、自包含 的协议格式，用于在通信双方间传递 JSON 对象，传递的信息经过数字签名可以被验证和信任。想要了解 JWT 的详细内容参见 <a href="https://mp.weixin.qq.com/s/I7bLJ-Kux1nhsHYzQnQWNQ" target="_blank" rel="noreferrer">JWT（JSON Web Token）</a>。</p><h2 id="_2-kubernetes-openid-connect-认证流程" tabindex="-1">2 Kubernetes OpenID Connect 认证流程 <a class="header-anchor" href="#_2-kubernetes-openid-connect-认证流程" aria-label="Permalink to &quot;2 Kubernetes OpenID Connect  认证流程&quot;">​</a></h2><p>在 Kubernetes 中 OpenID Connect 的认证流程如下：</p><ul><li>1.用户登录认证服务器。</li><li>2.认证服务器返回 <code>access_token</code>、<code>id_token</code> 和 <code>refresh_token</code>。</li><li>3.在使用 kubectl 时，将 <code>id_token</code> 设置为 <code>--token</code> 的参数值，或者将其直接添加到 kubeconfig 中。</li><li>4.kubectl 将 <code>id_token</code> 添加到 HTTP 请求的 <code>Authorization</code> 头部中，发送给 API Server。</li><li>5.API Server 通过检查配置中引用的证书来确认 JWT 的签名是否合法。</li><li>6.API Server 检查 id_token 是否过期。</li><li>7.API Server 确认用户是否有操作资源的权限。</li><li>8.鉴权成功之后，API 服务器向 kubectl 返回响应。</li><li>9.kubectl 向用户返回结果。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405130513.png" alt=""></p><h2 id="_3-keycloak-介绍" tabindex="-1">3 Keycloak 介绍 <a class="header-anchor" href="#_3-keycloak-介绍" aria-label="Permalink to &quot;3 Keycloak 介绍&quot;">​</a></h2><p>本文将会使用 Keycloak 作为 OpenID Connect 的认证服务器。<a href="https://www.keycloak.org/" target="_blank" rel="noreferrer">keycloak</a> 是一个开源的、面向现代应用和服务的 IAM（身份认证和访问控制）解决方案。Keycloak 提供了单点登录（SSO）功能，支持 <code>OpenID Connect</code>、<code>OAuth 2.0</code>、<code>SAML 2.0</code> 等协议，同时 Keycloak 也支持集成不同的身份认证服务，例如 LDAP、Active Directory、Github、Google 和 Facebook 等等。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405125805.png" alt=""></p><p>在 Keycloak 中有以下几个主要概念：</p><ul><li><strong>领域（realms）</strong>：领域管理着一批用户、证书、角色、组等等，不同领域之间的资源是相互隔离的，实现了多租户的效果。</li><li><strong>客户端（clients）</strong>：需要接入 Keycloak 实现用户认证的应用和服务。</li><li><strong>用户（users）</strong>：用户是能够登录到应用系统的实体，拥有相关的属性，例如电子邮件、用户名、地址、电话号码和生日等等。</li><li><strong>组（groups）</strong>：一组用户的集合，你可以将一系列的角色赋予定义好的用户组，一旦某用户属于该用户组，那么该用户将获得对应组的所有角色权限。</li><li><strong>角色（roles）</strong>：角色是 RBAC 的重要概念，用于表明用户的身份类型。</li><li><strong>证书（credential）</strong>：Keycloak 用于验证用户的凭证，例如密码、一次性密码、证书、指纹等等。</li></ul><h2 id="_4-前提条件" tabindex="-1">4 前提条件 <a class="header-anchor" href="#_4-前提条件" aria-label="Permalink to &quot;4 前提条件&quot;">​</a></h2><p>接下来的章节将演示如何部署和配置 Keycloak 服务作为 API Server 的认证服务，需要确保完成了以下准备：</p><ul><li>部署好一套 Kubernetes 集群，我使用的集群版本是 v1.23.5。</li><li>一台安装好 Docker 和 Docker Compose 的机器，用于部署 Keycloak 服务器。</li></ul><p>本实验使用的配置文件可以在：<a href="https://github.com/cr7258/kubernetes-guide/tree/master/authentication/openid" target="_blank" rel="noreferrer">https://github.com/cr7258/kubernetes-guide/tree/master/authentication/openid</a> 中获取。</p><h2 id="_5-部署-keycloak-服务器" tabindex="-1">5 部署 Keycloak 服务器 <a class="header-anchor" href="#_5-部署-keycloak-服务器" aria-label="Permalink to &quot;5 部署 Keycloak 服务器&quot;">​</a></h2><p>Kubernetes 要求使用的 OpenID Connect 认证服务必须是 HTTPS 加密的，运行以下脚本生成 Keycloak 服务器的私钥和证书签名请求，并使用 Kubernetes 的 CA 证书进行签发，当然这里你也可以另外生成自己的 CA 证书进行签发，如果这样做的话，请注意在 <strong>7.1 启用 OpenID Connect 认证</strong>章节中将 CA 证书挂载进 API Server 容器中。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建目录存放生成的证书</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 生成 x509 v3 扩展文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;"> EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ssl/req.cnf</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">[req]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">req_extensions = v3_req</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">distinguished_name = req_distinguished_name</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">[req_distinguished_name]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">[ v3_req ]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">basicConstraints = CA:FALSE</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">subjectAltName = IP:11.8.36.25  # Keycloak 服务器的 IP 地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 生成 Keycloak 服务器私钥</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> genrsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl/tls.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2048</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 生成 Keycloak 服务器证书签名请求（CSR）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -key</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl/tls.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl/tls.csr</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -subj</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;/CN=Keycloak&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl/req.cnf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 使用 CA 签发 Keycloak 服务器证书</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -req</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl/tls.csr</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -CA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /etc/kubernetes/pki/ca.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -CAkey</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /etc/kubernetes/pki/ca.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -CAcreateserial</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl/tls.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -extensions</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> v3_req</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -extfile</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ssl/req.cnf</span></span></code></pre></div><p>这里使用 <code>docker-compose</code> 部署 Keycloak 以及依赖的数据库 PostgreSQL，docker-compose.yml 文件如下。需要将上面生成的服务器证书 tls.crt 和服务器私钥 tls.key 两个文件挂载到 Keycloak 容器的 /etc/x509/https 目录中。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">version:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;2&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">services:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  postgres:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      image:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> postgres:12.2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      environment:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        POSTGRES_DB:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> keycloak</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        POSTGRES_USER:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> keycloak</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        POSTGRES_PASSWORD:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> keycloak</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  keycloak:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      image:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> jboss/keycloak:16.1.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      environment:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        DB_VENDOR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> POSTGRES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        DB_ADDR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> postgres</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        DB_DATABASE:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> keycloak</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        DB_USER:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> keycloak</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        DB_PASSWORD:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> keycloak</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        KEYCLOAK_USER:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 用户名 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        KEYCLOAK_PASSWORD:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> czw123456</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 密码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ./ssl:/etc/x509/https</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 将服务器证书和私钥挂载到容器中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 80</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 443</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:8443</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      depends_on:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> postgres</span></span></code></pre></div><p>在后台启动 Keycloak 容器。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span></span></code></pre></div><p>确认 Keycloak 和 PostgreSQL 已经成功启动。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ps</span></span></code></pre></div><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405132635.png" alt=""></p><p>浏览器输入 https://&lt;IP 地址&gt;:8443，访问 Keycloak 界面，用户名：admin，密码：czw123456。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220402131436.png" alt=""></p><h2 id="_6-配置-keycloak" tabindex="-1">6 配置 Keycloak <a class="header-anchor" href="#_6-配置-keycloak" aria-label="Permalink to &quot;6 配置 Keycloak&quot;">​</a></h2><h3 id="_6-1-创建-realm" tabindex="-1">6.1 创建 Realm <a class="header-anchor" href="#_6-1-创建-realm" aria-label="Permalink to &quot;6.1 创建 Realm&quot;">​</a></h3><p>首先，创建一个名称为 <strong>project-1</strong> 的 <code>Realm</code>（领域）。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405133133.png" alt=""><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405134352.png" alt=""></p><h3 id="_6-2-创建-user" tabindex="-1">6.2 创建 User <a class="header-anchor" href="#_6-2-创建-user" aria-label="Permalink to &quot;6.2 创建 User&quot;">​</a></h3><p>接下来手动创建一个用户。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405140758.png" alt=""></p><p>用户名设置为 tom。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405140731.png" alt=""></p><p>设置用户的密码，将 Temporary 参数置为 OFF，表示用户在第一次登录时无需重新设置密码。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405140828.png" alt=""></p><p>为用户添加属性 name，值设置为 tom，在 <strong>6.3 创建 Client</strong> 章节中会说明为什么这么做。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405141108.png" alt=""></p><p>查看创建的用户。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405171238.png" alt=""></p><h3 id="_6-3-创建-client" tabindex="-1">6.3 创建 Client <a class="header-anchor" href="#_6-3-创建-client" aria-label="Permalink to &quot;6.3 创建 Client&quot;">​</a></h3><p><code>Client</code> （客户端）是请求 Keycloak 对用户进行身份验证的客户端，在本示例场景中，API Server 相当于一个客户端，负责向 Keycloak 发起身份认证请求。创建一个名为 <strong>kubernetes</strong> 的客户端，使用 <strong>openid-connect</strong> 协议对接。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405134229.png" alt=""><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405134330.png" alt=""></p><p>客户端创建完成后，需要修改客户端的 <code>Access Type</code> 为 <strong>confidential</strong>，表示客户端通过 <code>client secret</code> 来获取令牌；<code>Valid Redirect URIs</code> 用于设置浏览器登录成功后有效的重定向 URL，<strong>http://</strong>* 匹配所有 HTTP 重定向的网址。默认情况下，登录成功后将会重定向到 <a href="http://localhost:8000" target="_blank" rel="noreferrer">http://localhost:8000</a>。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405221343.png" alt=""></p><p>要想让 Kubernetes 认识 Keycloak 中的用户，就需要在 Keycloak 返回的 id_token 中携带表明用户的身份的信息（例如用户名、组、邮箱等等），Keycloak 支持自定义声明并将它们添加到 id_token 中。如下所示，在 kubernetes 客户端中创建一个名为 name 的映射。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405141216.png" alt=""></p><p>Keycloak 会将 <code>Token Claim Name</code> 中设置的内容作为键注入 JWT，值的内容来自 <strong>6.2 创建 User</strong> 章节中在用户属性中设置的 name 字段的值。也就是说在 JTW 的 payload 中可以看到 <code>name:tom</code> 这个键值对，在 <strong>7.1 启用 OpenID Connect 认证</strong>章节中将会使用 <code>--oidc-username-claim=name</code> 参数指定读取 JWT 中 name 字段的值作为用户名。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405141315.png" alt=""></p><p>查看创建的 mapper。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405142118.png" alt=""></p><h3 id="_6-4-延长-token-时间-可选" tabindex="-1">6.4 延长 Token 时间（可选） <a class="header-anchor" href="#_6-4-延长-token-时间-可选" aria-label="Permalink to &quot;6.4 延长 Token 时间（可选）&quot;">​</a></h3><p>Keycloak 中设置的 access_token 和 id_token 的有效期默认是 1 分钟，为了方便后续的实验，这里将令牌的有效期延长至 30 分钟。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405142818.png" alt=""></p><h3 id="_6-5-查看端点信息" tabindex="-1">6.5 查看端点信息 <a class="header-anchor" href="#_6-5-查看端点信息" aria-label="Permalink to &quot;6.5 查看端点信息&quot;">​</a></h3><p>点击 Realm Settings -&gt; General -&gt; Endpoints 可以看到请求 project-1 这个 <code>Realm</code> 相关的端点信息，在后面的章节中将会用到这些信息。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405172246.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405172316.png" alt=""></p><h2 id="_7-配置-kubernetes" tabindex="-1">7 配置 Kubernetes <a class="header-anchor" href="#_7-配置-kubernetes" aria-label="Permalink to &quot;7 配置 Kubernetes&quot;">​</a></h2><h3 id="_7-1-启用-openid-connect-认证" tabindex="-1">7.1 启用 OpenID Connect 认证 <a class="header-anchor" href="#_7-1-启用-openid-connect-认证" aria-label="Permalink to &quot;7.1 启用 OpenID Connect  认证&quot;">​</a></h3><p>要启用 OpenID Connect 认证，需要在 API Server 容器的启动参数中添加以下配置：</p><ul><li><strong>--oidc-issuer-url</strong>：OpenID Connect 认证服务器的地址，只接受 HTTPS 加密的地址。</li><li><strong>--oidc-client-id</strong>：客户端 ID。</li><li><strong>--oidc-username</strong>：从 JWT Claim 中获取用户名的字段。</li><li><strong>--oidc-username-claim</strong>：添加到 JWT Claim 中的用户名前缀，用于避免与现有的用户名产生冲突。例如，此标志值为 <code>oidc:</code> 时将创建形如 <code>oidc:tom</code> 的用户名，<strong>此标志值为 <code>-</code> 时，意味着禁止添加用户名前缀。</strong> 如果你为用户名添加的前缀是以 <code>:</code> 结尾的，在设置 API Server 时请用双引号包围，例如 <code>&quot;--oidc-username-prefix=oidc:&quot;</code> 。</li><li><strong>--oidc-ca-file</strong>：签发 Keycloak 服务器证书的 CA 证书路径，如果签发证书的是受信任的 CA 机构，不用设置该参数。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405173048.png" alt=""></p><p>关于 OpenID Connect 设置的参数详情参见 <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens" target="_blank" rel="noreferrer">openid-connect-tokens</a>。</p><h3 id="_7-2-设置-rbac" tabindex="-1">7.2 设置 RBAC <a class="header-anchor" href="#_7-2-设置-rbac" aria-label="Permalink to &quot;7.2 设置 RBAC&quot;">​</a></h3><p>创建一个名为 namespace-view 的角色，该角色拥有 namespaces 资源的读取权限，然后将该角色和用户 tom 进行绑定。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ClusterRole</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">namespace-view</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiGroups</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;namespaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    verbs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;watch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 允许读取 namespace 信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ClusterRoleBinding</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">tom-crb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">roleRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  apiGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ClusterRole</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">namespace-view</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 关联的角色</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">subjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">User</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">tom</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  # 用户名</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  apiGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">rbac.authorization.k8s.io</span></span></code></pre></div><h2 id="_8-获取身份验证令牌" tabindex="-1">8 获取身份验证令牌 <a class="header-anchor" href="#_8-获取身份验证令牌" aria-label="Permalink to &quot;8 获取身份验证令牌&quot;">​</a></h2><p>现在我们已经完成了 Keycloak 和 Kubernetes 的设置，接下来我们尝试获取身份验证令牌，需要提供以下参数：</p><ul><li><strong>grant_type</strong>：获取令牌的方式。OAuth 2.0 规定了四种获取令牌的方式，分别是：授权码（authorization-code）、隐藏式（implicit）、密码式（password）、客户端凭证（client credentials）。password 表示以密码的方式获取令牌。</li><li><strong>client_id</strong>：客户端 ID。</li><li><strong>client_secret</strong>：客户端密钥。</li><li><strong>username</strong>：用户名。</li><li><strong>password</strong>：密码。</li><li><strong>scope</strong>：要求的授权范围，OpenID Connect 的请求 scope 设置为 openid。</li></ul><p>client_secret 可以在 kubernetes 客户端的 Credentials 中获取；请求的 URL 使用 <strong>6.5 查看端点信息</strong>章节中看到的 <strong>token_endpoint</strong> 的地址。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405140932.png" alt=""></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -ks</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://11.8.36.25/auth/realms/project-1/protocol/openid-connect/token</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">grant_type=password</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> client_id=kubernetes</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">username=tom</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> password=tom123456</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> scope=openid</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">client_secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq</span></span></code></pre></div><p>以上命令将会返回 3 个令牌：access_token，id_token，refresh_token，令牌的有效期为 30 分钟（1800 秒）。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;access_token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwianRpIjoiOTZmYzY2ZWMtMTFjNC00Y2JkLTkwNWYtMDhjMGQ4ODkyNjc3IiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdWJlcm5ldGVzIiwic2Vzc2lvbl9zdGF0ZSI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXByb2plY3QtMSIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6InRvbSIsInByZWZlcnJlZF91c2VybmFtZSI6InRvbSJ9.h9F09-OZ9mFR4D6eUQ4lrTSRiSTcTXa8Kzd6B5NuWj7i_WpN4Lx_LKk9lVzb5Mh7ZeQScueYrTQ1ckn59MZdvZ3Y1c-zM8qhYsekSXLNk4HF9ijlIPi7NtlMdA_YUUc5IwcdzfSFJtcyP51CIsOxDto9-mwttlN1Cc-SotviTk4WEpy_T-Y4ZXFlBhrLjrx3o17nvMtEeM3SZbs2OlmlwnKNGs7AMC5FFq5hD-F_9eBR5GclIcLITsxLgRBI9QaSoWVWIVuvUSap04whHLLlQKKqo9sCr5bSUNRBDCCGhu3JLI5-wFZL8k59XSlxOu5MT7DeA8bXmkRdepUxfF6QWA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;expires_in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1800</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#</span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> access_token</span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 和</span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> id_token</span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 的过期时间</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;refresh_expires_in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1800</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#</span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> refresh_token</span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 的过期时间</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;refresh_token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3ZjMyMzBkNS0xNzZhLTQ1YjktOTUxNC0xZjBhY2JmODdhMzMifQ.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwianRpIjoiZTRjODllN2ItODllZi00MDFjLWEwZGMtZmQxZjc2MGMxN2UyIiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6Imh0dHBzOi8vMTEuOC4zNi4yNS9hdXRoL3JlYWxtcy9wcm9qZWN0LTEiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic2lkIjoiNDU4NjU2MzYtMjIxOC00YTQwLWFkMmUtOTNkZTJiZWRiZDNiIn0.B8k6olblNpS6aU5mrQ7_62K1pPibwhvlboxoVi3ENrA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;token_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Bearer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;id_token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwiYXV0aF90aW1lIjowLCJqdGkiOiIxMzJkYzU4Zi0wNWQ4LTQwNGUtOTkyZi1mMmVkMDU3Y2QyOTciLCJpc3MiOiJodHRwczovLzExLjguMzYuMjUvYXV0aC9yZWFsbXMvcHJvamVjdC0xIiwiYXVkIjoia3ViZXJuZXRlcyIsInN1YiI6IjA0ZWMwN2MzLWZmNjQtNGNkNS1hNzdlLTczOWU5ZTc5ZWMyYiIsInR5cCI6IklEIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJhdF9oYXNoIjoiWm5UVUtwYUxKRno2RHZTSlNEckZQUSIsImFjciI6IjEiLCJzaWQiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJ0b20iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0b20ifQ.jDTGKWsvg-2z-01isqOpdHqiGSpiXxC3JKdgcVnBLx26xIEZdrjjsQxEXMd0yXJCqdiD4VNaQ6eHHJCjg3gyJE6_TT3XsxLafpBcfNb0N2TEdxQQxmwfUwK18SWAPFoUqd0ErhvZ_LelecOqytHOV2fOgkH58LCTbTP6mVvSsRuxo5Yp74scMLV-UWxi0ABT6NC3U5L_iiQBct_VAqQMxHu1Inv0RRYBA14L6AHtjNmhGoXTYakXqH_4PqZqlxt9rx-uINkRSlY0rV-eWyS-8xaOhKDu4zLWhJTgE_4YguNi2jXcd5ppM6p6uOzM48-az1flXpsPo8VUDgNsfrzg3A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;not-before-policy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;session_state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;45865636-2218-4a40-ad2e-93de2bedbd3b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;scope&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;openid profile email&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>id_token 被编码为 JTW 格式的数据，将内容复制到 <a href="https://jwt.io/" target="_blank" rel="noreferrer">https://jwt.io/</a> 网站上可以看到 id_token 的内容，在 payload 部分中可以看到标识的用户信息：<code>name:tom</code>。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405181203.png" alt=""></p><p>请求 API Server 列出所有 namespace，在 curl 命令中使用 <code>-H</code> 参数将 id_token 附加到 HTTP 请求的 Header 中。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -k</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://11.8.36.162:6443/api/v1/namespaces</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Authorization: Bearer &lt;id_token&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 返回结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;kind&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;NamespaceList&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;apiVersion&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;v1&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;metadata&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    &quot;resourceVersion&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;1120382&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;items&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      &quot;metadata&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        &quot;name&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;calico-apiserver&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        &quot;uid&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;3272d2ab-f842-4552-a87a-a9a7a14b3768&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        &quot;resourceVersion&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;1679&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        &quot;creationTimestamp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;2022-03-29T02:21:45Z&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        &quot;labels&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">          &quot;kubernetes.io/metadata.name&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;calico-apiserver&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">          &quot;name&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;calico-apiserver&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">......</span></span></code></pre></div><p>我们刚刚申请的令牌的有效期是 30 分钟，OAuth 2.0 允许用户自动更新令牌，在令牌到期之前，可以使用 refresh_token 发送一个请求，去更新令牌。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -ks</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://11.8.36.25/auth/realms/project-1/protocol/openid-connect/token</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">grant_type=refresh_token</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> client_id=kubernetes</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">client_secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">refresh_token=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">refresh_toke</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span></code></pre></div><p>Keycloak 服务器将会返回一个新的 access_token，id_token 和 refresh_token。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;access_token&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwianRpIjoiNDUzZTU0MzctOGM0MC00NjA4LThmZmEtM2M5Nzc3MGU2MDczIiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdWJlcm5ldGVzIiwic2Vzc2lvbl9zdGF0ZSI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXByb2plY3QtMSIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6InRvbSIsInByZWZlcnJlZF91c2VybmFtZSI6InRvbSJ9.DUm3Ju1mmZbl_tyKCMHfUnXTJQ3-M33rcQ3WuuX_7yhEQLK086mC4TZwi0chayBB72Ge6gX9exNkhl8FPMEbw41Qrr8wHsLev-cfJWq_jnnjVKXH3hvwIR-APr-YOjL0UUDAmIGW9FUi4iPOHSvinyyii4AHy_PT4L7OlYdnG3SWGs-0g5qbIl4Sm8vMYMz7bkIU0r7Vu7bxzPnflT3yzP6rTd3Ej6DsWkddSseaAbEOLeDW6pv_YBkhMH8gbcxGtVS5THnnfC--Qr9iIw7v1OFXH3olUFK5S9_vt99fsaHjruwAKUXoSS-BbzJFsJFnXnSFeRuXsIx6M95O94pb4w&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;expires_in&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1800</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;refresh_expires_in&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1800</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;refresh_token&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3ZjMyMzBkNS0xNzZhLTQ1YjktOTUxNC0xZjBhY2JmODdhMzMifQ.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwianRpIjoiNmM2YTJmN2QtNzNlMi00MTY1LTg2MmEtZDU3YmJlYmMwNmU3IiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6Imh0dHBzOi8vMTEuOC4zNi4yNS9hdXRoL3JlYWxtcy9wcm9qZWN0LTEiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic2lkIjoiNDU4NjU2MzYtMjIxOC00YTQwLWFkMmUtOTNkZTJiZWRiZDNiIn0.N8jutxJkeEallahU5RdHkv4Lctgv8ojenuZFwrxDjPo&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;token_type&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Bearer&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;id_token&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwiYXV0aF90aW1lIjowLCJqdGkiOiIzYzljZmY2Ny01NGZlLTQ4MWItYjkwYy0xMmU4ODQwMGE3YmIiLCJpc3MiOiJodHRwczovLzExLjguMzYuMjUvYXV0aC9yZWFsbXMvcHJvamVjdC0xIiwiYXVkIjoia3ViZXJuZXRlcyIsInN1YiI6IjA0ZWMwN2MzLWZmNjQtNGNkNS1hNzdlLTczOWU5ZTc5ZWMyYiIsInR5cCI6IklEIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJhdF9oYXNoIjoiZHhfSDc2eFZEUUtseUd1Z2tHZlRlQSIsImFjciI6IjEiLCJzaWQiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJ0b20iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0b20ifQ.IXnHePIhj7vjxPtENmTsv1PJ9xXrlowtMsR4akFblGEo__YYWs4GWY0aFOKGQTyFh6sVtGy7olOxEcHwgVRkp7Sfzeplx7o9Z-c5OYQORqmM0pX329oT9VfCBMMBX5ifIZPPfUlxZVLmygXUBk6LhnxD9MDzThEpHscoNnbHAODjSI2b_pTBOcLnr-inXl3klvaLi_Ti8SPCgd-cssd093DyvVK8Gb_UnpygtNVrailn-OU59wZu7wl-ah-pSqi9pAQTc3S4SJ_5aE722I23r6zxGwqghBxRKGqNS9vGcHsGgRfBHUQZOwa_w0cHyfvRfwVaqLn3_8JDrW-aCn3FuA&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;not-before-policy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;session_state&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;45865636-2218-4a40-ad2e-93de2bedbd3b&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;scope&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;openid profile email&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_9-用户访问资源" tabindex="-1">9 用户访问资源 <a class="header-anchor" href="#_9-用户访问资源" aria-label="Permalink to &quot;9 用户访问资源&quot;">​</a></h2><h3 id="_9-1-方式一-oidc-身份认证组件" tabindex="-1">9.1 方式一：OIDC 身份认证组件 <a class="header-anchor" href="#_9-1-方式一-oidc-身份认证组件" aria-label="Permalink to &quot;9.1 方式一：OIDC 身份认证组件&quot;">​</a></h3><p>接下来使用以下命令在 kubeconfig 文件中为用户 tom 添加新的凭据，<code>idp-issuer-url</code> 参数的 URL 使用 <strong>6.5 查看端点信息</strong>章节中看到的 <strong>issuer</strong> 的地址。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> set-credentials</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tom</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   --auth-provider=oidc</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   --auth-provider-arg=idp-issuer-url=https://11.8.36.25/auth/realms/project-1</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   --auth-provider-arg=client-id=kubernetes</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   --auth-provider-arg=client-secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   --auth-provider-arg=refresh-token=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">refresh_token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   --auth-provider-arg=id-token=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">id_token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --auth-provider-arg=idp-certificate-authority=/etc/kubernetes/pki/ca.crt</span></span></code></pre></div><p>然后在 kubectl 命令中使用 <code>--user</code> 参数指定使用 tom 用户进行访问，可以看到该用户只有获取 namespace 的权限。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 可以获取 namespace</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tom</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> namespace</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">               STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">calico-apiserver</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   Active</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">d7h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">calico-system</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      Active</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">d8h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            Active</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">d8h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kube-node-lease</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Active</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">d8h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kube-public</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        Active</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">d8h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kube-system</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        Active</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">d8h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tigera-operator</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Active</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">d8h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 没有获取 pod 的权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tom</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Error</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Forbidden): pods is forbidden: User </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cannot list resource </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pods&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> API group </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> the namespace </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default&quot;</span></span></code></pre></div><p>我们可以为该用户添加上下文，方便在多集群/多用户的环境下进行切换。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> set-context</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tom</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --cluster=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">集群名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --user=tom</span></span></code></pre></div><p>查看 ~/.kube/config 文件可以看到为 tom 用户添加的凭据和上下文。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220406105056.png" alt=""></p><p>切换到用户 tom 进行访问。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 切换用户上下文</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> use-context</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tom</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> namespaces</span></span></code></pre></div><h3 id="_9-2-方式二-使用-token-选项" tabindex="-1">9.2 方式二：使用 --token 选项 <a class="header-anchor" href="#_9-2-方式二-使用-token-选项" aria-label="Permalink to &quot;9.2 方式二：使用 --token 选项&quot;">​</a></h3><p><code>kubectl</code> 命令允许使用 <code>--token</code> 选项传递一个令牌。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> namespace</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tom</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --token=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">id_token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><h3 id="_9-3-方式三-使用-kubelogin" tabindex="-1">9.3 方式三：使用 Kubelogin <a class="header-anchor" href="#_9-3-方式三-使用-kubelogin" aria-label="Permalink to &quot;9.3 方式三：使用 Kubelogin&quot;">​</a></h3><p>前面介绍的方式一和方式二有一个缺点，那就是在令牌过期后需要手动获取新的令牌，然后更新到 kubeconfig 文件或者 <code>--token</code> 参数中。好在社区提供了 kubelogin 插件可以解决这一繁琐的问题，kubelogin 是一个用于 Kubernetes OpenID Connect 进行身份认证的插件，也称为 kubectl oidc-login。当运行 kubectl 命令时，kubelogin 会打开浏览器，用户需要输入用户名和密码登录程序，认证通过后，kubelogin 会从认证服务器获取一个令牌，然后 kubectl 就可以使用该令牌和 API Server 进行通信，具体的流程图如下：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220404205609.png" alt=""></p><p>kubelogin 插件支持不同的方式安装，包括 Homebrew，Krew，Chocolatey 等等。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Homebrew (macOS and Linux)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> int128/kubelogin/kubelogin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Krew (macOS, Linux, Windows and ARM)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> krew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> oidc-login</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Chocolatey (Windows)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">choco</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubelogin</span></span></code></pre></div><p>使用以下命令在 kubeconfig 文件中添加用户 tom 的凭证，<code>--insecure-skip-tls-verify</code> 参数表示忽略自签名证书不安全的风险。当用户 tom 执行 kubectl 命令时，将会通过 <code>kubectl oidc-login get-token</code> 命令获取令牌。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> set-credentials</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tom</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-api-version=client.authentication.k8s.io/v1beta1</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-command=kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-arg=oidc-login</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-arg=get-token</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-arg=--oidc-issuer-url=https://11.8.36.25/auth/realms/project-1</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-arg=--oidc-client-id=kubernetes</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-arg=--oidc-client-secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    --exec-arg=--insecure-skip-tls-verify</span></span></code></pre></div><p>有关 kubelogin 的详细参数参见：<a href="https://github.com/int128/kubelogin/blob/master/docs/usage.md" target="_blank" rel="noreferrer">kubelogin usage and options</a>。设置完毕后，使用 kubectl 命令访问时，浏览器会自动弹出 Keycloak 认证页面，输入用户名和密码后就可以正常访问相应的资源了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --user=tom</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> namespace</span></span></code></pre></div><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220405_192515_.gif" alt=""></p><p>kubelogin 的 id_token 和 refresh_token 缓存在 <code>~/.kube/cache/oidc-login/</code> 目录中，没有超过令牌有效期时，无需再次输入用户名和密码进行认证。</p><h2 id="_10-总结" tabindex="-1">10 总结 <a class="header-anchor" href="#_10-总结" aria-label="Permalink to &quot;10 总结&quot;">​</a></h2><p>本文通过详细的步骤为大家展示了如何让 API Server 使用 OpenID Connect 协议集成 Keycloak 进行身份认证，同时介绍了如何使用 kubectl 和 kubelogin 进行用户登录认证。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://www.jianshu.com/p/89eba92af52f" target="_blank" rel="noreferrer">利用Keycloak实现Kubernetes单点登录与权限验证（SSO,OIDC,RBAC）</a></li><li><a href="https://medium.com/@int128/kubectl-with-openid-connect-43120b451672" target="_blank" rel="noreferrer">kubectl with OpenID Connect</a></li><li><a href="https://cloud.tencent.com/developer/article/1804656" target="_blank" rel="noreferrer">使用 KeyCloak 对 Kubernetes 进行统一用户管理</a></li><li><a href="https://github.com/int128/kubelogin" target="_blank" rel="noreferrer">kubelogin</a></li><li><a href="https://github.com/int128/kubelogin/blob/master/docs/setup.md" target="_blank" rel="noreferrer">Kubernetes OpenID Connection authentication</a></li><li><a href="https://faun.pub/kubernetes-auth-e2f342a5f269" target="_blank" rel="noreferrer">Kubernetes auth Keycloak as identity provider</a></li><li><a href="https://apisix.apache.org/zh/blog/2021/12/10/integrate-keycloak-auth-in-apisix/" target="_blank" rel="noreferrer">如何在 Apache APISIX 中集成 Keycloak 实现身份认证</a></li><li><a href="https://www.keycloak.org/server/configuration-production" target="_blank" rel="noreferrer">Configuring Keycloak for production</a></li><li><a href="https://www.novatec-gmbh.de/en/blog/keycloak-with-quarkus-better-together/" target="_blank" rel="noreferrer">Keycloak with Quarkus: Better together</a></li><li><a href="https://hub.docker.com/r/jboss/keycloak/" target="_blank" rel="noreferrer">Keycloak Docker image</a></li><li><a href="https://middlewaretechnologies.in/2022/01/how-to-authenticate-user-with-keycloak-oidc-provider-in-kubernetes.html" target="_blank" rel="noreferrer">How to authenticate user with Keycloak OIDC Provider in Kubernetes</a></li><li><a href="https://stackoverflow.com/questions/62640241/keycloak-access-token-expires-too-soon" target="_blank" rel="noreferrer">Keycloak access token expires too soon</a></li><li><a href="https://developer.okta.com/blog/2021/11/08/k8s-api-server-oidc" target="_blank" rel="noreferrer">How to Secure Your Kubernetes Cluster with OpenID Connect and RBAC</a></li></ul><h2 id="欢迎关注" tabindex="-1">欢迎关注 <a class="header-anchor" href="#欢迎关注" aria-label="Permalink to &quot;欢迎关注&quot;">​</a></h2><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220104221116.png" alt=""></p>`,121);function m(s,b,A,I,B,q){const t=h,l=p("ClientOnly");return n(),r("div",null,[u,o(l,null,{default:c(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),F(t,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),D])}const M=k(C,[["render",m]]);export{f as __pageData,M as default};
