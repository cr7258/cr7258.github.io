import{_ as n}from"./chunks/ArticleMetadata.BFUCIUL_.js";import{_ as d,C as o,c as g,o as e,k as h,G as k,P as r,a as c,w as u,b,e as F}from"./chunks/framework.BhFhJsV2.js";import"./chunks/md5.DoUKmYou.js";const B=JSON.parse('{"title":"Git 速查表：初学者必备的 12 个 Git 命令","description":"","frontmatter":{"title":"Git 速查表：初学者必备的 12 个 Git 命令","author":"Se7en","date":"2023/09/01 22:00","categories":["翻译"],"tags":["Git"]},"headers":[],"relativePath":"blogs/translate/2023/05-git-cheat-sheet-1.md","filePath":"blogs/translate/2023/05-git-cheat-sheet-1.md","lastUpdated":1707227798000}'),m={name:"blogs/translate/2023/05-git-cheat-sheet-1.md"};function y(s,i,C,v,D,G){const l=n,p=o("ClientOnly");return e(),g("div",null,[i[0]||(i[0]=h("h1",{id:"git-速查表-初学者必备的-12-个-git-命令",tabindex:"-1"},[c("Git 速查表：初学者必备的 12 个 Git 命令 "),h("a",{class:"header-anchor",href:"#git-速查表-初学者必备的-12-个-git-命令","aria-label":'Permalink to "Git 速查表：初学者必备的 12 个 Git 命令"'},"​")],-1)),k(p,null,{default:u(()=>{var a,t;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=s.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(e(),b(l,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),i[1]||(i[1]=r('<blockquote><p>本文译自：Git Cheat Sheet: 12 Essential Git Commands For Beginners<br> 原文链接：<a href="https://initialcommit.com/blog/Git-Cheat-Sheet-Beginner" target="_blank" rel="noreferrer">https://initialcommit.com/blog/Git-Cheat-Sheet-Beginner</a><br> 本系列共有三篇文章，本文是第一篇：</p><ul><li>Git Cheat Sheet: 12 Essential Git Commands For Beginners（本文）</li><li>Git Cheat Sheet: 12 Essential Git Commands For Intermediate Users</li><li>Git Cheat Sheet: 14 Essential Git Commands For Experts</li></ul></blockquote><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>Git 是世界上最流行的版本控制系统（VCS），很难想象开发人员没有它会是什么样子。现在，绝大多数开发人员，包括个人和大公司，都在项目中选择 Git。</p><p>对于初学者来说，第一个问题就是如何使用 Git？</p><p>在本文中，我将介绍 12 个对初学者特别重要的 Git 命令。您可以将本篇文章作为 Git 命令的速查表，以便在以后查找使用。</p><p>现在让我们开始吧。</p><h2 id="git-init" tabindex="-1">git init <a class="header-anchor" href="#git-init" aria-label="Permalink to &quot;git init&quot;">​</a></h2><p>这可能是你创建新项目时要使用的第一个命令。它用于初始化一个新的、空的 Git 仓库。使用这个命令的语法非常简单：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> init</span></span></code></pre></div><p>执行 <code>git init</code> 命令后，Git 会在当前目录下创建一个名为 <code>.git</code> 的子目录，这个子目录包含 Git 用来跟踪版本控制所需的所有文件和目录。具体来说，包括以下文件和目录：</p><ul><li><code>HEAD</code> 文件：存储当前位置指针，指向当前工作区的分支。</li><li><code>config</code> 文件：存储仓库的配置信息，比如远程仓库的 URL ，你的邮箱和用户名等。</li><li><code>description</code> 文件：供 Gitweb 使用，显示仓库的描述。</li><li><code>hooks</code> 目录：保存在执行 Git 命令时触发的自定义 hooks 脚本。</li><li><code>info</code> 目录：用于排除提交规则，与 .gitignore 功能类似。他们的区别在于.gitignore 这个文件本身会提交到版本库中去，用来保存的是公共需要排除的文件；而 info/exclude 这里设置的则是你自己本地需要排除的文件，他不会影响到其他人，也不会提交到版本库中去。</li><li><code>objects</code> 目录：Git 的对象数据库。</li><li><code>refs</code> 目录：存储着分支和标签的引用。</li><li><code>index</code> 文件：用于追踪文件的更改。</li><li><code>logs</code> 目录：用于记录操作信息。</li></ul><h2 id="git-clone" tabindex="-1">git clone <a class="header-anchor" href="#git-clone" aria-label="Permalink to &quot;git clone&quot;">​</a></h2><p>通常情况下，你已经有一个现有的 Git 仓库（有时托管在像 GitHub 或 Bitbucket 这样的网站上），并希望将其复制到本地计算机。在这种情况下，你需要使用的命令是 <code>git clone</code>。简单来说，这个命令用于创建现有仓库的副本或克隆：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [url-to-existing-git-repo]</span></span></code></pre></div><h2 id="git-status" tabindex="-1">git status <a class="header-anchor" href="#git-status" aria-label="Permalink to &quot;git status&quot;">​</a></h2><p>Git 会持续监控您的项目工作目录中的变化，这些变化可能涉及创建新文件、添加文件以进行跟踪、删除文件、更改文件权限、修改文件名或内容等。您可以使用 git status 命令，查看 Git 在某个特定时间所记录的变化情况。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> status</span></span></code></pre></div><h2 id="git-add" tabindex="-1">git add <a class="header-anchor" href="#git-add" aria-label="Permalink to &quot;git add&quot;">​</a></h2><p>一旦在您的工作目录中对文件做出更改并通过 git status 命令确认更改完全正确，就可以将这些变化添加到 Git 的暂存区中。</p><p>您可以使用 git add 命令将单个文件添加到暂存区：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">your-file-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>或者，如果您有多个更改的文件，您可以使用 -A 选项将它们全部添加到暂存区：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -A</span></span></code></pre></div><p>另外，您也可以使用单个点号代替 -A 选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .</span></span></code></pre></div><h2 id="git-commit" tabindex="-1">git commit <a class="header-anchor" href="#git-commit" aria-label="Permalink to &quot;git commit&quot;">​</a></h2><p>一旦您的更改已经被暂存，就可以使用 git commit 命令将这些更改保存到 Git 仓库中。一个 Git commit 是一组文件更改，作为一个单元存储在 Git 中。</p><p>在此过程中，您应该提供一个清晰明确的提交信息，以便其他开发者能够轻松理解其目的：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;some useful comment about your change&quot;</span></span></code></pre></div><p>一个常见的经验法则是使用祈使语气编写提交信息。</p><p>下面是一张图片，帮助您更好地理解 Git 中更改是如何从工作目录流转到暂存区，最终提交到仓库的：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20230427184046.png" alt=""></p><h2 id="git-branch" tabindex="-1">git branch <a class="header-anchor" href="#git-branch" aria-label="Permalink to &quot;git branch&quot;">​</a></h2><p>您可以将 Git 分支看作是一系列提交或开发历程。实际上，分支名称只是一个指向特定 commit ID 的标签。每个 commit ID 都链接回其父 commit ID，形成了一条开发历史链。</p><p>git branch 命令就像一把瑞士军刀，它可以展示当前 Git 仓库中的所有分支。带有星号标记的分支是您当前所在的分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> branch</span></span></code></pre></div><p>要创建一个新分支，只需使用以下命令并指定您的新分支名称即可：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> branch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">new-branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><h2 id="git-checkout" tabindex="-1">git checkout <a class="header-anchor" href="#git-checkout" aria-label="Permalink to &quot;git checkout&quot;">​</a></h2><p>使用 git checkout 命令可以在不同的分支之间进行切换，它会更新您的工作目录以反映所选分支的最新版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">name-of-branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>此外，git checkout 命令还可以同时创建一个新分支并切换到该分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">name-of-branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><h2 id="git-merge" tabindex="-1">git merge <a class="header-anchor" href="#git-merge" aria-label="Permalink to &quot;git merge&quot;">​</a></h2><p>那么，您已经在新分支上进行了多次提交，完成了您的工作。接下来该怎么做呢？</p><p>通常情况下，这些更改应该合并回主代码分支（默认情况下通常称为 master 分支）。我们可以使用 git merge 命令来完成合并操作。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> merge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">branch-to-merge-fro</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>请注意，git merge 命令将指定分支中的提交合并到当前所在的分支中。因此，在运行该命令之前，您需要首先切换到要合并的分支上。</p><h2 id="git-push" tabindex="-1">git push <a class="header-anchor" href="#git-push" aria-label="Permalink to &quot;git push&quot;">​</a></h2><p>到目前为止，我们运行的所有命令都只影响了本地环境。现在，是时候通过使用 git push 命令将您最新提交的更改推送到远程仓库（通常托管在 GitHub 和 Bitbucket 等网站上）与其他开发者分享了：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">remot</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">name-of-branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> master</span></span></code></pre></div><p>在该示例中，我们将 master 分支推送到名为 origin 的远程仓库（在 Git 中是远程仓库的默认名称）。</p><p>一旦您推送了更改，其他团队成员就可以看到它们、审查它们并将它们拉取到他们自己的本地 Git 仓库副本中。</p><h2 id="git-pull" tabindex="-1">git pull <a class="header-anchor" href="#git-pull" aria-label="Permalink to &quot;git pull&quot;">​</a></h2><p>git pull 命令与 git push 命令正好相反。您可以使用它将其他开发者所做的更改下载到您的本地仓库中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pull</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">remot</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">name-of-branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>上述命令将下载远程仓库中指定分支的新提交，并尝试将它们合并到您本地的该分支副本中。实际的命令将类似以下示例，使用 origin 远程仓库和 master 分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> master</span></span></code></pre></div><p>有趣的是，git pull 命令实际上只是 git fetch 命令和 git merge 命令的组合。其中，git fetch 命令用于将远程分支下载到本地仓库，而 git merge 命令用于将已下载的分支合并到本地副本中。</p><h2 id="git-log" tabindex="-1">git log <a class="header-anchor" href="#git-log" aria-label="Permalink to &quot;git log&quot;">​</a></h2><p>如果您想查看 Git 分支上所有提交的历史记录，可以使用 git log 命令。git log 命令按时间顺序显示所有提交的有序列表，包括作者、日期和提交信息，从最新到最旧：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> log</span></span></code></pre></div><p>若要按从旧到新的顺序列出提交，请使用 --reverse 选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --reverse</span></span></code></pre></div><p>如果您是一个视觉化的人，可以尝试使用以下命令选项，在终端中显示提交历史的图形化表示：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --graph</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --decorate</span></span></code></pre></div><p>这对于查看分支在开发过程中如何分叉和合并回来非常有用。</p><h2 id="git-stash" tabindex="-1">git stash <a class="header-anchor" href="#git-stash" aria-label="Permalink to &quot;git stash&quot;">​</a></h2><p>有时候，您在工作目录中修改了一些文件，但是意识到需要先处理其他事情。然而，您又不想丢失已经完成的工作。在这种情况下，可以使用 git stash 命令将所有未提交的更改保存在工作目录中，以便稍后可以找回它们。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> stash</span></span></code></pre></div><p>使用 git stash 命令后，您的工作副本将被清理（所有更改将消失）。但是不要担心，它们并没有丢失，git stash 只是将这些更改放在临时存储中，您可以使用 git stash pop 命令找回它们：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pop</span></span></code></pre></div><p>在这里，pop 子命令将重新应用存储在 stash 中的最后一个状态，以便您可以继续上次的工作。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在本文中，我讨论了初学者必备的 12 个 Git 命令，您可以将本篇文章作为 Git 速查表，在以后的参考中使用。</p><h2 id="欢迎关注" tabindex="-1">欢迎关注 <a class="header-anchor" href="#欢迎关注" aria-label="Permalink to &quot;欢迎关注&quot;">​</a></h2><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220104221116.png" alt=""></p>',79))])}const x=d(m,[["render",y]]);export{B as __pageData,x as default};
