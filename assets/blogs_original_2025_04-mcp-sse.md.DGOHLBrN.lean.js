import{_ as e}from"./chunks/ArticleMetadata.Cxlq8Gj7.js";import{_ as k,C as r,c as d,o as t,k as h,G as g,P as F,a as o,w as c,b as y,e as C}from"./chunks/framework.DIkCQIk8.js";import"./chunks/md5.BFEskVOY.js";const _=JSON.parse('{"title":"构建基于 SSE 协议通信的 MCP Server 和 Client","description":"","frontmatter":{"title":"构建基于 SSE 协议通信的 MCP Server 和 Client","author":"Se7en","date":"2025/02/09 00:30","categories":["AI"],"tags":["MCP","AI"]},"headers":[],"relativePath":"blogs/original/2025/04-mcp-sse.md","filePath":"blogs/original/2025/04-mcp-sse.md","lastUpdated":1739031522000}'),D={name:"blogs/original/2025/04-mcp-sse.md"};function A(i,s,u,E,B,m){const l=e,p=r("ClientOnly");return t(),d("div",null,[s[0]||(s[0]=h("h1",{id:"构建基于-sse-协议通信的-mcp-server-和-client",tabindex:"-1"},[o("构建基于 SSE 协议通信的 MCP Server 和 Client "),h("a",{class:"header-anchor",href:"#构建基于-sse-协议通信的-mcp-server-和-client","aria-label":'Permalink to "构建基于 SSE 协议通信的 MCP Server 和 Client"'},"​")],-1)),g(p,null,{default:c(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),y(l,{key:0,article:i.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),s[1]||(s[1]=F(`<p>在之前的系列教程中，我们编写的 MCP 服务器与 MCP 客户端是通过 **stdio（Standard Input/Output，标准输入输出）**来进行交互的。客户端通过启动服务器子进程，并利用标准输入（stdin）和标准输出（stdout）建立双向通信。这种模式导致 MCP 客户端与服务器之间存在强耦合，且每个服务器进程只能与启动它的客户端通信（1:1 的关系）。</p><p>为了解耦 MCP 客户端与服务器，本文将演示如何使用 **SSE（Server-Sent Events，服务器发送事件）**协议进行通信，使服务器能够作为一个独立运行的进程，支持多个客户端的灵活连接、使用和断开。换句话说，基于 SSE 的服务器和客户端可以是完全解耦的进程，甚至运行在不同的节点上，从而提供更高的灵活性和扩展性。</p><p>本文使用到的所有代码可以在 Github 上找到：<a href="https://github.com/cr7258/hands-on-lab/tree/main/ai/claude/mcp/sse/elasticsearch-mcp-sse" target="_blank" rel="noreferrer">https://github.com/cr7258/hands-on-lab/tree/main/ai/claude/mcp/sse/elasticsearch-mcp-sse</a></p><p>MCP 系列文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/rcOi7e8F5qGVVF2noCk46Q" target="_blank" rel="noreferrer">一文带你入门 MCP（模型上下文协议）</a></li><li><a href="https://mp.weixin.qq.com/s/38HiPOOKVKz3C76d_SGkmw" target="_blank" rel="noreferrer">MCP Server 开发实战：无缝对接 LLM 和 Elasticsearch</a></li><li><a href="https://mp.weixin.qq.com/s/yLuNixOVBlSNGkGHik-XaA" target="_blank" rel="noreferrer">快速上手：实现你的第一个 MCP Client</a></li><li>构建基于 SSE 协议通信的 MCP Server 和 Client（本文）</li></ul><h2 id="什么是-sse" tabindex="-1">什么是 SSE？ <a class="header-anchor" href="#什么是-sse" aria-label="Permalink to &quot;什么是 SSE？&quot;">​</a></h2><p>Server-Sent Events（SSE，服务器发送事件）是一种基于 HTTP 协议的技术，允许服务器向客户端<strong>单向、实时地推送数据</strong>。在 SSE 模式下，客户端通过创建一个 <code>EventSource</code> 对象与服务器建立持久连接，服务器则通过该连接持续发送数据流，而无需客户端反复发送请求。</p><p><strong>SSE 的主要特点包括：</strong></p><ul><li><strong>单向通信</strong>：服务器主动向客户端推送数据，客户端无法通过同一连接向服务器发送数据。</li><li><strong>基于 HTTP 协议</strong>：利用现有的 HTTP 协议，无需额外的协议支持，易于实现和部署。</li><li><strong>轻量级</strong>：实现简单，适用于需要实时更新的应用场景，如新闻推送、股票行情等。</li><li><strong>自动重连</strong>：客户端在连接断开时会自动尝试重新连接，确保数据传输的连续性。</li></ul><p>需要注意的是，SSE 仅支持服务器到客户端的单向通信，若应用场景需要双向实时通信，可能需要考虑使用 WebSocket 等其他技术。</p><h2 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h2><p>在本教程中，我们将使用 <a href="https://github.com/modelcontextprotocol/python-sdk" target="_blank" rel="noreferrer">MCP Python SDK</a> 来编写项目，使用 <a href="https://docs.astral.sh/uv/" target="_blank" rel="noreferrer">uv</a> 来管理 Python 项目依赖。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;mcp[cli]&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> elasticsearch</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> python-dotenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> uvicorn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openai</span></span></code></pre></div><p>实验用到的 Elasticsearch 集群可以通过 Github 中的 <code>docker-compose.yaml</code> 文件启动：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span></span></code></pre></div><p>浏览器输入 <a href="http://localhost:5601" target="_blank" rel="noreferrer">http://localhost:5601</a> 访问 Kibana 界面，用户名 <code>elastic</code>，密码 <code>test123</code>。</p><p>在 <code>.env</code> 文件中设置好 Elasticsearch 的连接信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ELASTIC_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">https://localhost:9200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ELASTIC_USERNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">elastic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ELASTIC_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">test123</span></span></code></pre></div><h2 id="准备测试数据" tabindex="-1">准备测试数据 <a class="header-anchor" href="#准备测试数据" aria-label="Permalink to &quot;准备测试数据&quot;">​</a></h2><p>在 Kibana 中打开 <code>Management -&gt; Dev Tools</code> 页面， 执行以下代码创建两个索引 <code>student</code> 和 <code>teacher</code>，分别插入几条数据：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /student/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Computer Science&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /student/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Mathematics&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /student/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Carol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Physics&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /teacher/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;subject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;English&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;yearsOfExperience&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /teacher/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;subject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;History&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;yearsOfExperience&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /teacher/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Lily&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;subject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Mathematics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;yearsOfExperience&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="实现基于-sse-协议的-mcp-server" tabindex="-1">实现基于 SSE 协议的 MCP Server <a class="header-anchor" href="#实现基于-sse-协议的-mcp-server" aria-label="Permalink to &quot;实现基于 SSE 协议的 MCP Server&quot;">​</a></h2><p>MCP 服务器部分的代码与<a href="https://mp.weixin.qq.com/s/38HiPOOKVKz3C76d_SGkmw" target="_blank" rel="noreferrer">MCP Server 开发实战：无缝对接 LLM 和 Elasticsearch</a>一文中介绍的内容相同，因此在此不再赘述，读者可参阅该文章以获取详细信息。</p><p>这里重点说明一下如何让 MCP 服务器运行在 SSE 协议之上。在本教程中，我们使用 Starlette 框架来实现 SSE 服务器，代码主要分为以下几个部分：</p><ol><li><p><strong>SSE 传输对象的初始化</strong><br> 在函数开始处，通过创建 <code>SseServerTransport</code> 对象，并指定基础路径 <code>/messages/</code>，用于后续管理 SSE 连接和消息传递。</p></li><li><p><strong>定义 SSE 连接处理函数</strong></p><ul><li><strong>handle_sse 函数</strong>：这是一个异步请求处理函数，当客户端请求建立 SSE 连接时会被调用。</li><li><strong>连接过程</strong>：<br> 利用 <code>sse.connect_sse</code> 方法，传入当前请求的 <code>scope</code>、<code>receive</code> 方法和 <code>_send</code> 方法，建立一个异步上下文管理器。<br> 管理器返回两个数据流：<code>read_stream</code> 用于读取客户端发送的数据，<code>write_stream</code> 用于向客户端发送数据。</li><li><strong>启动 MCP 服务器</strong>：在成功建立连接后，调用 <code>mcp_server.run</code> 方法，并传入读取、写入流以及由 <code>mcp_server.create_initialization_options()</code> 生成的初始化参数。这一过程实现了 MCP 服务器与客户端之间的实时数据交互。</li></ul></li><li><p><strong>Starlette 应用及路由配置</strong></p><ul><li><strong>Starlette 实例化</strong>：函数返回一个新的 Starlette 应用实例，其调试模式根据传入的 <code>debug</code> 参数设置。</li><li><strong>路由设置</strong>：<br> 使用 <code>Route(&quot;/sse&quot;, endpoint=handle_sse)</code> 定义 <code>/sse</code> 路径，当客户端访问此路径时将触发 <code>handle_sse</code> 函数处理 SSE 连接。<br> 使用 <code>Mount(&quot;/messages/&quot;, app=sse.handle_post_message)</code> 将 <code>/messages/</code> 路径挂载到 <code>sse.handle_post_message</code> 应用上，用于处理通过 POST 请求发送的消息，实现与 SSE 长连接的消息传递功能。</li></ul></li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_starlette_app</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(mcp_server: Server, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, debug: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; Starlette:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;Create a Starlette application that can server the provied mcp server with SSE.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SseServerTransport(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/messages/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> handle_sse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(request: Request) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sse.connect_sse(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                request.scope,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                request.receive,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                request._send,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (read_stream, write_stream):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            await</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mcp_server.run(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                read_stream,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                write_stream,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                mcp_server.create_initialization_options(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Starlette(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        debug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">debug,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Route(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/sse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">endpoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">handle_sse),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Mount(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/messages/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sse.handle_post_message),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )</span></span></code></pre></div><p>接下来就是创建 MCP 服务器实例，然后通过上面定义的 <code>create_starlette_app</code> 方法创建 Starlette 应用，最后使用 uvicorn 启动 ASGI 服务器，实现实时的 SSE 数据传输。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    mcp_server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mcp._mcp_server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    parser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> argparse.ArgumentParser(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Run MCP SSE-based server&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    parser.add_argument(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;--host&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">help</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Host to bind to&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    parser.add_argument(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;--port&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18080</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">help</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Port to listen on&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> parser.parse_args()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # Bind SSE request handling to MCP server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    starlette_app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> create_starlette_app(mcp_server, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">debug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    uvicorn.run(starlette_app, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">args.host, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">args.port)</span></span></code></pre></div><h2 id="启动-mcp-服务器" tabindex="-1">启动 MCP 服务器 <a class="header-anchor" href="#启动-mcp-服务器" aria-label="Permalink to &quot;启动 MCP 服务器&quot;">​</a></h2><p>执行以下命令可以启动 MCP 服务器，默认监听在 18080 端口。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> server.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">INFO:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Started</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [82035]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">INFO:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Waiting</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> application</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> startup.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">INFO:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Application</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> startup</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> complete.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">INFO:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Uvicorn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> running</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://0.0.0.0:18080</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Press </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">CTRL+C</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> quit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="实现基于-sse-协议的-mcp-client" tabindex="-1">实现基于 SSE 协议的 MCP Client <a class="header-anchor" href="#实现基于-sse-协议的-mcp-client" aria-label="Permalink to &quot;实现基于 SSE 协议的 MCP Client&quot;">​</a></h2><p>MCP 客户端部分的代码可以参考<a href="https://mp.weixin.qq.com/s/yLuNixOVBlSNGkGHik-XaA" target="_blank" rel="noreferrer">快速上手：实现你的第一个 MCP Client</a>一文，这里不再重复说明。</p><p>唯一的区别就是在连接 MCP 服务器的时候通过 SSE 协议进行交互。以下是具体的代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> connect_to_sse_server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, server_url: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;Connect to an MCP server running with SSE transport&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # 创建 SSE 客户端连接上下文管理器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._streams_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sse_client(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">server_url)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # 异步初始化 SSE 连接，获取数据流对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    streams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._streams_context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__aenter__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # 使用数据流创建 MCP 客户端会话上下文</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._session_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ClientSession(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">streams)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # 初始化客户端会话对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.session: ClientSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._session_context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__aenter__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # 执行 MCP 协议初始化握手</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    await</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.session.initialize()</span></span></code></pre></div><h2 id="启动-mcp-客户端" tabindex="-1">启动 MCP 客户端 <a class="header-anchor" href="#启动-mcp-客户端" aria-label="Permalink to &quot;启动 MCP 客户端&quot;">​</a></h2><p>执行以下命令启动 MCP 客户端并连接 MCP 服务器。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> client.py</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://localhost:18080/sse</span></span></code></pre></div><p>启动 MCP 客户端后，我们输入问题 <code>Elasticsearch 集群中有哪些索引?</code>，可以看到 MCP 客户端成功调用了 MCP 服务器提供的 <code>list_indices</code> 从 Elasticsearch 集群中获取到了索引信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Initialized</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> SSE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> client...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Listing</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tools...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Connected</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tools:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;list_indices&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;get_index&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MCP</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Client</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Started!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Type</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> queries</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;quit&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> exit.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Query:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 集群中有哪些索引?</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[Calling tool list_indices with args {}]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">在集群中,有以下索引:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 索引名称:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> student</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 健康状况:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> green</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 状态:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> open</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> UUID:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> gPUyqTHZQ12rSTEYX-Ho3w</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 主分片数:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 副本分片数:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 文档数量:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 已删除的文档数量:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 存储大小:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 主分片的存储大小:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 索引名称:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> teacher</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 健康状况:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> green</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 状态:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> open</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> UUID:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ygkfkvjJSMaB946myzanNg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 主分片数:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 副本分片数:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 文档数量:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 已删除的文档数量:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 存储大小:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 22.6</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 主分片的存储大小:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kb</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文介绍了如何利用 Server-Sent Events（SSE）协议，实现 MCP 服务器与客户端之间的解耦通信。通过采用 SSE，服务器能够作为独立进程运行，支持多个客户端的灵活连接与断开，从而提升系统的灵活性和可扩展性。</p>`,42))])}const v=k(D,[["render",A]]);export{_ as __pageData,v as default};
