import{_ as s,o as i,c as a,R as n}from"./chunks/framework.FHZ5yb6k.js";const D=JSON.parse('{"title":"Golang","description":"","frontmatter":{"title":"Golang","author":"Se7en","categories":["Interview"],"tags":["Golang"]},"headers":[],"relativePath":"courses/interview/编程语言/01-golang.md","filePath":"courses/interview/编程语言/01-golang.md","lastUpdated":1729166221000}'),l={name:"courses/interview/编程语言/01-golang.md"},h=n(`<h2 id="如何限制协程执行数量" tabindex="-1">如何限制协程执行数量？ <a class="header-anchor" href="#如何限制协程执行数量" aria-label="Permalink to &quot;如何限制协程执行数量？&quot;">​</a></h2><p>在 Go 中，当我们需要同时执行大量的协程时，可能会因为资源（如 CPU 或内存）的限制，导致性能下降甚至系统崩溃。因此，限制协程的执行数量是控制并发度、提高程序效率的重要手段。</p><p>我们可以通过带缓冲的 channel 来控制协程的并发数量。缓冲区大小决定了同时允许多少个协程执行，超出的协程会阻塞，直到有其他协程完成。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg sync.WaitGroup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	maxWorkers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	sem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, maxWorkers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过带缓冲的 channel 来控制协程的并发数量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动 10 个协程，但最多只会有 maxWorkers 个协程同时执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">wg, sem)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 等待所有协程完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, wg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.WaitGroup, sem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	sem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取信号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 释放信号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> is working</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 模拟工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> done</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 9 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 6 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 4 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 4 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 5 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 9 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 2 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 6 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 0 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 0 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 7 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 5 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 8 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 2 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 3 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 3 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 1 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 7 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 8 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 1 done</span></span></code></pre></div><h2 id="函数执行超时控制代码怎么写" tabindex="-1">函数执行超时控制代码怎么写？ <a class="header-anchor" href="#函数执行超时控制代码怎么写" aria-label="Permalink to &quot;函数执行超时控制代码怎么写？&quot;">​</a></h2><p>在 Go 中，可以使用 context 包来实现函数执行的超时控制。context.WithTimeout 可以创建一个带有超时的上下文，当超时时间达到时，函数会停止执行。</p><p>select 语句用于同时监听任务执行结果和超时信号。如果任务完成，则输出结果；如果超过 2 秒任务未完成，ctx.Done() 会触发超时处理。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 模拟一个长时间运行的任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> longRunningTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(resultChan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Task is running&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	resultChan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;-</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Task is completed&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	resultChan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 设置超时为2秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ctx, cancel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WithTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">time.Second)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	defer</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 保证资源被释放</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动一个 goroutine 执行任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> longRunningTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(resultChan)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 使用 select 等待任务完成或超时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">resultChan:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ctx.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Timeout: Task took too long&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="sync-pool-有什么用" tabindex="-1">sync.Pool 有什么用？ <a class="header-anchor" href="#sync-pool-有什么用" aria-label="Permalink to &quot;sync.Pool 有什么用？&quot;">​</a></h2><p><code>sync.Pool</code> 是一个对象缓存池，可以用来存储临时对象，减少对象的创建和销毁次数，提高性能。<code>sync.Pool</code> 是并发安全的，可以在多个 goroutine 中并发使用。 使用方法：</p><ul><li><code>Get()</code>：从池中获取一个对象，如果池是空的，则调用 New 创建新对象。</li><li><code>Put()</code>：将对象放回池中，以便复用。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.Pool{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		New: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{} {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Creating a new User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">User{Name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Seven&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 从池中获取一个对象，如果池是空的，则调用 New 创建新对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	u1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">User)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(u1.Name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	u1.Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Jack&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 将对象放回池中，以便复用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	p.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(u1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	u2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">User)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(u2.Name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出结果，只创建了一次 User 对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Creating a new User</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Seven</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Jack</span></span></code></pre></div><p>像 gin 框架中的 <code>Context</code> 对象就是使用 <code>sync.Pool</code> 来复用的。(代码：<a href="https://github.com/gin-gonic/gin/blob/f05f966a0824b1d302ee556183e2579c91954266/gin.go#L624-L625" target="_blank" rel="noreferrer">ServeHTTP</a>)</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ServeHTTP conforms to the http.Handler interface.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (engine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Engine) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ServeHTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(w http.ResponseWriter, req </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">http.Request) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 从 sync.Pool 中获取一个 Context 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> engine.pool.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.writermem.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(w)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.Request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> req</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	engine.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">handleHTTPRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	engine.pool.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="明明是-nil-却-nil-的问题" tabindex="-1">明明是 nil 却 != nil 的问题 <a class="header-anchor" href="#明明是-nil-却-nil-的问题" aria-label="Permalink to &quot;明明是 nil 却 != nil 的问题&quot;">​</a></h2><p>在下面的代码中，虽然变量 a 是 nil，但是在将它赋值给 b（interface{} 类型）之后，b 并 不是 nil。这是因为在 Go 中，interface{} 类型的值由两部分组成：</p><ul><li>类型（type）：存储的是具体值的类型。</li><li>值（value）：存储的是具体的值。</li></ul><p>当你将 a 赋值给 b 时，b 是一个接口类型，它会包含两部分信息：</p><ul><li>类型部分是 <code>*struct{}</code>（即 b 的类型是 <code>*struct{}</code>）。</li><li>值部分是 nil（因为 a 是一个 nil 指针）。</li></ul><p>但是，在 Go 中，一个接口只有在其“类型”和“值”都为 nil 时，才被认为是 nil。在你的代码中，b 的类型是 <code>*struct{}</code>，虽然它的值是 nil，但它的类型部分并不是 nil，因此 b != nil。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;b is nil&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;b is not nil&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//b is not nil</span></span></code></pre></div><h2 id="var-data-int-和-var-data-make-int-0-有什么区别" tabindex="-1"><code>var data []int</code> 和 <code>var data = make([]int, 0)</code> 有什么区别？ <a class="header-anchor" href="#var-data-int-和-var-data-make-int-0-有什么区别" aria-label="Permalink to &quot;\`var data []int\` 和 \`var data = make([]int, 0)\` 有什么区别？&quot;">​</a></h2><p><code>var data []int</code> 声明一个切片，初始值为 nil。 <code>var data = make([]int, 0)</code> 切片的值不为 nil，而是一个长度和容量都为 0 的空切片。在大多数情况下，推荐使用 var data = make([]int, 0) 来初始化切片。</p>`,23),k=[h];function p(t,e,r,d,g,A){return i(),a("div",null,k)}const c=s(l,[["render",p]]);export{D as __pageData,c as default};
