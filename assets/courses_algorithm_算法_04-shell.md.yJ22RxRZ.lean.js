import{_ as o}from"./chunks/ArticleMetadata.Dcj_pprX.js";import{_ as d,C as c,c as r,o as n,k as i,G as h,P as g,a as u,w as k,b,e as m}from"./chunks/framework.PU6D6dP3.js";import"./chunks/md5.BwKp3kP6.js";const D=JSON.parse('{"title":"Shell 命令","description":"","frontmatter":{"title":"Shell 命令","author":"Se7en","categories":["Algorithm","Shell"],"tags":["Algorithm","Shell"]},"headers":[],"relativePath":"courses/algorithm/算法/04-shell.md","filePath":"courses/algorithm/算法/04-shell.md","lastUpdated":1750234508000}'),v={name:"courses/algorithm/算法/04-shell.md"};function y(a,s,F,C,w,x){const p=o,l=c("ClientOnly");return n(),r("div",null,[s[0]||(s[0]=i("h1",{id:"shell-命令",tabindex:"-1"},[u("Shell 命令 "),i("a",{class:"header-anchor",href:"#shell-命令","aria-label":'Permalink to "Shell 命令"'},"​")],-1)),h(l,null,{default:k(()=>{var e,t;return[(((e=a.$frontmatter)==null?void 0:e.aside)??!0)&&(((t=a.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(n(),b(p,{key:0,article:a.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),s[1]||(s[1]=g(`<h2 id="awk-命令" tabindex="-1">Awk 命令 <a class="header-anchor" href="#awk-命令" aria-label="Permalink to &quot;Awk 命令&quot;">​</a></h2><p>awk 命令是一种功能强大的文本处理工具和编程语言，主要用于在 Linux 和 Unix 系统中对文本文件或数据流进行分析、处理和格式化输出。它以行为单位逐行读取输入数据（可以是文件、标准输入或其他命令的输出），并根据用户定义的模式（pattern）匹配和动作（action）执行相应的操作。</p><h3 id="awk-1-判断字段数量" tabindex="-1"><a href="https://www.hackerrank.com/challenges/awk-1/problem?isFullScreen=true" target="_blank" rel="noreferrer">Awk #1</a>（判断字段数量） <a class="header-anchor" href="#awk-1-判断字段数量" aria-label="Permalink to &quot;[Awk #1](https://www.hackerrank.com/challenges/awk-1/problem?isFullScreen=true)（判断字段数量）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>找出每行中缺少任意一个成绩（English、Math、Science）的学生，打印提示信息。</p><ul><li>每行包含学生标识符和三个成绩，字段之间以空格分隔。</li><li>如果某一行字段数量少于 4，说明有成绩缺失。</li><li>输出格式为：<code>Not all scores are available for [Identifier]</code>。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A 25 27 50</span></span>
<span class="line"><span>B 35 75</span></span>
<span class="line"><span>C 75 78</span></span>
<span class="line"><span>D 99 88 76</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Not all scores are available for B</span></span>
<span class="line"><span>Not all scores are available for C</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;NF &lt; 4 { print &quot;Not all scores are available for &quot; $1 }&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>NF</code>：表示当前行的字段数量。</li><li><code>NF &lt; 4</code>：判断该行是否缺少字段。</li><li><code>$1</code>：表示该行的第一个字段，即学生标识符。</li></ul><h3 id="awk-2-判断字段数值" tabindex="-1"><a href="https://www.hackerrank.com/challenges/awk-2/problem?isFullScreen=true" target="_blank" rel="noreferrer">Awk #2</a>（判断字段数值） <a class="header-anchor" href="#awk-2-判断字段数值" aria-label="Permalink to &quot;[Awk #2](https://www.hackerrank.com/challenges/awk-2/problem?isFullScreen=true)（判断字段数值）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>给定学生成绩的表格数据，每行包括一个标识符和三门课程的成绩（英语、数学、科学）。判断每位学生是否全部及格。</p><ul><li>成绩大于等于 50 视为及格。</li><li>三门都及格，输出 <code>Pass</code>；否则输出 <code>Fail</code>。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A 25 27 50</span></span>
<span class="line"><span>B 35 37 75</span></span>
<span class="line"><span>C 75 78 80</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A : Fail</span></span>
<span class="line"><span>B : Fail</span></span>
<span class="line"><span>C : Pass</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  if ($2 &gt;= 50 &amp;&amp; $3 &gt;= 50 &amp;&amp; $4 &gt;= 50)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    printf &quot;%s : Pass\\n&quot;, $1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  else</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    printf &quot;%s : Fail\\n&quot;, $1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>$1</code>：学生标识符。</li><li><code>$2 $3 $4</code>：对应三门成绩。</li><li><code>if</code> 判断三门是否都 ≥ 50。</li><li><code>printf</code> 控制输出格式为 <code>[标识符] : [Pass/Fail]</code>。</li></ul><h3 id="awk-3-多个条件判断" tabindex="-1"><a href="https://www.hackerrank.com/challenges/awk-3/problem?isFullScreen=true" target="_blank" rel="noreferrer">Awk #3</a>（多个条件判断） <a class="header-anchor" href="#awk-3-多个条件判断" aria-label="Permalink to &quot;[Awk #3](https://www.hackerrank.com/challenges/awk-3/problem?isFullScreen=true)（多个条件判断）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>对每位学生的三门课成绩（英语、数学、科学）求平均分，根据平均分给出对应等级。</p><ul><li>平均分 ≥ 80：<code>A</code></li><li>平均分 ≥ 60 且 &lt; 80：<code>B</code></li><li>平均分 ≥ 50 且 &lt; 60：<code>C</code></li><li>平均分 &lt; 50：<code>FAIL</code></li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A 25 27 50</span></span>
<span class="line"><span>B 35 37 75</span></span>
<span class="line"><span>C 75 78 80</span></span>
<span class="line"><span>D 99 88 76</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A 25 27 50 : FAIL</span></span>
<span class="line"><span>B 35 37 75 : FAIL</span></span>
<span class="line"><span>C 75 78 80 : B</span></span>
<span class="line"><span>D 99 88 76 : A</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  avg = ($2 + $3 + $4) / 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  grade = &quot;FAIL&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  if (avg &gt;= 80)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    grade = &quot;A&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  else if (avg &gt;= 60)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    grade = &quot;B&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  else if (avg &gt;= 50)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    grade = &quot;C&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  printf &quot;%s : %s\\n&quot;, $0, grade</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>$2 $3 $4</code>：分别为英语、数学、科学成绩。</li><li><code>avg</code>：三门课平均分。</li><li><code>grade</code>：根据 <code>avg</code> 判断等级。</li><li><code>$0</code>：原始的整行输入数据。</li></ul><h3 id="awk-4-处理多行" tabindex="-1"><a href="https://www.hackerrank.com/challenges/awk-4/problem?isFullScreen=true" target="_blank" rel="noreferrer">Awk #4</a>（处理多行） <a class="header-anchor" href="#awk-4-处理多行" aria-label="Permalink to &quot;[Awk #4](https://www.hackerrank.com/challenges/awk-4/problem?isFullScreen=true)（处理多行）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>每两行数据拼接成一行，中间用分号 <code>;</code> 分隔。</p><ul><li>每行包含学生的标识符和三门课程的成绩。</li><li>将每两行合并为一行输出。</li><li>如果总行数为奇数，最后一行也要输出，以分号结尾。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A 25 27 50</span></span>
<span class="line"><span>B 35 37 75</span></span>
<span class="line"><span>C 75 78 80</span></span>
<span class="line"><span>D 99 88 76</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A 25 27 50;B 35 37 75</span></span>
<span class="line"><span>C 75 78 80;D 99 88 76</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  NR % 2 == 1 { line = $0; next }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  NR % 2 == 0 { print line &quot;;&quot; $0 }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  END { if (NR % 2 == 1) print line &quot;;&quot; }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>NR</code>：当前记录号（行号）。</li><li><code>NR % 2 == 1</code>：奇数行保存到变量 <code>line</code>。<code>next</code> 跳过当前行，开始处理下一行。</li><li><code>NR % 2 == 0</code>：偶数行时输出 <code>line;当前行</code>。</li><li><code>END { ... }</code>：如果总行数是奇数，打印最后一行（末尾加分号）。</li></ul><h2 id="cut-命令" tabindex="-1">Cut 命令 <a class="header-anchor" href="#cut-命令" aria-label="Permalink to &quot;Cut 命令&quot;">​</a></h2><p>cut 命令是 Linux 和 Unix 系统中用于从文件或输入的每一行中“剪切”出指定部分内容的工具，常用于文本处理和结构化数据提取。它可以按字节（-b）、字符（-c）或字段（-f）来截取数据，并将结果输出到标准输出。cut 命令的常用参数如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-b</code></td><td>按字节位置提取内容</td></tr><tr><td><code>-c</code></td><td>按字符位置提取内容</td></tr><tr><td><code>-f</code></td><td>按字段提取内容</td></tr><tr><td><code>-d</code></td><td>指定字段分隔符（默认为制表符）</td></tr></tbody></table><h3 id="cut-1-获取指定位置的字符" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-cut-1/problem?isFullScreen=true" target="_blank" rel="noreferrer">Cut #1</a>（获取指定位置的字符） <a class="header-anchor" href="#cut-1-获取指定位置的字符" aria-label="Permalink to &quot;[Cut #1](https://www.hackerrank.com/challenges/text-processing-cut-1/problem?isFullScreen=true)（获取指定位置的字符）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>给定 <code>N</code> 行输入，从每一行中提取第 <strong>3 个字符</strong>，输出共 <code>N</code> 行。</p><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Hello</span></span>
<span class="line"><span>World</span></span>
<span class="line"><span>how are you</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>l</span></span>
<span class="line"><span>r</span></span>
<span class="line"><span>w</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -c3</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-c3</code>：提取每一行的第 3 个字符。</li></ul><h3 id="cut-2-获取-2-个指定位置的字符" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-cut-2/problem?isFullScreen=true" target="_blank" rel="noreferrer">Cut #2</a>（获取 2 个指定位置的字符） <a class="header-anchor" href="#cut-2-获取-2-个指定位置的字符" aria-label="Permalink to &quot;[Cut #2](https://www.hackerrank.com/challenges/text-processing-cut-2/problem?isFullScreen=true)（获取 2 个指定位置的字符）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>给定 <code>N</code> 行输入，从每一行中提取第 <strong>2 个字符</strong> 和第 <strong>7 个字符</strong>，输出共 <code>N</code> 行。</p><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Hello</span></span>
<span class="line"><span>World</span></span>
<span class="line"><span>how are you</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>e</span></span>
<span class="line"><span>o</span></span>
<span class="line"><span>oe</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -c2,7</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-c2,7</code>：提取每一行的第 2 个和第 7 个字符。</li></ul><h3 id="cut-3-获取指定范围的字符" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-cut-3/problem?isFullScreen=true" target="_blank" rel="noreferrer">Cut #3</a>（获取指定范围的字符） <a class="header-anchor" href="#cut-3-获取指定范围的字符" aria-label="Permalink to &quot;[Cut #3](https://www.hackerrank.com/challenges/text-processing-cut-3/problem?isFullScreen=true)（获取指定范围的字符）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将每一行中从第 <strong>2 个字符开始</strong> 到第 <strong>7 个字符结束</strong> 的字符范围提取出来，两个位置都包含。</p><ul><li>每行都输出第 2 到第 7 个字符。</li><li>不足 7 个字符时只提取可用范围。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Hello</span></span>
<span class="line"><span>World</span></span>
<span class="line"><span>how are you</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>ello</span></span>
<span class="line"><span>orld</span></span>
<span class="line"><span>ow are</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -c2-7</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-c2-7</code>：表示提取每一行第 2 到第 7 个字符。</li></ul><h3 id="cut-4-获取默认-tab-分隔的字段" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-cut-5/problem?isFullScreen=true" target="_blank" rel="noreferrer">Cut #4</a>（获取默认 tab 分隔的字段） <a class="header-anchor" href="#cut-4-获取默认-tab-分隔的字段" aria-label="Permalink to &quot;[Cut #4](https://www.hackerrank.com/challenges/text-processing-cut-5/problem?isFullScreen=true)（获取默认 tab 分隔的字段）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>给定一个以制表符（tab）分隔的文件，输出每行的前 <strong>3 个字段</strong>。</p><ul><li>输入为 TSV 格式，每行有多个字段。</li><li>输出中每行仅保留前 3 个字段。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>1	New York, New York[10]	8,244,910	1	New York-Northern New Jersey-Long Island, NY-NJ-PA MSA	19,015,900	1	New York-Newark-Bridgeport, NY-NJ-CT-PA CSA	22,214,083</span></span>
<span class="line"><span>2	Los Angeles, California	3,819,702	2	Los Angeles-Long Beach-Santa Ana, CA MSA	12,944,801	2	Los Angeles-Long Beach-Riverside, CA CSA	18,081,569</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>1	New York, New York[10]	8,244,910</span></span>
<span class="line"><span>2	Los Angeles, California	3,819,702</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f1-3</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-f1-3</code>：提取第 1 到第 3 个字段。</li><li>默认使用制表符（tab）作为分隔符，适用于 TSV 格式文件。</li></ul><h3 id="cut-5-指定分隔符" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-cut-7/problem?isFullScreen=true" target="_blank" rel="noreferrer">Cut #5</a>（指定分隔符） <a class="header-anchor" href="#cut-5-指定分隔符" aria-label="Permalink to &quot;[Cut #5](https://www.hackerrank.com/challenges/text-processing-cut-7/problem?isFullScreen=true)（指定分隔符）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>给定一句英文句子，提取每行中的第 <strong>4 个单词</strong>。假设单词之间仅由空格 <code>&#39; &#39;</code> 分隔。</p><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Hello World how are you</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>are</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39; &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f4</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-d &#39; &#39;</code>：以空格作为字段分隔符。</li><li><code>-f4</code>：提取第 4 个字段（即第 4 个单词）。</li></ul><h2 id="sed-命令" tabindex="-1">Sed 命令 <a class="header-anchor" href="#sed-命令" aria-label="Permalink to &quot;Sed 命令&quot;">​</a></h2><p>sed 命令是 Linux/Unix 系统中的一种流编辑器（stream editor），用于对文本文件或输入的数据流进行逐行处理和编辑。它可以根据用户提供的脚本或命令，实现对文本的自动修改、替换、删除、插入等操作，而无需手动打开文件编辑。</p><p>参考资料：</p><ul><li><a href="https://quickref.me/zh-CN/docs/sed.html" target="_blank" rel="noreferrer">Sed 备忘清单</a></li><li><a href="https://www.grymoire.com/Unix/Sed.html#uh-40" target="_blank" rel="noreferrer">Sed - An Introduction and Tutorial by Bruce Barnett</a></li></ul><h3 id="sed-1-匹配完整单词" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-in-linux-the-sed-command-1/problem?isFullScreen=true" target="_blank" rel="noreferrer">Sed #1</a>（匹配完整单词） <a class="header-anchor" href="#sed-1-匹配完整单词" aria-label="Permalink to &quot;[Sed #1](https://www.hackerrank.com/challenges/text-processing-in-linux-the-sed-command-1/problem?isFullScreen=true)（匹配完整单词）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将每一行中<strong>第一个完整</strong>单词 <code>the</code> 替换为 <code>this</code>。要求：</p><ul><li>匹配完整单词（不能替换比如 <code>&quot;thereby&quot;</code>、<code>&quot;theme&quot;</code> 这样的子串）。</li><li>只替换每行中第一个匹配。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>the quick brown fox jumps over the lazy dog.</span></span>
<span class="line"><span>thereby lies the problem.</span></span>
<span class="line"><span>the theater is not the same as the theme park.</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>this quick brown fox jumps over the lazy dog.</span></span>
<span class="line"><span>thereby lies this problem.</span></span>
<span class="line"><span>this theater is not the same as the theme park.</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/\\&lt;the\\&gt;/this/&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>\\&lt;the\\&gt;</code>：表示匹配<strong>整个单词 <code>the</code></strong>（GNU sed 特有语法）。</li><li>使用单引号 <code>&#39;&#39;</code> 防止 <code>\\</code> 被 shell 提前解释。</li></ul><h3 id="sed-2-全局替换、忽略大小写" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-in-linux-the-sed-command-2/problem?isFullScreen=true" target="_blank" rel="noreferrer">Sed #2</a>（全局替换、忽略大小写） <a class="header-anchor" href="#sed-2-全局替换、忽略大小写" aria-label="Permalink to &quot;[Sed #2](https://www.hackerrank.com/challenges/text-processing-in-linux-the-sed-command-2/problem?isFullScreen=true)（全局替换、忽略大小写）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将每一行中<strong>所有</strong>完整单词 <code>thy</code> 替换为 <code>your</code>。要求：</p><ul><li>匹配时不区分大小写（如 <code>thy</code>、<code>Thy</code>、<code>tHY</code> 等都应被替换）。</li><li>每行中出现多个时要全部替换。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>thy love is eternal. Thy soul is kind. worthy shall not change.</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>your love is eternal. your soul is kind. worthy shall not change.</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/thy/your/gI&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>I</code>：忽略大小写，匹配 <code>Thy</code>、<code>THY</code> 等形式。</li><li><code>g</code>：全局替换，确保每行中所有匹配都被替换。</li><li>使用单引号 <code>&#39;&#39;</code> 防止 <code>\\</code> 被 shell 提前解释。</li></ul><h3 id="sed-3-获取原始匹配内容" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-in-linux-the-sed-command-3/problem?isFullScreen=true" target="_blank" rel="noreferrer">Sed #3</a>（获取原始匹配内容） <a class="header-anchor" href="#sed-3-获取原始匹配内容" aria-label="Permalink to &quot;[Sed #3](https://www.hackerrank.com/challenges/text-processing-in-linux-the-sed-command-3/problem?isFullScreen=true)（获取原始匹配内容）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将每一行中<strong>所有出现的 <code>thy</code></strong>（不区分大小写）用花括号 <code>{}</code> 包裹起来。</p><ul><li>匹配不要求是完整单词</li><li>大小写不敏感（如 <code>thy</code>、<code>Thy</code>、<code>THY</code> 等都应被替换）</li><li>每行中出现多个时全部替换</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Thy light guides thy path. worthy not matched.</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>{Thy} light guides {thy} path. wor{thy} not matched.</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/thy/{&amp;}/gI&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>thy</code>：匹配目标字符串</li><li><code>{&amp;}</code>：<code>&amp;</code> 表示<strong>原始匹配内容</strong>，如 <code>Thy</code> → <code>{Thy}</code></li><li><code>g</code>：全局替换，替换每行所有匹配项</li><li><code>I</code>：忽略大小写，匹配 <code>Thy</code>、<code>tHy</code>、<code>THY</code> 等</li><li>使用单引号 <code>&#39;&#39;</code> 防止 <code>\\</code> 被 shell 提前解释。</li></ul><h3 id="sed-4-正则表达式" tabindex="-1"><a href="https://www.hackerrank.com/challenges/sed-command-4/problem?isFullScreen=true" target="_blank" rel="noreferrer">Sed #4</a>（正则表达式） <a class="header-anchor" href="#sed-4-正则表达式" aria-label="Permalink to &quot;[Sed #4](https://www.hackerrank.com/challenges/sed-command-4/problem?isFullScreen=true)（正则表达式）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将每一行的信用卡号（格式为 <code>dddd dddd dddd dddd</code>）进行掩码处理，仅保留最后四位数字。</p><ul><li>每行包含 16 位数字，分成 4 组，用空格分隔</li><li>仅保留最后一组数字，其余部分全部用 <code>****</code> 替代</li><li>格式仍保持为 <code>**** **** **** 1234</code></li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>1234 5678 9101 1234</span></span>
<span class="line"><span>2999 5178 9101 2234</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>**** **** **** 1234</span></span>
<span class="line"><span>**** **** **** 2234</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/^[0-9]\\{4\\} [0-9]\\{4\\} [0-9]\\{4\\}/**** **** ****/&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>^[0-9]\\{4\\}</code>：匹配 4 个一组的数字</li></ul><h3 id="sed-5-扩展正则表达式" tabindex="-1"><a href="https://www.hackerrank.com/challenges/sed-command-5/problem?isFullScreen=true" target="_blank" rel="noreferrer">Sed #5</a>（扩展正则表达式） <a class="header-anchor" href="#sed-5-扩展正则表达式" aria-label="Permalink to &quot;[Sed #5](https://www.hackerrank.com/challenges/sed-command-5/problem?isFullScreen=true)（扩展正则表达式）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将每一行中的信用卡号（格式为 <code>dddd dddd dddd dddd</code>）的<strong>段顺序反转</strong>。</p><ul><li>每组由 4 位数字组成，共 4 组，空格分隔</li><li>输出格式仍保持为 4 组数字，每组 4 位</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>1434 5678 9101 1234</span></span>
<span class="line"><span>2999 5178 9101 2234</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>1234 9101 5678 1434</span></span>
<span class="line"><span>2234 9101 5178 2999</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -E</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/([0-9]{4}) ([0-9]{4}) ([0-9]{4}) ([0-9]{4})/\\4 \\3 \\2 \\1/&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-E</code>（可选，或者 <code>-r</code>）：启用扩展正则（ERE），允许使用 <code>()</code> 和 <code>{}</code> 而无需转义。</li><li><code>([0-9]{4})</code>：匹配一组 4 位数字并捕获为一个分组（共捕获 4 个）。</li><li><code>\\4 \\3 \\2 \\1</code>：使用反向引用将捕获的四组倒序输出。</li></ul><h3 id="sed-6-匹配-ip-地址" tabindex="-1">[Sed #6]（匹配 IP 地址） <a class="header-anchor" href="#sed-6-匹配-ip-地址" aria-label="Permalink to &quot;[Sed #6]（匹配 IP 地址）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>从给定的 IP 地址中提取 IP 地址。</p><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>INFO 2024-06-18 12:00:00 client_ip=192.168.1.10 status=connected</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>192.168.1.10</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;INFO 2024-06-18 12:00:00 client_ip=192.168.1.10 status=connected&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -E</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/.*[^0-9]([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)[^0-9].*/\\1/&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-E</code>：启用扩展正则（ERE）。</li><li><code>.*[^0-9]</code>：匹配任意字符（除数字外）。</li><li><code>([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)</code>：匹配 IP 地址并捕获。</li><li><code>[^0-9].*</code>：匹配剩余字符（除数字外）。</li><li><code>\\1</code>：使用反向引用输出捕获的 IP 地址。</li></ul><h2 id="sort-命令" tabindex="-1">Sort 命令 <a class="header-anchor" href="#sort-命令" aria-label="Permalink to &quot;Sort 命令&quot;">​</a></h2><p>sort 命令是 Linux/Unix 系统中用于对文本文件或标准输入的内容按行进行排序的工具。它将文件的每一行作为一个单位，按照用户指定的规则（默认是 ASCII 码顺序）进行排序，排序结果输出到标准输出或指定文件。sort 命令的常用参数如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-k &lt;start&gt;[,&lt;end&gt;</code></td><td>指定按第 <code>&lt;start&gt;</code> 列（到第 <code>&lt;end&gt;</code> 列）排序</td></tr><tr><td><code>-n</code></td><td>按数值进行排序</td></tr><tr><td><code>-r</code></td><td>逆序排序（从大到小）</td></tr><tr><td><code>-t &lt;delimiter&gt;</code></td><td>指定分隔符（默认是空白符）</td></tr><tr><td><code>-u</code></td><td>去重（只保留唯一的行）</td></tr><tr><td><code>-f</code></td><td>忽略大小写进行排序</td></tr><tr><td><code>-b</code></td><td>忽略每行前导空格</td></tr><tr><td><code>-M</code></td><td>按月份名称排序（如 Jan, Feb, Mar）</td></tr><tr><td><code>-V</code></td><td>按“版本号”顺序排序（例如 1.2.9 &lt; 1.10.1）</td></tr></tbody></table><h3 id="sort-1-指定分隔符-指定排序字段" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-sort-5/problem?isFullScreen=true" target="_blank" rel="noreferrer">Sort #1</a>（指定分隔符，指定排序字段） <a class="header-anchor" href="#sort-1-指定分隔符-指定排序字段" aria-label="Permalink to &quot;[Sort #1](https://www.hackerrank.com/challenges/text-processing-sort-5/problem?isFullScreen=true)（指定分隔符，指定排序字段）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>给定一个以 Tab 分隔的气温数据表，每行包含城市名称与每月平均温度。请根据 <strong>1 月份的平均温度（第 2 列）</strong> 对所有行按<strong>降序</strong>排序。</p><ul><li>每列由 tab 分隔。</li><li>输出按第 2 列的数值从大到小排序。</li></ul><p><strong>示例：</strong></p><p>输入（节选）：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Austin, Texas	50.2	68.3	84.2	70.6	33.65	85	0.9	62 / 58</span></span>
<span class="line"><span>Baton Rouge, La.	50.1	66.6	81.7	68.1	63.08	110.0	0.2	52 / 46</span></span>
<span class="line"><span>Boston, Mass.	29.3	48.3	73.9	54.1	42.53	127	42.8	52 / 66</span></span></code></pre></div><p>输出（节选）：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Austin, Texas	50.2	68.3	84.2	70.6	33.65	85	0.9	62 / 58</span></span>
<span class="line"><span>Baton Rouge, La.	50.1	66.6	81.7	68.1	63.08	110.0	0.2	52 / 46</span></span>
<span class="line"><span>Boston, Mass.	29.3	48.3	73.9	54.1	42.53	127	42.8	52 / 66</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> $&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -k2nr</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-t $&#39;\\t&#39;</code>：指定 tab 为字段分隔符。</li><li><code>-k2</code>：基于第 2 列排序。<code>-k&lt;start&gt;[,&lt;end&gt;]</code>：指定排序的起始和结束字段。</li><li><code>n</code>：按数值排序。</li><li><code>r</code>：降序排列。</li></ul><h2 id="tr-命令" tabindex="-1">Tr 命令 <a class="header-anchor" href="#tr-命令" aria-label="Permalink to &quot;Tr 命令&quot;">​</a></h2><p>tr 命令是 Linux/Unix 系统中的字符转换工具，主要用于对标准输入的字符进行替换、删除和压缩操作，然后将结果输出到标准输出。它可以将一组字符转换成另一组字符，常用于文本处理和格式化。tr 命令的常用参数如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-c</code></td><td>取反，使用字符集的补集</td></tr><tr><td><code>-d</code></td><td>删除指定字符集中的字符</td></tr><tr><td><code>-s</code></td><td>压缩重复的字符为单个字符</td></tr><tr><td><code>[:alnum:]</code></td><td>所有字母和数字</td></tr><tr><td><code>[:alpha:]</code></td><td>所有字母</td></tr><tr><td><code>[:digit:]</code></td><td>所有数字</td></tr><tr><td><code>[:lower:]</code></td><td>所有小写字母</td></tr><tr><td><code>[:upper:]</code></td><td>所有大写字母</td></tr><tr><td><code>[:space:]</code></td><td>所有空白字符（空格、制表符、换行符等）</td></tr><tr><td><code>[:punct:]</code></td><td>所有标点符号</td></tr></tbody></table><h3 id="tr-1-替换字符" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-tr-1/problem?isFullScreen=true" target="_blank" rel="noreferrer">Tr #1</a>（替换字符） <a class="header-anchor" href="#tr-1-替换字符" aria-label="Permalink to &quot;[Tr #1](https://www.hackerrank.com/challenges/text-processing-tr-1/problem?isFullScreen=true)（替换字符）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将文本中的所有圆括号 <code>()</code> 替换为方括号 <code>[]</code>。</p><ul><li>替换所有左括号 <code>(</code> 为 <code>[</code>。</li><li>替换所有右括号 <code>)</code> 为 <code>]</code>。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>int i=(int)5.8</span></span>
<span class="line"><span>(23 + 5)*2</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>int i=[int]5.8</span></span>
<span class="line"><span>[23 + 5]*2</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tr</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;()&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;[]&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>&#39;()&#39;</code>：匹配圆括号字符。</li><li><code>&#39;[]&#39;</code>：将其替换为对应的方括号。</li><li>一一对应地将 <code>(</code> 替换为 <code>[</code>，<code>)</code> 替换为 <code>]</code>。</li></ul><h3 id="tr-2-删除字符" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-tr-2/problem?isFullScreen=true" target="_blank" rel="noreferrer">Tr #2</a>（删除字符） <a class="header-anchor" href="#tr-2-删除字符" aria-label="Permalink to &quot;[Tr #2](https://www.hackerrank.com/challenges/text-processing-tr-2/problem?isFullScreen=true)（删除字符）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>删除文本中所有的小写字母 <code>a-z</code>。</p><ul><li>只保留大写字母、空格及其他字符。</li><li>所有小写字符将被移除。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Hello</span></span>
<span class="line"><span>World</span></span>
<span class="line"><span>how are you</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>H</span></span>
<span class="line"><span>W</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;a-z&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-d</code>：删除指定字符集。</li><li><code>&#39;a-z&#39;</code>：表示所有小写字母，从 <code>a</code> 到 <code>z</code>。</li></ul><h3 id="tr-3-压缩字符" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-tr-3/problem?isFullScreen=true" target="_blank" rel="noreferrer">Tr #3</a>（压缩字符） <a class="header-anchor" href="#tr-3-压缩字符" aria-label="Permalink to &quot;[Tr #3](https://www.hackerrank.com/challenges/text-processing-tr-3/problem?isFullScreen=true)（压缩字符）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>将文本中所有连续的多个空格合并为一个空格。</p><ul><li>所有空格序列压缩为单个空格。</li><li>不影响其他字符。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>He  llo</span></span>
<span class="line"><span>Wor   ld</span></span>
<span class="line"><span>how    are   you</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>He llo</span></span>
<span class="line"><span>Wor ld</span></span>
<span class="line"><span>how are you</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39; &#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>-s</code>：squeeze（压缩）重复字符。</li><li><code>&#39; &#39;</code>：目标是空格，将多个空格压缩成一个空格。</li></ul><h2 id="uniq-命令" tabindex="-1">Uniq 命令 <a class="header-anchor" href="#uniq-命令" aria-label="Permalink to &quot;Uniq 命令&quot;">​</a></h2><p>uniq 命令是 Linux/Unix 系统中用于检测和处理文本文件中相邻重复行的工具。它主要功能包括去除重复行、统计重复行出现次数、只显示重复行或唯一行等。uniq 通常与 sort 命令结合使用，因为 uniq 只能处理相邻的重复行，使用 sort 能先将相同的行排列在一起。uniq 命令的常用参数如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-c</code></td><td>显示每行重复出现的次数</td></tr><tr><td><code>-d</code></td><td>只显示重复的行（显示一次）</td></tr><tr><td><code>-D</code></td><td>显示所有重复的行</td></tr><tr><td><code>-f N</code></td><td>忽略比较的前 N 个字段</td></tr><tr><td><code>-i</code></td><td>忽略大小写差异</td></tr><tr><td><code>-s N</code></td><td>忽略比较的前 N 个字符</td></tr><tr><td><code>-u</code></td><td>只显示唯一的行（没有重复的行）</td></tr><tr><td><code>-w N</code></td><td>仅比较前 N 个字符，忽略后面的所有内容</td></tr></tbody></table><h3 id="uniq-1-移除重复行" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-1/problem?isFullScreen=true" target="_blank" rel="noreferrer">Uniq #1</a>（移除重复行） <a class="header-anchor" href="#uniq-1-移除重复行" aria-label="Permalink to &quot;[Uniq #1](https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-1/problem?isFullScreen=true)（移除重复行）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>删除文本中<strong>连续重复</strong>的行，文本中重复的行已经排在相邻位置了。</p><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>00</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>02</span></span>
<span class="line"><span>02</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>00</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>02</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uniq</span></span></code></pre></div><h3 id="uniq-2-统计重复次数" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-2/problem?isFullScreen=true" target="_blank" rel="noreferrer">Uniq #2</a>（统计重复次数） <a class="header-anchor" href="#uniq-2-统计重复次数" aria-label="Permalink to &quot;[Uniq #2](https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-2/problem?isFullScreen=true)（统计重复次数）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>统计每一行<strong>连续重复</strong>出现的次数，并输出重复次数和对应的行。</p><ul><li>只统计连续重复的行。</li><li>输出格式为：<code>次数 内容</code>，中间用空格分隔。</li><li>不应包含行首多余空格。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>00</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>02</span></span>
<span class="line"><span>02</span></span>
<span class="line"><span>03</span></span>
<span class="line"><span>aa</span></span>
<span class="line"><span>aa</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>2 00</span></span>
<span class="line"><span>2 01</span></span>
<span class="line"><span>2 00</span></span>
<span class="line"><span>2 02</span></span>
<span class="line"><span>1 03</span></span>
<span class="line"><span>2 aa</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uniq</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/^ *//&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>uniq -c</code>：统计连续重复行的数量，并在每行前添加计数。</li><li><code>sed &#39;s/^ *//&#39;</code>：去除每行行首多余空格，保证输出格式正确。</li></ul><h3 id="uniq-3-忽略大小写" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-3/problem?isFullScreen=true" target="_blank" rel="noreferrer">Uniq #3</a>（忽略大小写） <a class="header-anchor" href="#uniq-3-忽略大小写" aria-label="Permalink to &quot;[Uniq #3](https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-3/problem?isFullScreen=true)（忽略大小写）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>统计**连续重复（不区分大小写）**的行出现的次数，输出重复次数和对应行内容。</p><ul><li>比较时忽略大小写，例如 <code>aa</code>、<code>AA</code>、<code>Aa</code> 视为相同。</li><li>输出格式为：<code>次数 内容</code>，中间用空格分隔。</li><li>不应包含行首多余空格。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>00</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>02</span></span>
<span class="line"><span>02</span></span>
<span class="line"><span>03</span></span>
<span class="line"><span>aa</span></span>
<span class="line"><span>AA</span></span>
<span class="line"><span>Aa</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>2 00</span></span>
<span class="line"><span>2 01</span></span>
<span class="line"><span>2 00</span></span>
<span class="line"><span>2 02</span></span>
<span class="line"><span>1 03</span></span>
<span class="line"><span>3 aa</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uniq</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -ci</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/^ *//&#39;</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>uniq -c</code>：统计连续重复行的数量。</li><li><code>-i</code>：忽略大小写比较。</li><li><code>sed &#39;s/^ *//&#39;</code>：去除每行行首多余空格，保证输出格式正确。</li></ul><h3 id="uniq-4-找出不重复的行" tabindex="-1"><a href="https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-4/problem?isFullScreen=true" target="_blank" rel="noreferrer">Uniq #4</a>（找出不重复的行） <a class="header-anchor" href="#uniq-4-找出不重复的行" aria-label="Permalink to &quot;[Uniq #4](https://www.hackerrank.com/challenges/text-processing-in-linux-the-uniq-command-4/problem?isFullScreen=true)（找出不重复的行）&quot;">​</a></h3><p><strong>题目描述</strong>：</p><p>只显示文本中<strong>未被前后重复行包围的行</strong>（即只出现一次的行，且必须是<strong>连续唯一</strong>）。</p><ul><li>区分大小写。</li><li>只过滤掉<strong>相邻重复行</strong>，非连续重复不影响唯一性。</li></ul><p><strong>示例：</strong></p><p>输入：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A00</span></span>
<span class="line"><span>a00</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>01</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>00</span></span>
<span class="line"><span>02</span></span>
<span class="line"><span>02</span></span>
<span class="line"><span>A00</span></span>
<span class="line"><span>03</span></span>
<span class="line"><span>aa</span></span>
<span class="line"><span>aa</span></span>
<span class="line"><span>aa</span></span></code></pre></div><p>输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>A00</span></span>
<span class="line"><span>a00</span></span>
<span class="line"><span>A00</span></span>
<span class="line"><span>03</span></span></code></pre></div><p><strong>答案：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uniq</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -u</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li><code>uniq</code>：用于去除或处理重复行。</li><li><code>-u</code>：仅输出没有相邻重复的唯一行。</li></ul>`,310))])}const A=d(v,[["render",y]]);export{D as __pageData,A as default};
