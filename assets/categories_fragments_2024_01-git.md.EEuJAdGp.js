import{_ as l}from"./chunks/ArticleMetadata.d4_nZKBO.js";import{_ as p,D as k,o as t,c as d,I as r,w as g,k as e,a as o,R as c,b as F,e as b}from"./chunks/framework.FHZ5yb6k.js";import"./chunks/md5.0oexlRJv.js";const E=JSON.parse('{"title":"Git 速查手册","description":"","frontmatter":{"title":"Git 速查手册","author":"Se7en","date":"2024/08/01 10:00","categories":["个人速查手册"],"tags":["Git"]},"headers":[],"relativePath":"categories/fragments/2024/01-git.md","filePath":"categories/fragments/2024/01-git.md","lastUpdated":1726995912000}'),y={name:"categories/fragments/2024/01-git.md"},u=e("h1",{id:"git-速查手册",tabindex:"-1"},[o("Git 速查手册 "),e("a",{class:"header-anchor",href:"#git-速查手册","aria-label":'Permalink to "Git 速查手册"'},"​")],-1),m=c(`<h2 id="git-基本流程" tabindex="-1">Git 基本流程 <a class="header-anchor" href="#git-基本流程" aria-label="Permalink to &quot;Git 基本流程&quot;">​</a></h2><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202409212200772.png" alt=""></p><p>Git管理的文件有 5 种状态：</p><ul><li>未跟踪（untracked）：新添加的文件，或被移除跟踪的文件，未建立跟踪，通过 git add 添加暂存并建立跟踪。</li><li>未修改：从仓库签出的文件默认状态，修改后就是“已修改”状态了。</li><li>已修改（modified）：文件被修改后的状态。</li><li>已暂存（staged）：修改、新增的文件添加到暂存区后的状态。</li><li>已提交(committed)：从暂存区提交到版本库。</li></ul><h2 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h2><h3 id="创建并切换分支" tabindex="-1">创建并切换分支 <a class="header-anchor" href="#创建并切换分支" aria-label="Permalink to &quot;创建并切换分支&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">new-branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><h3 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><h3 id="重命名分支" tabindex="-1">重命名分支 <a class="header-anchor" href="#重命名分支" aria-label="Permalink to &quot;重命名分支&quot;">​</a></h3><p>先切换到要重命名的分支，然后执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">old-branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">new-branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>或者不需要切换分支，直接使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">old-branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">new-branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><h2 id="git-rebase" tabindex="-1">Git Rebase <a class="header-anchor" href="#git-rebase" aria-label="Permalink to &quot;Git Rebase&quot;">​</a></h2><p>git rebase 是 Git 中一个用于合并变更的命令，可以将一个分支的提交“重新应用”到另一个分支上，同时保持提交历史的清晰。通常在下面的场景中使用：</p><ul><li>我们从 main 分支拉取了一条 feature 分支在本地进行功能开发。</li><li>远程的 main 分支在之后又合并了一些新的提交。</li><li>我们想在 feature 分支集成 main 的最新更改。（比如与 main 分支有冲突，需要在 feature 分支解决冲突）</li></ul><h3 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h3><ol><li><strong>切换到要 rebase 的分支</strong>：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><ol start="2"><li><strong>执行 rebase</strong>：将 <code>feature-branch</code> 的提交应用到 <code>main</code> 分支上。</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main</span></span></code></pre></div><ol start="3"><li><strong>处理冲突</strong>：如果 rebase 过程中遇到冲突，Git 会提示手动解决。解决冲突后执行：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --continue</span></span></code></pre></div><ol start="4"><li><strong>完成 rebase 后推送</strong>：由于 rebase 会重写提交历史，推送时需要使用 <code>--force</code>。</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span></span></code></pre></div><p>在推送到自己的 feature 分支之后，可以提交 pull request 将修改合并到 main 分支。</p><h3 id="交互式-rebase" tabindex="-1">交互式 Rebase <a class="header-anchor" href="#交互式-rebase" aria-label="Permalink to &quot;交互式 Rebase&quot;">​</a></h3><p>git rebase -i（interactive rebase）是 Git 提供的一个交互式 rebase 功能，允许你在 rebase 过程中精细控制提交历史。它特别适合整理和优化提交历史，修改多个提交的顺序、内容，甚至合并、删除提交。</p><ol><li><strong>执行交互式 rebase</strong>： 在分支上使用 <code>git rebase -i</code>，并指定基准提交（基准是当前分支的父分支或任意提交），例如：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> HEAD~3</span></span></code></pre></div><p>这会打开一个文本编辑器，显示过去 3 次提交的列表：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>a1b2c3d Fix a bug</span></span>
<span class="line"><span>b2c3d4e Add new feature</span></span>
<span class="line"><span>c3d4e5f Improve documentation</span></span></code></pre></div><p><code>git rebase -i</code> 不仅可以使用 <code>HEAD~N</code> 指定一个范围，还可以直接指定一个具体的提交哈希（commit hash）作为基准，这样可以更灵活地选择需要操作的提交。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">commit-has</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>在这条命令中，<code>&lt;commit-hash&gt;</code> 是你想要作为基准的提交。所有位于该提交之后的提交都会进入交互式 rebase 编辑模式。值得注意的是，指定的 <code>&lt;commit-hash&gt;</code> 本身不会被修改，它只会作为 rebase 的起点。</p><p>假设你的提交历史如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>a1b2c3d Fix a bug</span></span>
<span class="line"><span>b2c3d4e Add new feature</span></span>
<span class="line"><span>c3d4e5f Improve documentation</span></span>
<span class="line"><span>d4e5f6g Initial commit</span></span></code></pre></div><p>你想对最近的 3 个提交进行交互式 rebase，但基准设为 <code>d4e5f6g</code>（即最早的 <code>Initial commit</code>）。可以执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> d4e5f6g</span></span></code></pre></div><p>这将会打开编辑器，显示从 <code>c3d4e5f</code> 到 <code>a1b2c3d</code> 的提交列表供你编辑：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>a1b2c3d Fix a bug</span></span>
<span class="line"><span>b2c3d4e Add new feature</span></span>
<span class="line"><span>c3d4e5f Improve documentation</span></span></code></pre></div><ol start="2"><li><strong>编辑提交操作</strong>： 每个提交前的 <code>pick</code> 表示 Git 将按顺序应用这些提交。可以将 <code>pick</code> 替换为以下命令：</li></ol><ul><li><code>pick</code>：保持提交不变。</li><li><code>reword</code>：修改提交信息。</li><li><code>edit</code>：修改提交的内容或信息。</li><li><code>squash</code>：将当前提交与前一个提交合并。</li><li><code>fixup</code>：类似 <code>squash</code>，但不保留当前提交的信息。</li><li><code>drop</code>：删除提交。</li></ul><ol start="3"><li><strong>保存并退出</strong>： 编辑完提交列表后，保存文件并退出编辑器，Git 会根据你指定的命令逐步执行操作。</li></ol><p>假设你有以下提交历史：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>pick a1b2c3d Fix a bug</span></span>
<span class="line"><span>pick b2c3d4e Add new feature</span></span>
<span class="line"><span>pick c3d4e5f Improve documentation</span></span></code></pre></div><p>你可以将这些操作修改为：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>pick a1b2c3d Fix a bug</span></span>
<span class="line"><span>squash b2c3d4e Add new feature</span></span>
<span class="line"><span>fixup c3d4e5f Improve documentation</span></span></code></pre></div><p>这会将后两个提交合并到第一个提交中，保持一个干净的历史记录。</p><h3 id="处理冲突" tabindex="-1">处理冲突 <a class="header-anchor" href="#处理冲突" aria-label="Permalink to &quot;处理冲突&quot;">​</a></h3><p>如果在 rebase 过程中遇到冲突，Git 会暂停，并要求你解决冲突。解决冲突后，运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">conflict-fil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --continue</span></span></code></pre></div><p>如果你想中止 rebase，可以运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --abort</span></span></code></pre></div><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://waynerv.com/posts/git-rebase-intro/" target="_blank" rel="noreferrer">git rebase 用法详解与工作原理</a></li><li><a href="https://www.youtube.com/watch?v=rYQ8uwwOb3M&amp;ab_channel=%E7%9F%A5%E8%A1%8C%E5%B0%8F%E8%AF%BE" target="_blank" rel="noreferrer">Git merge &amp; rebase 区别和用法</a></li></ul><h2 id="git-merge" tabindex="-1">Git Merge <a class="header-anchor" href="#git-merge" aria-label="Permalink to &quot;Git Merge&quot;">​</a></h2><p>git merge 和 git rebase 命令类似，也是用于将一个分支的变更合并到当前分支。与 git rebase 保持历史记录清晰线性不同，git merge 会保留分支的历史记录并生成一个新的合并提交（merge commit）。</p><p>要将 main 分支合并到 feature 分支，以下是详细步骤和例子：</p><ol><li><strong>切换到 feature 分支</strong>：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> feature</span></span></code></pre></div><ol start="2"><li>执行 git merge 命令将 <code>main</code> 合并到 <code>feature</code>：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main</span></span></code></pre></div><p>如果两者的代码没有冲突，Git 会直接进行快速合并。 如果合并过程中有冲突，Git 会标记冲突的文件，并要求你手动解决冲突：</p><p>使用编辑器打开冲突文件，解决冲突后，将其标记为已解决：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">conflict-fil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>继续合并过程：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> commit</span></span></code></pre></div><h3 id="git-rebase-和-git-merge-的区别" tabindex="-1">Git Rebase 和 Git Merge 的区别 <a class="header-anchor" href="#git-rebase-和-git-merge-的区别" aria-label="Permalink to &quot;Git Rebase 和 Git Merge 的区别&quot;">​</a></h3><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/git-merge-rebase.png" alt=""></p><p>git merge：</p><ul><li>方式：将两个分支的变更合并，并创建一个新的合并提交（merge commit）。它保留了每个分支的原始提交历史。</li><li>结果：合并历史会显示出分叉点，并在合并时产生额外的 merge commit。</li></ul><p>git rebase：</p><ul><li>方式：将一个分支的提交重新应用到目标分支的最新状态。它会将你当前分支的提交“移到”目标分支之上，使提交历史变得线性。</li><li>结果：不产生新的 merge commit，提交历史更简洁、连续。</li></ul><h2 id="撤销修改" tabindex="-1">撤销修改 <a class="header-anchor" href="#撤销修改" aria-label="Permalink to &quot;撤销修改&quot;">​</a></h2><h3 id="撤销工作区中的修改" tabindex="-1">撤销工作区中的修改 <a class="header-anchor" href="#撤销工作区中的修改" aria-label="Permalink to &quot;撤销工作区中的修改&quot;">​</a></h3><p>如果你在工作目录中修改了文件，但尚未将其添加到暂存区，可以使用以下命令恢复到最近的提交状态：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 建议使用 -- 参数用于明确区分文件名和其他选项</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">file-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 撤销工作区中所有文件的修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .</span></span></code></pre></div><h3 id="修改上一次提交-未推送到远程" tabindex="-1">修改上一次提交（未推送到远程） <a class="header-anchor" href="#修改上一次提交-未推送到远程" aria-label="Permalink to &quot;修改上一次提交（未推送到远程）&quot;">​</a></h3><p>如果你只是想修改上一次提交的内容或提交信息，可以使用 <code>--amend</code> 选项。这不会真正撤销提交，而是允许你修改它。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --amend</span></span></code></pre></div><p>这会打开编辑器，你可以修改提交信息，也可以通过 <code>git add</code> 添加新的更改到该提交中。</p><h3 id="撤销最后一次提交-但保留文件的更改和暂存" tabindex="-1">撤销最后一次提交，但保留文件的更改和暂存 <a class="header-anchor" href="#撤销最后一次提交-但保留文件的更改和暂存" aria-label="Permalink to &quot;撤销最后一次提交，但保留文件的更改和暂存&quot;">​</a></h3><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202409212229078.png" alt=""></p><p>如果你已经提交了更改，但希望撤销提交并保留文件的更改在工作目录中（即不丢失工作内容），你可以使用 <code>git reset --soft</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --soft</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> HEAD^</span></span></code></pre></div><ul><li><strong><code>--soft</code></strong>：将提交撤销，但保留所有修改在暂存区中，你可以重新提交。</li><li><strong><code>HEAD^</code></strong>：表示上一个提交（最后一次提交）。</li></ul><p>这样提交会被撤销，但文件仍然保持已暂存状态，你可以根据需要修改或者重新提交。</p><h3 id="撤销最后一次提交并保留修改但不暂存" tabindex="-1">撤销最后一次提交并保留修改但不暂存 <a class="header-anchor" href="#撤销最后一次提交并保留修改但不暂存" aria-label="Permalink to &quot;撤销最后一次提交并保留修改但不暂存&quot;">​</a></h3><p>如果你希望撤销提交，并且将所有文件的更改从暂存区移到工作目录中（即取消暂存），可以使用 <code>git reset --mixed</code>。 <code>--mixed</code> 是默认选项，可以省略。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --mixed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> HEAD^</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> restore</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --staged</span></span></code></pre></div><h3 id="撤销最后一次提交并取消所有更改" tabindex="-1">撤销最后一次提交并取消所有更改 <a class="header-anchor" href="#撤销最后一次提交并取消所有更改" aria-label="Permalink to &quot;撤销最后一次提交并取消所有更改&quot;">​</a></h3><p>如果你不仅想撤销提交，还想丢弃所有已提交的更改（即回到提交之前的状态），你可以使用 <code>git reset --hard</code>。注意，<strong>这种方式会丢失更改</strong>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> HEAD^</span></span></code></pre></div><h3 id="撤销已经推送到远程仓库的提交" tabindex="-1">撤销已经推送到远程仓库的提交 <a class="header-anchor" href="#撤销已经推送到远程仓库的提交" aria-label="Permalink to &quot;撤销已经推送到远程仓库的提交&quot;">​</a></h3><p>如果你已经将提交推送到远程仓库，那么你撤销的操作会更加复杂，特别是在团队协作中，你需要谨慎操作。以下是几种方法：</p><h4 id="方法-1-使用-git-revert" tabindex="-1">方法 1：使用 <code>git revert</code> <a class="header-anchor" href="#方法-1-使用-git-revert" aria-label="Permalink to &quot;方法 1：使用 \`git revert\`&quot;">​</a></h4><p><code>git revert</code> 用来生成一个新的提交，它会反转某个提交的内容，不修改提交历史。适用于已经推送到远程的情况。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> revert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">commit-has</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><ul><li>这会生成一个新的提交，撤销指定的提交。</li></ul><h4 id="方法-2-使用-git-reset-强制推送" tabindex="-1">方法 2：使用 <code>git reset</code> + 强制推送 <a class="header-anchor" href="#方法-2-使用-git-reset-强制推送" aria-label="Permalink to &quot;方法 2：使用 \`git reset\` + 强制推送&quot;">​</a></h4><p>你也可以使用 <code>git reset --hard</code> 撤销本地提交，然后强制推送到远程仓库。<strong>注意：这会重写远程历史记录，可能会影响其他团队成员的工作，慎用</strong>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> HEAD^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span></span></code></pre></div><h3 id="参考资料-1" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料-1" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://www.cnblogs.com/mq0036/p/17082938.html" target="_blank" rel="noreferrer">Git入门图文教程(1.5W字40图)</a></li></ul><h2 id="保持本地-fork-仓库与上游仓库同步" tabindex="-1">保持本地 Fork 仓库与上游仓库同步 <a class="header-anchor" href="#保持本地-fork-仓库与上游仓库同步" aria-label="Permalink to &quot;保持本地 Fork 仓库与上游仓库同步&quot;">​</a></h2><h3 id="设置上游仓库-只需要首次设置" tabindex="-1">设置上游仓库（只需要首次设置） <a class="header-anchor" href="#设置上游仓库-只需要首次设置" aria-label="Permalink to &quot;设置上游仓库（只需要首次设置）&quot;">​</a></h3><p>首先在 Github 上 fork 上游仓库。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240802121219.png" alt=""></p><p>然后 clone fork 的仓库到本地。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 本例中是 git clone https://github.com/cr7258/higress.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">your-github-use</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">rep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">rep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>添加上游仓库作为远程仓库。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 本例中是 git remote add upstream https://github.com/alibaba/higress.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">upstrea</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">rep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.git</span></span></code></pre></div><p>验证上游仓库是否添加成功。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 示例输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	https://github.com/cr7258/higress.git</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (fetch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	https://github.com/cr7258/higress.git</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (push)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	https://github.com/alibaba/higress.git</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (fetch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	https://github.com/alibaba/higress.git</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (push)</span></span></code></pre></div><h3 id="同步上游仓库的更新" tabindex="-1">同步上游仓库的更新 <a class="header-anchor" href="#同步上游仓库的更新" aria-label="Permalink to &quot;同步上游仓库的更新&quot;">​</a></h3><p>获取上游仓库的更新。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> upstream</span></span></code></pre></div><p>将上游的更新 rebase 到本地分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  # 切换到你要更新的分支，通常是 main 或 master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> upstream/main</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  # 将上游的 main 分支 rebase 到本地的 main 分支</span></span></code></pre></div><p>解决可能的冲突，如果有冲突，Git 会提示你处理冲突，处理完冲突后继续 rebase。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --continue</span></span></code></pre></div><p>推送更新到你的 fork 仓库，如果使用了 rebase，需要强制推送。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main</span></span></code></pre></div><h2 id="使用-git-worktree-管理多分支" tabindex="-1">使用 Git Worktree 管理多分支 <a class="header-anchor" href="#使用-git-worktree-管理多分支" aria-label="Permalink to &quot;使用 Git Worktree 管理多分支&quot;">​</a></h2><p>git worktree 允许你在同一仓库中同时检出多个分支，从而方便并行开发和减少频繁的分支切换，提高开发效率。</p><h3 id="创建一个新的-worktree" tabindex="-1">创建一个新的 Worktree <a class="header-anchor" href="#创建一个新的-worktree" aria-label="Permalink to &quot;创建一个新的 Worktree&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 方式一：基于当前分支，新建一个 worktree 目录，新的分支名就是新建目录的名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 示例：假设当前在 feature-1 分支，那么执行以下命令会在项目目录平级（假设在项目根目录执行命令）的 feature-2 目录下基于 feature-1 分支创建一个 feature-2 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ../feature-2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 方式二：基于当前分支，新建一个 worktree 目录，新的分支名是指定的名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 方式三：基于指定分支，新建一个 worktree 目录，新的分支名是指定的名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">commit｜branc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 示例：假设当前在 feature-1 分支，那么执行以下命令会在项目目录平级（假设在项目根目录执行命令）的 feature-2 目录下基于 main 分支创建一个 feature-2 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ../feature-2</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> feature-2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ../feature-2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main</span></span></code></pre></div><h3 id="列出-worktree" tabindex="-1">列出 Worktree <a class="header-anchor" href="#列出-worktree" aria-label="Permalink to &quot;列出 Worktree&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/Users/I576375/tmp/git-demo/higress</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        6</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">f5c0f4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [new-feature-1]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/Users/I576375/tmp/git-demo/hotfix-1</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       210</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">b97b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [hotfix-1]</span></span></code></pre></div><h3 id="删除-worktree" tabindex="-1">删除 Worktree <a class="header-anchor" href="#删除-worktree" aria-label="Permalink to &quot;删除 Worktree&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> remove</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">worktre</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> hotfix-1</span></span></code></pre></div><h3 id="参考资料-2" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料-2" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://www.cnblogs.com/wellcherish/p/17220100.html" target="_blank" rel="noreferrer">Git Worktree 的使用</a></li></ul>`,135);function D(s,C,v,A,f,q){const h=l,n=k("ClientOnly");return t(),d("div",null,[u,r(n,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),F(h,{key:0,article:s.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),m])}const _=p(y,[["render",D]]);export{E as __pageData,_ as default};
