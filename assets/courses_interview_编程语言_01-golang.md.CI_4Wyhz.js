import{_ as i,c as a,o as n,P as h}from"./chunks/framework.hsaHFr3N.js";const A=JSON.parse('{"title":"Golang","description":"","frontmatter":{"title":"Golang","author":"Se7en","categories":["Interview"],"tags":["Golang"]},"headers":[],"relativePath":"courses/interview/编程语言/01-golang.md","filePath":"courses/interview/编程语言/01-golang.md","lastUpdated":1738853650000}'),l={name:"courses/interview/编程语言/01-golang.md"};function k(p,s,t,e,r,d){return n(),a("div",null,s[0]||(s[0]=[h(`<h2 id="如何限制协程执行数量" tabindex="-1">如何限制协程执行数量？ <a class="header-anchor" href="#如何限制协程执行数量" aria-label="Permalink to &quot;如何限制协程执行数量？&quot;">​</a></h2><p>在 Go 中，当我们需要同时执行大量的协程时，可能会因为资源（如 CPU 或内存）的限制，导致性能下降甚至系统崩溃。因此，限制协程的执行数量是控制并发度、提高程序效率的重要手段。</p><p>我们可以通过带缓冲的 channel 来控制协程的并发数量。缓冲区大小决定了同时允许多少个协程执行，超出的协程会阻塞，直到有其他协程完成。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg sync.WaitGroup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	maxWorkers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	sem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, maxWorkers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过带缓冲的 channel 来控制协程的并发数量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动 10 个协程，但最多只会有 maxWorkers 个协程同时执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">wg, sem)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 等待所有协程完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, wg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.WaitGroup, sem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	sem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取信号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 释放信号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> is working</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 模拟工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> done</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 9 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 6 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 4 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 4 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 5 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 9 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 2 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 6 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 0 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 0 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 7 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 5 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 8 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 2 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 3 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 3 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 1 is working</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 7 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 8 done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Worker 1 done</span></span></code></pre></div><h2 id="函数执行超时控制代码怎么写" tabindex="-1">函数执行超时控制代码怎么写？ <a class="header-anchor" href="#函数执行超时控制代码怎么写" aria-label="Permalink to &quot;函数执行超时控制代码怎么写？&quot;">​</a></h2><p>在 Go 中，可以使用 context 包来实现函数执行的超时控制。context.WithTimeout 可以创建一个带有超时的上下文，当超时时间达到时，函数会停止执行。</p><p>select 语句用于同时监听任务执行结果和超时信号。如果任务完成，则输出结果；如果超过 2 秒任务未完成，ctx.Done() 会触发超时处理。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 模拟一个长时间运行的任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> longRunningTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(resultChan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Task is running&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	resultChan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;-</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Task is completed&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	resultChan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 设置超时为2秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ctx, cancel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WithTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">time.Second)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	defer</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 保证资源被释放</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动一个 goroutine 执行任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> longRunningTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(resultChan)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 使用 select 等待任务完成或超时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">resultChan:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ctx.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Timeout: Task took too long&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="sync-pool-有什么用" tabindex="-1">sync.Pool 有什么用？ <a class="header-anchor" href="#sync-pool-有什么用" aria-label="Permalink to &quot;sync.Pool 有什么用？&quot;">​</a></h2><p><code>sync.Pool</code> 是一个对象缓存池，可以用来存储临时对象，减少对象的创建和销毁次数，提高性能。<code>sync.Pool</code> 是并发安全的，可以在多个 goroutine 中并发使用。 使用方法：</p><ul><li><code>Get()</code>：从池中获取一个对象，如果池是空的，则调用 New 创建新对象。</li><li><code>Put()</code>：将对象放回池中，以便复用。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.Pool{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		New: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{} {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Creating a new User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">User{Name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Seven&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 从池中获取一个对象，如果池是空的，则调用 New 创建新对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	u1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">User)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(u1.Name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	u1.Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Jack&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 将对象放回池中，以便复用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	p.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(u1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	u2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">User)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(u2.Name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出结果，只创建了一次 User 对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Creating a new User</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Seven</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Jack</span></span></code></pre></div><p>像 gin 框架中的 <code>Context</code> 对象就是使用 <code>sync.Pool</code> 来复用的。(代码：<a href="https://github.com/gin-gonic/gin/blob/f05f966a0824b1d302ee556183e2579c91954266/gin.go#L624-L625" target="_blank" rel="noreferrer">ServeHTTP</a>)</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ServeHTTP conforms to the http.Handler interface.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (engine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Engine) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ServeHTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(w http.ResponseWriter, req </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">http.Request) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 从 sync.Pool 中获取一个 Context 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> engine.pool.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.writermem.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(w)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.Request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> req</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	engine.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">handleHTTPRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	engine.pool.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="明明是-nil-却-nil-的问题" tabindex="-1">明明是 nil 却 != nil 的问题 <a class="header-anchor" href="#明明是-nil-却-nil-的问题" aria-label="Permalink to &quot;明明是 nil 却 != nil 的问题&quot;">​</a></h2><p>在下面的代码中，虽然变量 a 是 nil，但是在将它赋值给 b（interface{} 类型）之后，b 并 不是 nil。这是因为在 Go 中，interface{} 类型的值由两部分组成：</p><ul><li>类型（type）：存储的是具体值的类型。</li><li>值（value）：存储的是具体的值。</li></ul><p>当你将 a 赋值给 b 时，b 是一个接口类型，它会包含两部分信息：</p><ul><li>类型部分是 <code>*struct{}</code>（即 b 的类型是 <code>*struct{}</code>）。</li><li>值部分是 nil（因为 a 是一个 nil 指针）。</li></ul><p>但是，在 Go 中，一个接口只有在其“类型”和“值”都为 nil 时，才被认为是 nil。在你的代码中，b 的类型是 <code>*struct{}</code>，虽然它的值是 nil，但它的类型部分并不是 nil，因此 b != nil。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;b is nil&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;b is not nil&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//b is not nil</span></span></code></pre></div><h2 id="var-data-int-和-var-data-make-int-0-有什么区别" tabindex="-1"><code>var data []int</code> 和 <code>var data = make([]int, 0)</code> 有什么区别？ <a class="header-anchor" href="#var-data-int-和-var-data-make-int-0-有什么区别" aria-label="Permalink to &quot;\`var data []int\` 和 \`var data = make([]int, 0)\` 有什么区别？&quot;">​</a></h2><p><code>var data []int</code> 声明一个切片，初始值为 nil。 <code>var data = make([]int, 0)</code> 切片的值不为 nil，而是一个长度和容量都为 0 的空切片。在大多数情况下，推荐使用 var data = make([]int, 0) 来初始化切片。</p><h2 id="在容器和-kubernetes-集群中-存在-gomaxprocs-会错误识别容器-cpu-核心数的问题" tabindex="-1">在容器和 Kubernetes 集群中，存在 GOMAXPROCS 会错误识别容器 CPU 核心数的问题 <a class="header-anchor" href="#在容器和-kubernetes-集群中-存在-gomaxprocs-会错误识别容器-cpu-核心数的问题" aria-label="Permalink to &quot;在容器和 Kubernetes 集群中，存在 GOMAXPROCS 会错误识别容器 CPU 核心数的问题&quot;">​</a></h2><p>默认情况下，Golang 会将 GOMAXPROCS 设置为 CPU 核心数，这允许 Golang 程序充分使用机器的每一个 CPU，最大程度的提高我们程序的并发性能。 但是在容器中，<code>runtime.GOMAXPROCS()</code> 获取的是 宿主机的 CPU 核数 。P 值设置过大，导致生成线程过多，会增加上线文切换的负担，导致严重的上下文切换，浪费 CPU。</p><p>解决方案是可以使用 <a href="https://github.com/uber-go/automaxprocs" target="_blank" rel="noreferrer">automaxprocs</a>，大致原理是读取 CGroup 值识别容器的 CPU quota，计算得到实际核心数，并自动设置 GOMAXPROCS 线程数量。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> _</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">go.uber.org/automaxprocs</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // Your application logic here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>参考资料：</p><ul><li><a href="https://pandaychen.github.io/2020/02/28/GOMAXPROCS-POT/" target="_blank" rel="noreferrer">GOMAXPROCS-POT</a></li></ul><h2 id="两个-goroutine-交替打印字母和数字" tabindex="-1">两个 goroutine 交替打印字母和数字 <a class="header-anchor" href="#两个-goroutine-交替打印字母和数字" aria-label="Permalink to &quot;两个 goroutine 交替打印字母和数字&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	letter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sync.WaitGroup{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(time.Millisecond </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				letter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">letter:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(j))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">				if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">z</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">					wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(time.Millisecond </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 先打印数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1a2b3c4d5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">%</span></span></code></pre></div><h2 id="两个-goroutine-并发更新数字" tabindex="-1">两个 goroutine 并发更新数字 <a class="header-anchor" href="#两个-goroutine-并发更新数字" aria-label="Permalink to &quot;两个 goroutine 并发更新数字&quot;">​</a></h2><p>要实现两个 goroutine 并发更新同一个数字，并且保证数据的正确性，我们需要使用同步原语来避免竞争条件（Race Condition）。Go 语言提供了 <code>sync.Mutex</code> 或者 <code>sync/atomic</code> 包来实现并发安全的数据访问。</p><p><strong>方式 1: 使用 <code>sync.Mutex</code></strong></p><p><code>sync.Mutex</code> 是互斥锁，用于在多 goroutine 中同步访问共享资源，确保同一时间只有一个 goroutine 可以对共享资源进行修改。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mu sync.Mutex </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 用来保护共享变量 num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sync.WaitGroup{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动两个 goroutine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 第一个 goroutine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			mu.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			mu.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 第二个 goroutine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			mu.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			mu.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 等待两个 goroutine 完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;最终的 num 值:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, num)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>解释：</p><ul><li><strong>互斥锁 (<code>sync.Mutex</code>)</strong>：确保在任意时刻，只有一个 goroutine 可以修改 <code>num</code>。</li><li>每个 goroutine 循环 1000 次，每次递增 <code>num</code>。</li><li><code>wg.Wait()</code> 等待两个 goroutine 完成。</li></ul><p><strong>方式 2: 使用 <code>sync/atomic</code></strong></p><p><code>sync/atomic</code> 提供了一些低级的原子操作，适合并发环境下对单个变量的安全访问和修改。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync/atomic</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int64</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 使用 int64，因为 atomic 需要操作 64 位的整数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sync.WaitGroup{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动两个 goroutine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 第一个 goroutine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			atomic.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">AddInt64</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 原子操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 第二个 goroutine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			atomic.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">AddInt64</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 原子操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 等待两个 goroutine 完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;最终的 num 值:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, num)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>解释：</p><ul><li><strong><code>atomic.AddInt64</code></strong>：这是一个原子操作，确保多个 goroutine 并发访问时的安全性。</li><li>和使用互斥锁相比，<code>atomic</code> 操作的性能更好，但只适用于简单的原子操作。</li></ul><p><strong>总结：</strong></p><ul><li>使用 <code>sync.Mutex</code>：适合较复杂的操作，确保代码块内的操作在多 goroutine 环境下安全执行。</li><li>使用 <code>sync/atomic</code>：适合简单的变量更新操作，性能较好。</li></ul><h2 id="sync-cond-的使用场景" tabindex="-1">sync.Cond 的使用场景 <a class="header-anchor" href="#sync-cond-的使用场景" aria-label="Permalink to &quot;sync.Cond 的使用场景&quot;">​</a></h2><p>sync.Cond 经常用在多个 goroutine 等待，一个 goroutine 通知（事件发生）的场景。如果是一个通知，一个等待，使用互斥锁或 channel 就能搞定了。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.Cond) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 每个 Cond 实例都会关联一个锁 L（互斥锁 *Mutex，或读写锁 *RWMutex），当修改条件或者调用 Wait 方法时，必须加锁。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;start reading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.Cond) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;start writing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(time.Second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;wakes all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	c.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Broadcast</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	cond </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sync.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewCond</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.Mutex{})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;reader1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, cond)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;reader2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, cond)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;reader3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, cond)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;writer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, cond)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(time.Second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">writer start writing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">wakes all</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">reader3 start reading</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">reader1 start reading</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">reader2 start reading</span></span></code></pre></div><h2 id="sync-once-使用场景" tabindex="-1">sync.Once 使用场景 <a class="header-anchor" href="#sync-once-使用场景" aria-label="Permalink to &quot;sync.Once 使用场景&quot;">​</a></h2><p>sync.Once 是 Go 标准库提供的使函数只执行一次的实现，常应用于单例模式，例如初始化配置、保持数据库连接等。作用与 init 函数类似，但有区别。</p><ul><li>init 函数是当所在的 package 首次被加载时执行，若迟迟未被使用，则既浪费了内存，又延长了程序加载时间。</li><li>sync.Once 可以在代码的任意位置初始化和调用，因此可以延迟到使用时再执行，并发场景下是线程安全的。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Config 是一个模拟的配置结构体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义一个全局的 Config 实例和 sync.Once 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	config Config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	once   sync.Once</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 初始化配置的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> initConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Config{Value: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Initialized Value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Config initialized.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取配置的函数，确保配置只初始化一次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() Config {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	once.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Do</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(initConfig) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 确保 initConfig 只被调用一次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg sync.WaitGroup</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动多个 goroutine，尝试获取配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			cfg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Goroutine </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id, cfg.Value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	wg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 等待所有 goroutine 完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Config initialized.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Goroutine </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Initialized Value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Goroutine </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Initialized Value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Goroutine </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Initialized Value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Goroutine </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Initialized Value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Goroutine </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Initialized Value</span></span></code></pre></div><h2 id="context-使用场景" tabindex="-1">Context 使用场景 <a class="header-anchor" href="#context-使用场景" aria-label="Permalink to &quot;Context 使用场景&quot;">​</a></h2><p>在 Go 语言中，context 包提供了一种在多个 goroutine 之间传递请求范围和截止日期的信息的方式。它常用于取消操作、超时控制和传递请求级别的值。以下是一些使用 context 的基本示例和最佳实践。</p><ul><li><code>context.Background()</code>：通常在程序的入口点或最顶层的函数中使用，表示根上下文。</li><li><code>context.WithCancel</code>：用于创建可以被取消的上下文。</li><li><code>context.WithTimeout</code>：创建一个在指定时间后自动取消的上下文。</li><li><code>context.WithDeadline</code>：与超时上下文类似，但使用具体的截止时间。</li></ul><p>以下是一个使用 context 的示例，演示如何在多个 goroutine 中传递取消信号和超时控制。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctx context.Context, id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">After</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second): </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 模拟工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> finished work</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ctx.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(): </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 监听取消信号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> stopped</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ctx, cancel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WithCancel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctx, i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 如果小于 2s，worker 会来不及完成工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(time.Second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 取消上下文，所有监听 ctx.Done() 的 goroutine 将收到通知</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 等待一段时间以查看结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>下面是一个使用超时上下文的示例：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctx context.Context, id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">After</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second): </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 模拟工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> finished work</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ctx.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(): </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 监听取消信号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Worker </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> stopped</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 设置超时时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ctx, cancel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WithTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">time.Second)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	defer</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 确保在 main 退出时调用 cancel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		go</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctx, i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 等待一段时间以查看结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> time.Second)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="如果函数-int-类型切片参数在函数内部发生了扩容-对原切片有影响吗" tabindex="-1">如果函数 []int 类型切片参数在函数内部发生了扩容，对原切片有影响吗？ <a class="header-anchor" href="#如果函数-int-类型切片参数在函数内部发生了扩容-对原切片有影响吗" aria-label="Permalink to &quot;如果函数 []int 类型切片参数在函数内部发生了扩容，对原切片有影响吗？&quot;">​</a></h2><p>在 Go 中，切片是引用类型，传递给函数的是切片的引用。在函数内部对切片的修改会影响原切片，但是如果切片发生了扩容，函数内部的切片参数会引用新的数组，对切片的修改不会影响原切片。</p><ul><li><p>不发生扩容：</p><ul><li>当函数中的操作不导致切片扩容，切片参数和原切片会共享同一个底层数组。</li><li>在函数内部修改切片内容（例如 slice[i] = value），会直接影响传入的原始切片，因为它们指向同一个底层数组。</li></ul></li><li><p>发生扩容：</p><ul><li>当函数中的操作（如 append）导致切片容量超出当前容量限制时，Go 会创建一个新的更大容量的底层数组。</li><li>此时，函数内部的切片参数会引用新数组，对切片的修改不会影响原切片。</li></ul></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> modifySlice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(slice []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Before append: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(slice), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(slice), slice)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 追加元素使切片扩容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// slice 在函数内部指向新的数组，而 original 仍然指向原数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// slice 在函数内部的修改就不会体现在 original 指向的原数组上了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 如果 slice 切片没有扩容，那么在函数内部的修改也会体现在 original 上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	slice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(slice, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;After append: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(slice), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(slice), slice)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 修改切片内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	slice[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 999</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 定义一个长度和容量较小的切片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	original </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Original slice: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), original)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	modifySlice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;After function call: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), original)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Original slice content:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, original)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Original slice: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c0000ae000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Before append: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c0000ae000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">After append: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c0000b4030</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">After function call: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c0000ae000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Original slice content: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>如果想要在切片扩容的情况下，在函数内部的修改也能体现在原切片上，可以使用指针传递切片。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> modifySlice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(slice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Before append: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 追加元素，导致切片扩容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;After append: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 修改切片内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">slice)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 999</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	original </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Original slice: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), original)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 传入指针</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	modifySlice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">original)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;After function call: len=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cap=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original), original)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Original slice content:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, original)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Original slice: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c00001a018</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Before append: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c00001a018</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">After append: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c00010a030</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">After function call: len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">c00010a030</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Original slice content: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">999</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><h2 id="函数参数-struct-类型传值和传指针的区别" tabindex="-1">函数参数 struct 类型传值和传指针的区别 <a class="header-anchor" href="#函数参数-struct-类型传值和传指针的区别" aria-label="Permalink to &quot;函数参数 struct 类型传值和传指针的区别&quot;">​</a></h2><p>传值方式函数内部对结构体字段的修改不会影响原始结构体；而传指针可以直接修改原始结构体的数据，因为传递的是结构体的地址。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    age  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> changeNameByValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p Person) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    p.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> changeNameByPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Person) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    p.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    person1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Person{name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    person2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Person{name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    changeNameByValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;After changeNameByValue:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, person1.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 &quot;Bob&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    changeNameByPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;After changeNameByPointer:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, person2.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="make-和-new-的区别是什么" tabindex="-1">make 和 new 的区别是什么？ <a class="header-anchor" href="#make-和-new-的区别是什么" aria-label="Permalink to &quot;make 和 new 的区别是什么？&quot;">​</a></h2><table><thead><tr><th>操作符</th><th>适用类型</th><th>功能</th><th>返回值类型</th></tr></thead><tbody><tr><td><code>new</code></td><td>所有类型</td><td>为类型分配内存并返回指向该类型零值的指针</td><td>指向零值类型的指针</td></tr><tr><td><code>make</code></td><td>slice、map、channel</td><td>分配并初始化内存，返回已初始化的对象</td><td>已初始化的对象（非指针）</td></tr></tbody></table><p>make 返回的不是指针，主要是因为切片、映射和通道在 Go 中是引用类型，而它们的本质就是一个指向底层数据结构的指针。</p><h2 id="对已经关闭的的-channel-进行读写-会怎么样-为什么" tabindex="-1">对已经关闭的的 channel 进行读写，会怎么样？为什么？ <a class="header-anchor" href="#对已经关闭的的-channel-进行读写-会怎么样-为什么" aria-label="Permalink to &quot;对已经关闭的的 channel 进行读写，会怎么样？为什么？&quot;">​</a></h2><ul><li>读已经关闭的 channel 能一直读到东西，但是读到的内容根据通道内关闭前是否有元素而不同。 <ul><li>如果 channel 关闭前，buffer 内有元素还未读,会正确读到 channel 内的值，且返回的第二个 bool 值（是否读成功）为true。</li><li>如果 channel 关闭前，buffer 内有元素已经被读完，channel 内无值，接下来所有接收的值都会非阻塞直接成功，返回 channel 元素的零值，但是第二个 bool 值一直为 false。</li></ul></li><li>写已经关闭的 channel 会 panic。</li></ul><h2 id="defer-和-return-执行的先后顺序" tabindex="-1">defer 和 return 执行的先后顺序？ <a class="header-anchor" href="#defer-和-return-执行的先后顺序" aria-label="Permalink to &quot;defer 和 return 执行的先后顺序？&quot;">​</a></h2><p>在 Go 语言中，defer 和 return 的执行顺序如下：</p><ul><li>return 语句不是一条单独的语句，实际上，它是由赋值和返回两部分组成的。赋值步骤会先执行，这一步会计算 return 语句中的表达式，然后赋值给返回值。</li><li>defer 语句在函数返回前（即return语句后的返回动作执行前）执行。如果有多个 defer 语句，那么它们会以 LIFO（后进先出，即栈）的顺序执行。</li><li>返回动作，这是 return 语句的第二部分，这一步会携带返回值返回到调用函数。</li></ul><p>所以，如果你在一个函数中写入了 defer 和 return，那么它们的执行顺序是：先执行 return 语句的赋值部分，然后执行 defer 语句，最后执行 return 语句的返回动作。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 修改返回值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // return 语句的赋值部分先执行，然后执行 defer，最后执行 return 的返回动作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这个例子中，函数 foo 会返回 1，而不是 0。因为 return 0 是先赋值 result 为 0，然后 defer 函数把 result 增加了 1，最后返回 result，所以返回值是 1。</p><h2 id="golang-如何实现多态的效果" tabindex="-1">Golang 如何实现多态的效果 <a class="header-anchor" href="#golang-如何实现多态的效果" aria-label="Permalink to &quot;Golang 如何实现多态的效果&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义一个接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Area</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义一个矩形结构体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Rectangle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Width  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 实现 Shape 接口的 Area 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (r Rectangle) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Area</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r.Width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r.Height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义一个圆形结构体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 实现 Shape 接口的 Area 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (c Circle) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Area</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c.Radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c.Radius</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印形状的面积</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printArea</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s Shape) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Area: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%f\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Area</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 创建一个矩形</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	rectangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Rectangle{Width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 创建一个圆形</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	circle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Circle{Radius: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 使用多态调用 printArea 函数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	printArea</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rectangle) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: Area: 50.000000</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	printArea</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(circle)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: Area: 153.860000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="p-和-m-数量是可以无限扩增的吗" tabindex="-1">P 和 M 数量是可以无限扩增的吗？ <a class="header-anchor" href="#p-和-m-数量是可以无限扩增的吗" aria-label="Permalink to &quot;P 和 M 数量是可以无限扩增的吗？&quot;">​</a></h2><ul><li>G 的数量：理论上没有数量上限限制的。查看当前G的数量可以使用 <code>runtime.NumGoroutine()</code>。</li><li>P 的数量：由启动时环境变量 <code>$GOMAXPROCS</code> 或者是由 <code>runtime.GOMAXPROCS()</code> 决定。这意味着在程序执行的任意时刻都只有 <code>$GOMAXPROCS</code> 个 goroutine 在同时运行。</li><li>M 的数量：go 程序启动时，会设置 M 的最大数量，默认 10000。但是内核很难支持这么多的线程数，所以这个限制可以忽略。<code>runtime/debug</code> 中的 SetMaxThreads 函数可以设置 M 的最大数量。一个 M 阻塞了，会创建新的 M。M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。</li></ul><h2 id="g-在-gmp模型中流动过程" tabindex="-1">G 在 GMP模型中流动过程 <a class="header-anchor" href="#g-在-gmp模型中流动过程" aria-label="Permalink to &quot;G 在 GMP模型中流动过程&quot;">​</a></h2><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502061409190.png" alt=""></p><ul><li><ol><li>调用 <code>go func()</code> 创建一个goroutine；</li></ol></li><li><ol start="2"><li>新创建的 G 优先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在全局的队列中；</li></ol></li><li><ol start="3"><li>M 需要在 P 的本地队列弹出一个可执行的 G，如果 P 的本地队列为空，则先会去全局队列中获取 G，如果全局队列也为空则去其他 P 中偷取 G 放到自己的 P 中；</li></ol></li><li><ol start="4"><li>G 将相关参数传输给 M，为 M 执行 G 做准备；</li></ol></li><li><ol start="5"><li>当 M 执行某一个 G 时候如果发生了系统调用产生导致 M 会阻塞，如果当前 P 队列中有一些 G，runtime 会将线程 M 和 P 分离，然后再获取空闲的线程或创建一个新的内核级的线程来服务于这个 P，阻塞调用完成后 G 被销毁将值返回；</li></ol></li><li><ol start="6"><li>销毁 G，将执行结果返回；</li></ol></li><li><ol start="7"><li>当M系统调用结束时候，这个 M 会尝试获取一个空闲的 P 执行，如果获取不到 P，那么这个线程M变成休眠状态， 加入到空闲线程中。</li></ol></li></ul><h2 id="gm-与-gmp-区别" tabindex="-1">GM 与 GMP 区别 <a class="header-anchor" href="#gm-与-gmp-区别" aria-label="Permalink to &quot;GM 与 GMP 区别&quot;">​</a></h2><p>在 12 年的 go1.1 版本之前用的都是 GM 模型，但是由于 GM 模型性能不好，饱受用户诟病。之后官方对调度器进行了改进，变成了我们现在用的GMP模型。</p><p>优化点有三个，一是每个 P 有自己的本地队列，而不是所有的 G 操作都要经过全局的 G 队列，这样锁的竞争会少的多的多。而 GM 模型的性能开销大头就是锁竞争。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502061413910.png" alt=""></p><p>二是 P 的本地队列平衡上，在 GMP 模型中也实现了 Work Stealing 算法，如果 P 的本地队列为空，则会从全局队列或其他 P 的本地队列中窃取可运行的 G 来运行（通常是偷一半），减少空转，提高了资源利用率。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502061414932.png" alt=""></p><p>三是 hand off 机制，当 M0 线程因为 G1 进行系统调用阻塞时，线程释放绑定的 P，把 P 转移给其他空闲的线程 M1 执行，同样也是提高了资源利用率。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502061414672.png" alt=""></p><p>参考资料：</p><ul><li><a href="https://mp.weixin.qq.com/s/Y6o9-pKVKe1voyEA1YkEpg" target="_blank" rel="noreferrer">GM 到 GMP，Golang 经历了什么？</a></li></ul>`,96)]))}const y=i(l,[["render",k]]);export{A as __pageData,y as default};
