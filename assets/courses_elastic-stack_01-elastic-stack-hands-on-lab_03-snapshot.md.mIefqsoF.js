import{_ as p}from"./chunks/ArticleMetadata.Sb1DYAHo.js";import{_ as e,D as k,o as n,c as r,I as d,w as o,k as t,a as g,R as F,b as c,e as y}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const f=JSON.parse('{"title":"快照备份与恢复","description":"","frontmatter":{"title":"快照备份与恢复","author":"Se7en","date":"2022/12/25 14:49","categories":["Elastic Stack 实战教程"],"tags":["Elastic Stack","Elasticsearch"]},"headers":[],"relativePath":"courses/elastic-stack/01-elastic-stack-hands-on-lab/03-snapshot.md","filePath":"courses/elastic-stack/01-elastic-stack-hands-on-lab/03-snapshot.md","lastUpdated":1704466962000}'),u={name:"courses/elastic-stack/01-elastic-stack-hands-on-lab/03-snapshot.md"},D=t("h1",{id:"快照备份与恢复",tabindex:"-1"},[g("快照备份与恢复 "),t("a",{class:"header-anchor",href:"#快照备份与恢复","aria-label":'Permalink to "快照备份与恢复"'},"​")],-1),A=F(`<p>本系列 Elastic Stack 实战教程总共涵盖 5 个实验，目的是帮助初学者快速掌握 Elastic Stack 的基本技能。</p><blockquote><p><a href="https://developer.aliyun.com/adc/scenarioSeries/24e7a7a4d56741d0bdcb3ee73c9c22f1" target="_blank" rel="noreferrer">云起实验室在线体验地址</a></p><ul><li>实验 1：Elastic Stack 8 快速上手</li><li>实验 2：ILM 索引生命周期管理</li><li>实验 3：快照备份与恢复</li><li>实验 4：使用 Fleet 管理 Elastic Agent 监控应用</li><li>实验 5：Elasticsearch Java API Client 开发</li></ul></blockquote><h3 id="_1-elasticsearch-快照功能介绍" tabindex="-1">1 Elasticsearch 快照功能介绍 <a class="header-anchor" href="#_1-elasticsearch-快照功能介绍" aria-label="Permalink to &quot;1 Elasticsearch 快照功能介绍&quot;">​</a></h3><p>Elasticsearch 提供快照和恢复功能，我们可以在远程文件系统仓库（比如共享文件系统、S3、HDFS 等）中为部分索引或者整个集群创建快照。快照有以下使用场景：</p><ul><li><strong>数据灾备</strong>：当发生误删索引数据的情况时，可以使用快照来还原；在主集群无法正常工作时，可以使用快照在备集群上恢复数据。</li><li><strong>归档数据</strong>：随着数据的积累，集群中磁盘存储的压力会越来越大，对于一些时效性高的数据，比如日志、指标，我们往往只关心最近一段时间内的数据。对于时间比较早的数据，我们可以选择以快照的形式归档，以备后续有查询的需求。从 Elasticsearch 7.10 版本开始我们还可以结合 ILM 索引生命周期管理，在 Cold 和 Frozen 数据层使用可搜索快照进一步降低存储成本。</li><li><strong>迁移数据</strong>：当需要将数据从一个集群迁移到另一个集群时，使用快照是一种高效的选择。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220816150146.png" alt=""></p><h3 id="_2-部署实验环境" tabindex="-1">2 部署实验环境 <a class="header-anchor" href="#_2-部署实验环境" aria-label="Permalink to &quot;2 部署实验环境&quot;">​</a></h3><p>实验架构如下所示，包含以下几个组件：</p><ul><li><strong>MinIO</strong> 集群由 4 个节点组成，作为备份快照的存储库。</li><li><strong>Nginx</strong> 提供反向代理的功能，作为 MinIO 集群统一的访问入口。</li><li><strong>Elasticsearch</strong> 是一个开源的搜索和分析引擎。</li><li><strong>Kibana</strong> 提供了可视化的操作界面，方便用户与 Elasticsearch 进行交互。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220721130030.png" alt=""></p><p>首先执行以下命令修改系统参数以满足 Elasticsearch 的运行条件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 增加进程可使用的最大内存映射区域数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /etc/sysctl.conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;"> EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">vm.max_map_count=262144</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sysctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -p</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 增加进程可使用的最大文件描述符数量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /etc/security/limits.conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;"> EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">elastic - nofile  65535</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 65535</span></span></code></pre></div><p>为了方便实验，本节采用 Docker Compose 的方式快速部署 Elasticsearch 集群。执行如下命令，安装 Docker 和 Docker Compose。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -sSL</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://get.daocloud.io/docker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-compose</span></span></code></pre></div><p>执行如下命令，获取 docker-compose.yml 配置文件，并在后台启动 Elasticsearch 集群。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://gitee.com/cr7258/elastic-lab.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> elastic-lab/3_snapshot/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span></span></code></pre></div><p>执行 <code>docker-compose ps</code> 命令查看容器运行状态，其中 3snapshot_setup_1 容器是用于创建证书以及设置 elastic 和 kibana_system 用户密码的，执行完毕后会自动退出，我们需要确保其他容器处于 Up 状态。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220819125553.png" alt=""></p><h3 id="_3-创建存储桶" tabindex="-1">3 创建存储桶 <a class="header-anchor" href="#_3-创建存储桶" aria-label="Permalink to &quot;3 创建存储桶&quot;">​</a></h3><p>接下来在 MinIO 中创建用于保存 Elasticsearch 快照数据的存储桶。在浏览器输入 <code>http://&lt;ESC 公网 IP&gt;:9000</code> 访问 MinIO 界面。输入用户名 <strong>minioadmin</strong>，密码 <strong>minioadmin</strong>，点击 <strong>Login</strong>。其中用户名和密码是在 elastic-lab/3_snapshot/.env 文件中设置的。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220720164345.png" alt=""></p><p>点击右上角 <strong>Create Bucket</strong>，新建一个存储桶。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220720164523.png" alt=""></p><p>设置存储桶的名字为 <strong>es-snapshot</strong>，点击 <strong>Create Bucket</strong>。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220720164539.png" alt=""></p><h3 id="_3-keystore-添加-minio-登录凭据" tabindex="-1">3 Keystore 添加 MinIO 登录凭据 <a class="header-anchor" href="#_3-keystore-添加-minio-登录凭据" aria-label="Permalink to &quot;3 Keystore 添加 MinIO 登录凭据&quot;">​</a></h3><p>为了让 Elasticsearch 可以正常连接到 MinIO 对象存储，我们需要在 keystore 添加 MinIO 的登录凭据。执行如下命令，进入 Elasticsearch 容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">snapshot_es01_1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> bash</span></span></code></pre></div><p>连接对象存储的凭证存储在 Elasticsearch 的 keystore 中，使用以下命令在 keystore 中添加存储库访问凭证。其中 client_name 参数用于区分连接存储库的客户端，这里我们将 client_name 设置成 minio。MinIO 的 <strong>AccessKey</strong> 和 <strong>SecretKey</strong> 是我们在 elastic-lab/3_snapshot/.env 文件中设置的 minioadmin 和 minioadmin。</p><p>语法如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#bin/elasticsearch-keystore add s3.client.&lt;client_name&gt;.access_key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#bin/elasticsearch-keystore add s3.client.&lt;client_name&gt;.secret_key</span></span></code></pre></div><p>执行以下命令，在 keystore 中添加 AccessKey。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/elasticsearch-keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> s3.client.minio.access_key</span></span></code></pre></div><p>执行以下命令，在 keystore 中添加 SecretKey。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/elasticsearch-keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> s3.client.minio.secret_key</span></span></code></pre></div><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220721103309.png" alt=""></p><p>执行以下命令确认设置的 AccessKey 和 SecretKey 是否正确。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/elasticsearch-keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> s3.client.minio.access_key</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/elasticsearch-keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> s3.client.minio.secret_key</span></span></code></pre></div><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220819130936.png" alt=""></p><p>浏览器输入 <code>http://&lt;ESC 公网 IP&gt;:5601</code> 访问 Kibana 界面。输入用户名 <strong>elastic</strong>，密码 <strong>elastic123</strong>，点击 <strong>Login in</strong>。其中密码是在 elastic-lab/2_ilm/.env 文件中设置的。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220709215009.png" alt=""></p><p>点击 <strong>Management -&gt; Dev Tools -&gt; Console</strong>，打开 Kibana Console 界面。执行以下命令重新加载在节点上设置的 keystore。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">POST _nodes/reload_secure_settings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;secure_settings_password&quot;:&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_5-注册存储库" tabindex="-1">5 注册存储库 <a class="header-anchor" href="#_5-注册存储库" aria-label="Permalink to &quot;5 注册存储库&quot;">​</a></h3><p>存储库（repository）是用于存储快照的地方，在创建或恢复快照之前先要创建好存储库。执行如下命令注册存储库，在 type 参数中设置存储库类型为 s3，在 settings 参数中填写存储库相关信息。从 Elasticsearch 8.0 版本开始已经内置支持 S3 类型的存储库了，无需再像以前那样安装 S3 Repository 插件了。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PUT _snapshot/my-repository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;s3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;settings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;bucket&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;es-snapshot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 存储桶名称</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;minio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 和 keystore 中设置的 client_name 一致</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;endpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;http://&lt;ES 公网 IP&gt;:9000&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> // 存储库 IP 地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在创建存储库时，Elasticsearch 会自动检查存储库是否可用，如果没有报错说明存储库可以正常使用。在创建完成后也以使用 verify snapshot repository API 验证存储库的连接情况，如果验证成功，该请求将返回用于验证存储库的节点列表；如果验证失败，则返回错误信息。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">POST _snapshot/my-repository/_verify</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 返回结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;jnuDcyy1T_CroiQuBfDASA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;es01&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_6-创建快照" tabindex="-1">6 创建快照 <a class="header-anchor" href="#_6-创建快照" aria-label="Permalink to &quot;6 创建快照&quot;">​</a></h3><p>注册好存储库以后，接下来就可以创建快照（snapshot）对数据进行备份了。在创建快照之前，先准备一个索引 index-1，并往里面插入 3 条文档。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PUT _bulk</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;_index&quot;:&quot;index-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;:&quot;Mark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;age&quot;:21</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;_index&quot;:&quot;index-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;:&quot;Lisa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;age&quot;:18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;_index&quot;:&quot;index-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;:&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;age&quot;:20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>然后使用 create snapshot API 手动创建名为 <strong>snapshot-1</strong> 的快照，根据数据量的大小，快照可能需要等待一段时间才能完成。默认情况下，快照命令在后台启动快照进程后，就会立即向客户端返回响应。如果想要等待快照完成后再响应客户端，可以将 <code>wait_for_completion</code> 参数设置为 true。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">PUT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> _snapshot/my-repository/snapshot-1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 等待快照完成后再响应客户端</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># PUT _snapshot/my-repository/snapshot-1?wait_for_completion=true</span></span></code></pre></div><p>如上所示，在不做额外设置的情况下，快照默认会备份集群中所有的数据流和打开的索引。如果想要选择性地做快照备份，可以在请求体中设置相应的参数，支持的参数如下：</p><ul><li><strong>ignore_unavailable</strong>（可选，布尔）：是否忽略创建快照时不存在的索引，默认值为 false。</li><li><strong>indices</strong>（可选，字符串列表）：快照中包含的索引和数据流。</li><li><strong>include_global_state</strong>（可选，布尔）：是否备份当前的全局状态，默认值为 true。全局状态包括： <ul><li><strong>persistent cluster settings</strong></li><li><strong>index template</strong></li><li><strong>legacy index template</strong></li><li><strong>ingest pipeline</strong></li><li><strong>ILM policy</strong></li><li><strong>feature state</strong></li></ul></li><li><strong>feature_states</strong>（可选，字符串列表）: 快照中包含的功能状态列表，feature state 包含用于存储 Elastic Stack 组件（例如 Elasticsearch Security 和 Kibana）的相关配置和历史记录的索引和数据流。</li><li><strong>metadata</strong>（可选，对象）：添加任意元数据到快照中，例如谁创建了快照，以及创建快照的原因等等。</li><li><strong>partial</strong>（可选，布尔）：是否允许对含有不可用分片的索引进行部分快照，默认值为 false。</li></ul><p>接下来创建快照 <strong>snapshot-2</strong>，并在请求体中指定一些参数：</p><ul><li><code>indices</code> 参数指明只对索引 index-1 和 index-2 进行备份。</li><li>在本示例中并没有创建索引 index-2，在这里将 <code>ignore_unavailable</code> 参数设置为 true 可以忽略创建快照时不存在的索引，避免产生索引不存在的报错；</li><li>将 <code>include_global_state</code> 参数设置为 false 表示不会备份集群状态和功能状态，因此集群的设置、用户权限以及 Kibana 配置等都不会进行备份。</li><li>将 <code>partial</code> 参数设置为 true 允许当索引存在不可用的分片时，继续进行部分快照。</li><li>最后在 <code>metadata</code> 参数中添加了一些自定义的内容，说明快照的创建人和创建原因。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">PUT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> _snapshot/my-repository/snapshot-2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;indices&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;index-1,index-2&quot;,//</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 备份的索引和者数据流</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;ignore_unavailable&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 忽略创建快照时不存在的索引</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;include_global_state&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 不备份集群状态和功能状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;partial&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 允许对含有不可用分片的索引进行部分快照</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  &quot;metadata&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 添加自定义元数据到快照</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">     &quot;taken_by&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;chengzw&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      &quot;taken_because&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;backup before upgrading&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在 <strong>Stack Management -&gt; Snapshot and Restore -&gt; Snapshots</strong> 可以查看创建快照的进度。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220721113006.png" alt=""></p><p>执行如下命令，可以查看快照的信息，其中包含快照的索引和数据流，快照当前的状态，快照开始和结束的时间，创建快照花费的时间，创建快照时的异常信息等等。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">GET _snapshot/my-repository/snapshot-2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 返回结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;snapshots&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;snapshot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;snapshot-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;3_j5cF85T7CpltOeIzhM4Q&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;my-repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;version_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8020399</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;8.2.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;indices&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 快照中包含的索引</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;index-1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;data_streams&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : [ ], </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 快照中包含的数据流</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;include_global_state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;metadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;taken_because&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;backup before upgrading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;taken_by&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chengzw&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SUCCESS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 快照当前的状态</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;start_time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2022-07-21T03:27:19.674Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 快照开始时间</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;start_time_in_millis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1658374039674</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;end_time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2022-07-21T03:27:35.280Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 快照结束时间</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;end_time_in_millis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1658374055280</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;duration_in_millis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15606</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 创建快照花费的时间</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;failures&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : [ ], </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 创建快照的异常信息</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;shards&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;successful&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;feature_states&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : [ ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;remaining&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在 Minio 的存储桶中可以看到快照的数据。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220721113317.png" alt=""></p><h3 id="_7-恢复快照" tabindex="-1">7 恢复快照 <a class="header-anchor" href="#_7-恢复快照" aria-label="Permalink to &quot;7 恢复快照&quot;">​</a></h3><p>确认快照创建完成后，现在来尝试使用快照来恢复索引。在恢复之前先删除原有的索引 index-1。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">DELETE index-1</span></span></code></pre></div><p>如下所示，使用 restore snapshot API 指定恢复索引 index-1。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">POST _snapshot/my-repository/snapshot-1/_restore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;indices&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>查询索引 index-1，可以看到文档被成功恢复了。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">GET index-1/_search</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 返回结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;took&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;timed_out&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;_shards&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;successful&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;skipped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;hits&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;relation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;eq&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;max_score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;hits&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;_hjDHoIBKcgbD44DUW4Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Mark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">21</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;_xjDHoIBKcgbD44DUW4Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Lisa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ABjDHoIBKcgbD44DUW8Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;_source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>默认情况下，快照中所有的索引和数据流都会恢复，除了集群状态相关的索引以外。如果想要恢复集群状态，可以将 <code>include_global_state</code> 参数设置为 true。<strong>恢复快照时，目标索引必须处于 close 状态</strong>，当快照恢复完成后，会自动将索引 open。如果不指定恢复的目标索引名，默认会将快照中的数据恢复到原索引上，这里需要强调的是，恢复后的索引中只会含有快照中备份的数据，创建快照后的增量数据将会丢失。</p><p>在恢复快照时也可以在请求体中指定一些参数：</p><ul><li><code>indices</code> 参数指明只对索引 index-1 和 index-2 的快照数据进行恢复。</li><li>在本示例中并没有创建索引 index-2，在这里将 <code>ignore_unavailable</code> 参数设置为 true 可以忽略快照中不存在的索引，避免产生索引不存在的报错。</li><li>将 <code>include_global_state</code> 参数设置为 false 表示不恢复集群状态和功能状态，因此集群的设置、用户权限以及 Kibana 配置等都不会进行恢复。</li><li><code>rename_pattern</code> 和 <code>rename_replacement</code> 两个参数定义了恢复快照到新索引的匹配模式。</li><li><code>include_aliases</code> 参数设置是否恢复别名，默认为 true。</li></ul><p>执行以下命令，将 index-1 索引的快照数据恢复到新的索引 restored-index-1 上。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">POST _snapshot/my-repository/snapshot-1/_restore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;indices&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-1,index-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 备份的索引和者数据流</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;ignore_unavailable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 忽略快照中不存在的索引</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;include_global_state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 默认为 false，不恢复集群状态</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;rename_pattern&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-(.*)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 匹配快照中的索引，() 内的内容替换到 $1 中</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;rename_replacement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;restored-index-$1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 恢复的索引名</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;include_aliases&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">false // 不恢复别名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_8-slm-快照生命周期管理" tabindex="-1">8 SLM 快照生命周期管理 <a class="header-anchor" href="#_8-slm-快照生命周期管理" aria-label="Permalink to &quot;8 SLM 快照生命周期管理&quot;">​</a></h3><p>Elasticsearch 从 7.4 版本开始引入了 <strong>SLM（Snapshot Lifecycle Management）</strong> 快照生命周期管理功能。我们可以通过设置 SLM 策略来对快照的生命周期进行管理，例如定时创建快照，控制快照的保留时长和数量等等。如下所示，创建了一个 SLM 策略 nightly-snapshots：</p><ul><li>在 <code>schedule</code> 参数中可以使用 Cron 表达式来设置定时任务。</li><li><code>name</code> 参数用于设置快照的名称，支持日期数学表达式，这样可以方便我们区分快照创建的时间，为了防止命名冲突，SLM 策略会在快照名的末尾附加随机的 UUID 字符串。</li><li>在<code>retention</code> 参数中可以设置快照的保留规则，避免快照的数量无限制地增长。</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PUT _slm/policy/nightly-snapshots</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;schedule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;0 30 1 * * ?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 每天凌晨 1:30  (UTC 时间) 创建快照</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&lt;nightly-snapshots-{now/d}&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 快照名称</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">使用日期数学表达式添加当前日期</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;my-repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 使用的存储库</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: { </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;indices&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 备份的索引</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;ignore_unavailable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 忽略创建快照时不存在的索引</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;include_global_state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">false // 不备份集群状态和功能状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &quot;retention&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {   </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 快照保留策略</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;expire_after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;30d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 保留快照 30 天</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;min_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">// 保留至少 5 个快照</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;max_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">50 // 保留最多 50 个快照</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>创建完 SLM 策略以后，可以执行 execute snapshot lifecycle policy API 立即创建快照，这便于我们测试新的 SLM 策略，手动执行策略不会影响其快照计划。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">POST _slm/policy/nightly-snapshots/_execute</span></span></code></pre></div><p>我们也可以在 <strong>Stack Management -&gt; Snapshot and Restore -&gt; Policies</strong> 手动执行 SLM 策略。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220721114158.png" alt=""></p>`,84);function C(s,q,B,m,E,b){const l=p,h=k("ClientOnly");return n(),r("div",null,[D,d(h,null,{default:o(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),c(l,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),A])}const S=e(u,[["render",C]]);export{f as __pageData,S as default};
