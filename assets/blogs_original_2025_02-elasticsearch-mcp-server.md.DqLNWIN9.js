import{_ as h}from"./chunks/ArticleMetadata.CHA3f0eO.js";import{_ as k,C as r,c as o,o as t,k as e,G as c,P as d,a as g,w as C,b as y,e as u}from"./chunks/framework.PU6D6dP3.js";import"./chunks/md5.BwKp3kP6.js";const P=JSON.parse('{"title":"MCP Server 开发实战：无缝对接 LLM 和 Elasticsearch","description":"","frontmatter":{"title":"MCP Server 开发实战：无缝对接 LLM 和 Elasticsearch","author":"Se7en","date":"2025/01/13 13:30","categories":["AI"],"tags":["MCP","AI"]},"headers":[],"relativePath":"blogs/original/2025/02-elasticsearch-mcp-server.md","filePath":"blogs/original/2025/02-elasticsearch-mcp-server.md","lastUpdated":1737808507000}'),A={name:"blogs/original/2025/02-elasticsearch-mcp-server.md"};function F(i,s,D,m,B,E){const l=h,p=r("ClientOnly");return t(),o("div",null,[s[0]||(s[0]=e("h1",{id:"mcp-server-开发实战-无缝对接-llm-和-elasticsearch",tabindex:"-1"},[g("MCP Server 开发实战：无缝对接 LLM 和 Elasticsearch "),e("a",{class:"header-anchor",href:"#mcp-server-开发实战-无缝对接-llm-和-elasticsearch","aria-label":'Permalink to "MCP Server 开发实战：无缝对接 LLM 和 Elasticsearch"'},"​")],-1)),c(p,null,{default:C(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),y(l,{key:0,article:i.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),s[1]||(s[1]=d(`<p>在<a href="https://mp.weixin.qq.com/s/rcOi7e8F5qGVVF2noCk46Q" target="_blank" rel="noreferrer">一文带你入门 MCP（模型上下文协议）</a>文章中，我们快速介绍了 MCP 的基本概念，并且通过一个示例让读者初步感受到了 MCP 的强大能力。本文将进一步深入，带领读者一步步学习如何开发一个完整的 MCP Server。本文的完整代码可以在这里找到：<a href="https://github.com/cr7258/hands-on-lab/tree/main/ai/claude/mcp/server/elasticsearch-mcp-server-example" target="_blank" rel="noreferrer">https://github.com/cr7258/hands-on-lab/tree/main/ai/claude/mcp/server/elasticsearch-mcp-server-example</a></p><h2 id="mcp-server-核心原语" tabindex="-1">MCP Server 核心原语 <a class="header-anchor" href="#mcp-server-核心原语" aria-label="Permalink to &quot;MCP Server 核心原语&quot;">​</a></h2><p>Model Context Protocol (MCP) 是一个专门为 LLM（大语言模型）应用设计的协议，它允许你构建服务器以安全、标准化的方式向 LLM 应用程序公开数据和功能。MCP Server 提供了 3 种核心原语，每种原语都有其特定的用途和特点：</p><ol><li><strong>Tool（工具）</strong>：</li></ol><ul><li><a href="https://modelcontextprotocol.io/docs/concepts/tools" target="_blank" rel="noreferrer">Tool</a> 允许服务器公开可执行的函数，这些函数可由客户端调用并由 LLM 使用来执行操作。Tool 不仅人让 LLM 能从外部获取信息，还能执行写入或操作，为 LLM 提供真正的行动力。</li><li>模型控制：Tool 直接暴露给 LLM 可执行函数，让模型可以主动调用。</li></ul><ol start="2"><li><strong>Resource（资源）</strong>：</li></ol><ul><li><a href="https://modelcontextprotocol.io/docs/concepts/resources" target="_blank" rel="noreferrer">Resource</a> 表示服务器希望提供给客户端的任何类型的只读数据。这可能包括：文件内容、数据库记录、图片、日志等等。</li><li>应用控制：Resource 由客户端或应用管理，用于为 LLM 提供上下文内容。</li></ul><ol start="3"><li><strong>Prompt（提示模板）</strong> ：</li></ol><ul><li><a href="https://modelcontextprotocol.io/docs/concepts/prompts" target="_blank" rel="noreferrer">Prompt</a> 是由服务器定义的可重用的模板，用户可以选择这些模板来引导或标准化与 LLM 的交互过程。例如，Git MCP server 可以提供一个“生成提交信息”的提示模板，用户可以用它来创建标准化的提交消息。</li><li>用户控制：Prompt 通常由用户自行选择。</li></ul><h2 id="elasticsearch-mcp-server-示例" tabindex="-1">Elasticsearch MCP Server 示例 <a class="header-anchor" href="#elasticsearch-mcp-server-示例" aria-label="Permalink to &quot;Elasticsearch MCP Server 示例&quot;">​</a></h2><p>接下来，我们将通过构建一个 Elasticsearch MCP Server，分别演示 Tool、Prompt 和 Resource 的具体用法。</p><h3 id="使用-docker-compose-启动-elasticsearch-集群" tabindex="-1">使用 Docker Compose 启动 Elasticsearch 集群 <a class="header-anchor" href="#使用-docker-compose-启动-elasticsearch-集群" aria-label="Permalink to &quot;使用 Docker Compose 启动 Elasticsearch 集群&quot;">​</a></h3><p>执行 <code>docker-compose up -d</code> 命令在后台启动一个 3 节点的 Elasticsearch 集群，并且提供了 Kibana 用于管理和可视化 Elasticsearch。</p><p>浏览器输入 <a href="http://localhost:5601" target="_blank" rel="noreferrer">http://localhost:5601</a> 访问 Kibana 界面，用户名 <code>elastic</code>，密码 <code>test123</code>。</p><h3 id="准备测试数据" tabindex="-1">准备测试数据 <a class="header-anchor" href="#准备测试数据" aria-label="Permalink to &quot;准备测试数据&quot;">​</a></h3><p>在 Kibana 中打开 <code>Management -&gt; Dev Tools</code> 页面， 执行以下代码创建两个索引 <code>student</code> 和 <code>teacher</code>，分别插入几条数据：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /student/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Computer Science&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /student/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Mathematics&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /student/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Carol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Physics&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /teacher/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;subject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;English&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;yearsOfExperience&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /teacher/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;subject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;History&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;yearsOfExperience&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST /teacher/_doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Lily&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;subject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Mathematics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;yearsOfExperience&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h3><p>在本教程中，我们将使用 <a href="https://github.com/modelcontextprotocol/python-sdk" target="_blank" rel="noreferrer">MCP Python SDK</a> 来编写项目，使用 <a href="https://docs.astral.sh/uv/" target="_blank" rel="noreferrer">uv</a> 来管理 Python 项目依赖。</p><p>安装 uv 可以参考 <a href="https://docs.astral.sh/uv/getting-started/installation/" target="_blank" rel="noreferrer">Installing uv</a>。MacOS 用户可以使用 brew 进行安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> uv</span></span></code></pre></div><p>执行以下命令初始化项目：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> elasticsearch-mcp-server-example</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> elasticsearch-mcp-server-example</span></span></code></pre></div><p>添加依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;mcp[cli]&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> elasticsearch</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> python-dotenv</span></span></code></pre></div><p>创建 <code>server.py</code> 文件，接下来将会在该文件中编写代码：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> server.py</span></span></code></pre></div><h3 id="在-claude-desktop-中安装-mcp-server" tabindex="-1">在 Claude Desktop 中安装 MCP Server <a class="header-anchor" href="#在-claude-desktop-中安装-mcp-server" aria-label="Permalink to &quot;在 Claude Desktop 中安装 MCP Server&quot;">​</a></h3><p>在 <code>.env</code> 文件中设置好 Elasticsearch 的连接信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ELASTIC_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">https://localhost:9200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ELASTIC_USERNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">elastic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ELASTIC_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">test123</span></span></code></pre></div><p>可以执行以下命令将 MCP Server 安装到 Claude Desktop 中：</p><ul><li><code>--env-file</code> 参数指定了 <code>.env</code> 文件的路径，用于加载环境变量。</li><li><code>--with-editable</code> 参数指定了 uv 依赖管理文件 <code>pyproject.toml</code> 所在的目录，用于安装项目的依赖。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mcp</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> server.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --env-file</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .env</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --with-editable</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ./</span></span></code></pre></div><p>该命令会自动帮助你在 <code>cluade_desktop_config.json</code> 文件中添加 MCP Server 的配置。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;mcpServers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;elasticsearch-mcp-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">      &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;uv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">      &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;--with&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;mcp[cli]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;--with-editable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;/your/project/path/elasticsearch-mcp-server-example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;mcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;/your/project/path/elasticsearch-mcp-server-example/server.py&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">      &quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;ELASTIC_HOST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;https://localhost:9200&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;ELASTIC_USERNAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;elastic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;ELASTIC_PASSWORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;test123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>接下来我们开始编写 Elasticsearch MCP Server 的相关代码。</p><h3 id="elasticsearch-客户端配置" tabindex="-1">Elasticsearch 客户端配置 <a class="header-anchor" href="#elasticsearch-客户端配置" aria-label="Permalink to &quot;Elasticsearch 客户端配置&quot;">​</a></h3><p>首先创建 Elasticsearch 客户端，用于和 Elasticsearch 服务器进行交互。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_elasticsearch_client</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() -&gt; Elasticsearch:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # Load environment variables from .env file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> os.getenv(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ELASTIC_HOST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> os.getenv(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ELASTIC_USERNAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> os.getenv(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ELASTIC_PASSWORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # Disable SSL warnings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    warnings.filterwarnings(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ignore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;.*TLS with verify_certs=False is insecure.*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> password:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Elasticsearch(url, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">basic_auth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(username, password), </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">verify_certs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Elasticsearch(url)</span></span></code></pre></div><h3 id="初始化-fastmcp-server" tabindex="-1">初始化 FastMCP Server <a class="header-anchor" href="#初始化-fastmcp-server" aria-label="Permalink to &quot;初始化 FastMCP Server&quot;">​</a></h3><p>MCP Python SDK 现在提供了全新的 FastMCP 类，它通过利用 Python 的类型注解（Type Hints）和文档字符串（Docstrings）特性，能够自动生成工具定义。这种方式让开发者可以更加便捷地创建和管理 MCP 的 Tool、Resource 以及 Prompt 等功能组件。</p><p>以下代码创建一个名为 <code>mcp</code> 的 FastMCP 对象。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mcp.server.fastmcp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FastMCP</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">MCP_SERVER_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;elasticsearch-mcp-server&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mcp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FastMCP(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">MCP_SERVER_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h4 id="添加-tool" tabindex="-1">添加 Tool <a class="header-anchor" href="#添加-tool" aria-label="Permalink to &quot;添加 Tool&quot;">​</a></h4><p>Tool 定义了允许 LLM 可以调用 MCP Server 执行的操作，除了查询以外，还可以执行写入操作。接下来定义了两个 Tool：</p><ul><li><code>list_indices</code>: 列出所有可用的索引。</li><li><code>get_index</code>: 获取指定索引的详细信息。</li></ul><p>使用 <code>@mcp.tool()</code> 装饰器将这两个函数标记为 MCP 的 Tool。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@mcp.tool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> list_indices</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() -&gt; List[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;列出所有 Elasticsearch 索引&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [index[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> es.cat.indices(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@mcp.tool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> get_index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(index: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;获取特定 Elasticsearch 索引的详细信息&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> es.indices.get(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">index)</span></span></code></pre></div><p>然后重启 Claude Desktop，一切正常的话，你应该能在输入框的右下角看到一个锤子图标。点击锤子图标，可以看到 Elasticsearch MCP Server 提供的工具信息。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131255861.png" alt=""></p><p>我们可以针对 Elasticsearch 的数据进行提问，比如：</p><p><strong>Elasticsearch 中有哪些索引？</strong> 可以看到 Claude 调用了 <code>list_indices</code> 来列出所有索引。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131301843.png" alt=""></p><p><strong>student 索引中有哪些字段？</strong> 可以看到 Claude 调用了 <code>get_index</code> 来获取 student 索引信息。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131258864.png" alt=""></p><h4 id="添加-resource" tabindex="-1">添加 Resource <a class="header-anchor" href="#添加-resource" aria-label="Permalink to &quot;添加 Resource&quot;">​</a></h4><p>Resource 定义了 LLM 可以访问只读的数据源，可以用于为 LLM 提供上下文内容。在这个示例中，我们定义了两个资源：</p><ul><li><code>es://logs</code>：允许 LLM 访问 Elasticsearch 容器的日志信息，通过 Docker 命令获取日志内容。</li><li><code>file://docker-compose.yaml</code>：允许 LLM 访问项目的 <code>docker-compose.yaml</code> 文件内容。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@mcp.resource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;es://logs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> get_logs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;Get Elasticsearch container logs&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> subprocess.run([</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;docker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;logs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;elasticsearch-mcp-server-example-es01-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">capture_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result.stdout</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@mcp.resource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;file://docker-compose.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> get_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;Return the contents of docker-compose.yaml file&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;docker-compose.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f.read()</span></span></code></pre></div><p>使用 <code>@mcp.resource()</code> 装饰器将这些函数标记为 MCP 的 Resource，装饰器参数指定了 Resource 的 URI。</p><p>Resource 建议遵循以下格式的 URI 标识：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[protocol]://[host]/[path]</span></span></code></pre></div><p>URI 的协议和路径结构由 MCP Server 自定实现定义。</p><p>重启 Claude，点击插头图标，可以看到 Elasticsearch MCP Server 提供的 Resource。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131311669.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131312988.png" alt=""></p><p>接下来我们可以选择 Resource 作为提问的上下文，让 LLM 进行回答。</p><ul><li>选择 <code>es://logs</code>，然后提问：<strong>分析一下日志。</strong></li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131315025.png" alt=""></p><ul><li>选择 <code>file://docker-compose.yaml</code>，然后提问：<strong>文件中定义了哪几个容器？</strong></li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131317901.png" alt=""></p><h4 id="添加-prompt" tabindex="-1">添加 Prompt <a class="header-anchor" href="#添加-prompt" aria-label="Permalink to &quot;添加 Prompt&quot;">​</a></h4><p>Prompt 用于定义可重用的提示模板，帮助用户更好地引导 LLM 以标准化的方式完成任务。在这个示例中，我们定义了一个名为 <code>es_prompt</code> 的提示模板，引导 LLM 从多个维度（如索引设置、搜索优化、数据建模和扩展性等）对索引进行分析。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@mcp.prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> es_prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(index: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;Create a prompt for index analysis&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;You are an elite Elasticsearch expert with deep knowledge of search engine architecture, data indexing strategies, and performance optimization. Please analyze the index &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">index</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39; considering:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">- Index settings and mappings</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">- Search optimization opportunities</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">- Data modeling improvements</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">- Potential scaling considerations</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;</span></span></code></pre></div><p>重启 Claude Desktop，点击插头图标，选择 <code>es_prompt</code>，并输入待分析的索引 <code>student</code>。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131326390.png" alt=""></p><p>Claude 会调用 <code>get_index</code> Tool 来获取 <code>student</code> 索引的信息，并根据我们提供的 Prompt 给出多个维度的建议。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131329228.png" alt=""></p><h2 id="使用-mcp-inspector-调试-mcp-server" tabindex="-1">使用 MCP Inspector 调试 MCP Server <a class="header-anchor" href="#使用-mcp-inspector-调试-mcp-server" aria-label="Permalink to &quot;使用 MCP Inspector 调试 MCP Server&quot;">​</a></h2><p>MCP Inspector 是一个交互式的开发者工具，专门用于测试和调试 MCP 服务器。它提供了一个图形化界面，让开发者能够直观地检查和验证 MCP 服务器的功能。</p><p>执行以下命令可以启动 MCP Inspector：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mcp</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dev</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> server.py</span></span></code></pre></div><p>启动成功后，浏览数输入 <a href="http://localhost:5173" target="_blank" rel="noreferrer">http://localhost:5173</a> 打开 MCP Inspector 界面。点击 <code>Connect</code> 连接 MCP Server。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131430495.png" alt=""></p><p>将 Elasticsearch 的连接信息添加到环境变量中。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131432365.png" alt=""></p><p>在 MCP Inspector 中可以列出和执行 Resource、Tool 和 Prompt。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131438113.png" alt=""></p><h2 id="组合示例" tabindex="-1">组合示例 <a class="header-anchor" href="#组合示例" aria-label="Permalink to &quot;组合示例&quot;">​</a></h2><p>现在假设我们有这样一个需求，读取 movies.csv 文件，将文档写入 Elasticsearch 的 movies 索引中，如果电影票房超过 1 亿美元，则在文档中设置一个额外的字段 <code>isPopular: true</code>，否则设置为 <code>isPopular: false</code>。</p><p>在过去，我们可能会考虑使用 Elasticsearch Ingest Pipeline 的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/script-processor.html" target="_blank" rel="noreferrer">Script processor</a> 来实现这一需求。</p><p>现在我们可以通过 Resource 向 LLM 提供要读取的 movies.csv 文件，LLM 会对电影票房进行计算，然后设置文档的 <code>isPopular</code> 字段值，最后调用 <code>write_documents</code> Tool 来将文档写入 Elasticsearch 的 movies 索引中。实现的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@mcp.resource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;file://movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> get_movies</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;Return the contents of movies.csv file&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f.read()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@mcp.tool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> write_documents</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(index: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, documents: List[Dict]) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;Write multiple documents to an Elasticsearch index using bulk API</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Args:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        index: Name of the index to write to</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        documents: List of documents to write</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Returns:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        Bulk operation response from Elasticsearch</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    operations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> doc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> documents:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        # Add index operation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        operations.append({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: index}})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        # Add document</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        operations.append(doc)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> es.bulk(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">operations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">operations, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">refresh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>重启 Claude，选择 <code>file://movies.csv/</code> Resource，然后向 Claude 发送以下指令：<strong>将文件中的电影写入 Elasticserach 中的 movies 索引，如果电影票房超过 1 亿美元，那么在该文档中设置一个额外的字段 isPopular: true，否则设置为 false。</strong></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131457140.png" alt=""></p><p>可以看到 Claude 顺利地完成了我们指定的任务。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131458381.png" alt=""></p><p>在 Kibana 中查询 <code>movies</code> 索引，可以看到我们的数据已经成功写入，并且 <code>isPopular</code> 字段也已经被正确设置了。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202501131459592.png" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本教程通过构建一个 Elasticsearch MCP Server 的实例，展示了如何利用 MCP 协议的三个核心原语（Tool、Resource 和 Prompt）来增强 LLM 的能力。通过 Tool 实现了索引操作和文档写入，通过 Resource 提供数据的访问能力，而 Prompt 则帮助 LLM 以标准化的方式完成任务。最后通过一个实际的组合示例，演示了如何让 LLM 利用这些组件完成更复杂的数据处理任务，充分体现了 MCP 在提升 LLM 应用开发效率方面的优势。</p>`,101))])}const f=k(A,[["render",F]]);export{P as __pageData,f as default};
