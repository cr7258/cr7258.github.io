import{_ as i,c as a,o as n,P as e}from"./chunks/framework.hsaHFr3N.js";const o=JSON.parse('{"title":"Operator","description":"","frontmatter":{"title":"Operator","author":"Se7en","categories":["Interview"],"tags":["Operator","Client-Go","Controller-Runtime"]},"headers":[],"relativePath":"courses/interview/云原生/07-operator.md","filePath":"courses/interview/云原生/07-operator.md","lastUpdated":1729736003000}'),t={name:"courses/interview/云原生/07-operator.md"};function l(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="client-go" tabindex="-1">Client-Go <a class="header-anchor" href="#client-go" aria-label="Permalink to &quot;Client-Go&quot;">​</a></h2><h3 id="client-go-有哪几种客户端" tabindex="-1">Client-Go 有哪几种客户端？ <a class="header-anchor" href="#client-go-有哪几种客户端" aria-label="Permalink to &quot;Client-Go 有哪几种客户端？&quot;">​</a></h3><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410112137449.png" alt=""></p><p>client-go 支持 4 种客户端对象与 kube-apiserver 进行交互：</p><ul><li><strong>RESTClient</strong> 是最基础的客户端，它主要对 HTTP 请求进行了封装，实现了 RESTful 风格的 API。ClientSet、DynamicClient 和 DiscoveryClient 都是基于 RESTClient 实现的。</li><li><strong>ClientSet</strong> 在 RESTClient 的基础上封装了 Resource 和 Version 的管理方法。每一个 Resource 可以被视为一个客户端，而 ClientSet 则是多个客户端的集合，每一个 Resource 和 Version 都以函数的方式暴露给用户。ClientSet 只能处理 Kubernetes 内置资源，不能直接访问 CRD 资源。如果想用 ClientSet 访问 CRD 资源，则可以通过 client-gen 代码生成器重新生成 ClientSet，在 ClientSet 中自动生成与 CRD 操作相关的接口。</li><li><strong>DynamicClient</strong> 能够处理 Kubernetes 的所有资源，包括 Kubernetes 内置资源和 CRD 资源。</li><li><strong>DiscoveryClient</strong> 用于发现 kube-apiserver 所支持的 Group、Versions 和 Resources。</li></ul><p>有关 client-go 使用示例的完整代码可以在这里找到：<a href="https://github.com/cr7258/hands-on-lab/tree/main/client-go/client" target="_blank" rel="noreferrer">client-go</a></p><h4 id="restclient-使用示例" tabindex="-1">RESTClient 使用示例 <a class="header-anchor" href="#restclient-使用示例" aria-label="Permalink to &quot;RESTClient 使用示例&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 配置 API 路径和请求的资源组/资源版本信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">config.APIPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;/api&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">config.GroupVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">corev1.SchemeGroupVersion</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 配置数据的编解码器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">config.NegotiatedSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> scheme.Codecs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 实例化 RESTClient 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">restClient, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> rest.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">RESTClientFor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(config)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 预设返回值存放对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">corev1.PodList{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Do 方法发起请求并用 Into 方法将 API Server 的返回结果写入 Result 对象中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> restClient.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    Namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    VersionedParams</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">metav1.ListOptions{Limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, scheme.ParameterCodec).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    Do</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    Into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result)</span></span></code></pre></div><h4 id="clientset-使用示例" tabindex="-1">ClientSet 使用示例 <a class="header-anchor" href="#clientset-使用示例" aria-label="Permalink to &quot;ClientSet 使用示例&quot;">​</a></h4><p>在 ClientSet 代码示例中，当使用 <code>kubernetes.NewForConfig</code> 函数初始化 ClientSet 客户端集合时，会级联构造出 CoreV1 资源组和资源版本的客户端集合对象（CoreV1Client）。 当使用 <code>clientset.CoreV1().Pods</code> 函数时会创建出 Pod 的专属客户端。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">clientset, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> kubernetes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewForConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(config)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">podClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> clientset.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">CoreV1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Pods</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(apiv1.NamespaceDefault)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> podClient.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), metav1.ListOptions{Limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span></code></pre></div><h4 id="dynamicclient-使用示例" tabindex="-1">DynamicClient 使用示例 <a class="header-anchor" href="#dynamicclient-使用示例" aria-label="Permalink to &quot;DynamicClient 使用示例&quot;">​</a></h4><p>DynamicClient 之所以能够处理 CRD 资源，其关键在于 DynamicClient 内部实现了 <a href="https://github.com/kubernetes/apimachinery/blob/ea28d546a962e50982945e357ad9869cee15f291/pkg/runtime/interfaces.go#L362-L386" target="_blank" rel="noreferrer">Unstructured</a>，用于处理非结构化数据（无法提前预知数据结构）。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dynamicClient, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dynamic.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewForConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(config)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">gvr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> schema.GroupVersionResource{Version: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Resource: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">unstructObj, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dynamicClient.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(gvr).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), metav1.ListOptions{Limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">apiv1.PodList{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> runtime.DefaultUnstructuredConverter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">FromUnstructured</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(unstructObj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UnstructuredContent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), list)</span></span></code></pre></div><h4 id="discoveryclient-使用示例" tabindex="-1">DiscoveryClient 使用示例 <a class="header-anchor" href="#discoveryclient-使用示例" aria-label="Permalink to &quot;DiscoveryClient 使用示例&quot;">​</a></h4><p>kubectl 命令行工具使用了 DiscoveryClient 的封装类 CachedDiscoveryClient，在第一次获取资源组、资源版本、资源信息时，会将响应缓存在本地磁盘，此后在缓存周期内再次获取资源信息时，会直接从本地缓存返回数据。CachedDiscoveryClient 的缓存信息默认存储在 <code>~/.kube/cache/discovery</code> 和 <code>~/.kube/cache/http</code> 目录中，默认缓存周期为 6 小时。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">discoveryClient, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> discovery.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewDiscoveryClientForConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(config)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_, APIResourceList, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> discoveryClient.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ServerGroupsAndResources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _, list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> APIResourceList {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    gv, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> schema.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ParseGroupVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(list.GroupVersion)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _, resource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list.APIResources {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">, group: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">, version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%v\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, resource.Name, gv.Group, gv.Version)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>参考资料：深入理解 Kubernetes 源码 P200 ～ P214</p><h3 id="list-和-watch-的实现原理" tabindex="-1">List 和 Watch 的实现原理 <a class="header-anchor" href="#list-和-watch-的实现原理" aria-label="Permalink to &quot;List 和 Watch 的实现原理&quot;">​</a></h3><p>List-Watch 机制是 Kubernetes 的系统消息通知机制，该机制确保了消息的实时性、顺序性和可靠性。List 负责调用资源的 List RESTful API，基于 HTTP 短链接实现。</p><p>Watch 基于 HTTP 长链接实现，通过 HTTP/1.1 的分块传输编码（Chunked Transfer-Encoding）机制，在响应头中添加 <code>Transfer-Encoding: chunked</code> 字段，将数据分块传输给客户端。（在 HTTP2 中是基于 <a href="https://datatracker.ietf.org/doc/html/rfc9113#name-server-push" target="_blank" rel="noreferrer">Server Push</a> 实现的）</p><p>可以在访问 kube-apiserver 的 URL 后面添加 <code>?watch=true</code> 参数，即可开启 Watch 监听。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 绕过凭证验证</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> proxy</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://localhost:8080/api/v1/namespaces/default/pods?watch=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span></code></pre></div><p>参考资料</p><ul><li><a href="https://www.zhaohuabing.com/post/2023-03-09-how-to-create-a-k8s-controller/" target="_blank" rel="noreferrer">Kubernetes Controller 机制详解（一）</a></li><li><a href="https://www.cnblogs.com/daniel-hutao/p/15424703.html" target="_blank" rel="noreferrer">Kubernetes List-Watch 机制原理与实现 - chunked</a></li></ul><h3 id="informer-机制" tabindex="-1">Informer 机制 <a class="header-anchor" href="#informer-机制" aria-label="Permalink to &quot;Informer 机制&quot;">​</a></h3><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410121540747.png" alt=""></p><h4 id="reflector-数据同步" tabindex="-1">Reflector 数据同步 <a class="header-anchor" href="#reflector-数据同步" aria-label="Permalink to &quot;Reflector 数据同步&quot;">​</a></h4><p>Reflector 的主要职责是从 kube-apiserver 拉取并持续监听（<a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/reflector.go#L348" target="_blank" rel="noreferrer">ListAndWatch</a>） 相关资源类型的增删改 （Added/Updated/Deleted）事件，存储在由 DeltaFIFO 实现的本地缓存 (local store) 中，也就是 Indexer 中。</p><p>第一次拉取全量资源（目标资源类型)）后通过 <a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/reflector.go#L599" target="_blank" rel="noreferrer">syncWith</a> 函数全量替换（Replace） 到 DeltaFIFO 的 queue/items 中，之后通过持续监听 Watch(目标资源类型) 增量事件，并去重更新到 DeltaFIFO queue/items 中，等待被消费。</p><h4 id="deltafifo-操作队列" tabindex="-1">DeltaFIFO 操作队列 <a class="header-anchor" href="#deltafifo-操作队列" aria-label="Permalink to &quot;DeltaFIFO 操作队列&quot;">​</a></h4><p><a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/delta_fifo.go#L101" target="_blank" rel="noreferrer">DeltaFIFO</a> 在 Reflector 内部，它作为远端（API Server）和本地（Indexer、Listener）之间的传输桥梁。简单来说，它是一个生产者消费者队列，记录了资源对象的变化过程，拥有 FIFO 的特性，操作的资源对象为 Delta。每一个 Delta 包含一个操作类型和操作对象。</p><h5 id="deltafifo-使用示例" tabindex="-1">DeltaFIFO 使用示例 <a class="header-anchor" href="#deltafifo-使用示例" aria-label="Permalink to &quot;DeltaFIFO 使用示例&quot;">​</a></h5><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k8s.io/client-go/tools/cache</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k8s.io/klog/v2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> pod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Name  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> newPod</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float64</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) pod {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pod{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		Name:  name,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		Value: v,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> podKeyFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj.(pod).Name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 可以自定义 KeyFunc，默认使用 MetaNamespaceKeyFunc 生成的结果（&lt;namespace&gt;/&lt;name&gt;）作为 DeltaFIFO 的 key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cache.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewDeltaFIFOWithOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cache.DeltaFIFOOptions{KeyFunction: podKeyFunc})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> newPod</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> newPod</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> newPod</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	df.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	df.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	df.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod3)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod1.Value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	df.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	df.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	df.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, isInInitialList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _, delta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj.(cache.Deltas) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			klog.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Infof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;delta type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">, delta object: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, delta.Type, delta.Object)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 运行程序输出结果如下，只可以取到最新的对象 pod1，旧值需要去 Indexer 里取</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// I1012 12:03:54.863048    1437 deltafifo.go:38] delta type: Added, delta object: {pod1 %!s(float64=1)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// I1012 12:03:54.863415    1437 deltafifo.go:38] delta type: Updated, delta object: {pod1 %!s(float64=1.1)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// I1012 12:03:54.863429    1437 deltafifo.go:38] delta type: Deleted, delta object: {pod1 %!s(float64=1.1)}</span></span></code></pre></div><h5 id="deltafifo-结构" tabindex="-1">DeltaFIFO 结构 <a class="header-anchor" href="#deltafifo-结构" aria-label="Permalink to &quot;DeltaFIFO 结构&quot;">​</a></h5><p>DeltaFIFO 结构中的主要字段如下：</p><ul><li><code>items</code>：用于存储资源对象的 Delta，key 为资源对象的 key，value 为 Delta。</li><li><code>queue</code>：用于存储资源对象的 key，保证资源对象的顺序。由于 map 是无序的，所以需要 <code>queue</code> 来保证资源对象的顺序。与 <code>items</code> 中的 key 一一对应（正常情况下 <code>queue</code> 与<code> items</code> 数量不多不少，刚好对应）。</li><li><code>keyFunc</code>：生成资源对象的 key 的方法。默认使用 <code>MetaNamespaceKeyFunc</code> 方法，生成的 key 为 <code>namespace/name</code>，如果资源对象没有 namespace，则 key 为 <code>name</code>。</li><li><code>KnownObjects</code>：knownObjects 就是 Indexer，里面存有已知全部的对象。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> DeltaFIFO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// lock/cond protects access to &#39;items&#39; and &#39;queue&#39;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	lock sync.RWMutex</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	cond sync.Cond</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// \`items\` maps a key to a Deltas.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Each such Deltas has at least one Delta.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]Deltas</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// \`queue\` maintains FIFO order of keys for consumption in Pop().</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// There are no duplicates in \`queue\`.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// A key is in \`queue\` if and only if it is in \`items\`.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	queue []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// populated is true if the first batch of items inserted by Replace() has been populated</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// or Delete/Add/Update/AddIfNotPresent was called first.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	populated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// initialPopulationCount is the number of items inserted by the first call of Replace()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	initialPopulationCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// keyFunc is used to make the key used for queued item</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// insertion and retrieval, and should be deterministic.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	keyFunc KeyFunc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// knownObjects list keys that are &quot;known&quot; --- affecting Delete(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Replace(), and Resync()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	knownObjects KeyListerGetter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Used to indicate a queue is closed so a control loop can exit when a queue is empty.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Currently, not used to gate any of CRUD operations.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	closed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// emitDeltaTypeReplaced is whether to emit the Replaced or Sync</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// DeltaType when Replace() is called (to preserve backwards compat).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	emitDeltaTypeReplaced </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Called with every object if non-nil.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	transformer TransformFunc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>每个 <a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/delta_fifo.go#L184" target="_blank" rel="noreferrer">Delta</a> 的结构如下，其中包含 Type（操作类型）和 Object（操作对象，例如 Pod）两个字段：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Delta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Type   DeltaType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>Type 的类型如下：</p><ul><li>Added ：增加</li><li>Updated：更新</li><li>Deleted：删除</li><li>Replaced：重新 list（relist），这个状态是由于 watch event 出错，导致需要进行 relist 来进行全盘同步。需要设置 <code>EmitDeltaTypeReplaced=true</code> 才能显示这个状态，否为默认为 Sync。</li><li>Sync：本地同步</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Added   DeltaType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Added&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Updated DeltaType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Updated&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Deleted DeltaType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Deleted&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Replaced is emitted when we encountered watch errors and had to do a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// relist. We don&#39;t know if the replaced object has changed.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// NOTE: Previous versions of DeltaFIFO would use Sync for Replace events</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// as well. Hence, Replaced is only emitted when the option</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// EmitDeltaTypeReplaced is true.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Replaced DeltaType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Replaced&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Sync is for synthetic events during a periodic resync.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Sync DeltaType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Sync&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>下面可视化 DeltaFIFO 中最主要的两个存储结构 <code>queue</code> 和 <code>items</code>。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410121535401.png" alt=""></p><p>DeltaFIFO 的职责是通过队列加锁处理（queueActionLocked）、去重（dedupDeltas）、存储在由 DeltaFIFO 实现的本地存储（Indexer） 中，包括 queue （仅存 objKeys） 和 items（存 objKeys 和对应的 Deltas 增量变化），并通过 Pop 不断消费，通过 Process（item）处理相关逻辑。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410121540719.png" alt=""></p><h5 id="为什么使用-deltafifo-而不是直接使用一个-fifo" tabindex="-1">为什么使用 DeltaFIFO，而不是直接使用一个 FIFO？ <a class="header-anchor" href="#为什么使用-deltafifo-而不是直接使用一个-fifo" aria-label="Permalink to &quot;为什么使用 DeltaFIFO，而不是直接使用一个 FIFO？&quot;">​</a></h5><p>最重要的就是合并请求。也就是在 queue 中的 key 被不断 Pop 处理的过程中，会有大量同一个 Obj 的请求到来，这些请求可能散布在整个请求流中，也即是不是连续的。比如下面的例子：在 7 次请求中，包含 4 次对 Obj1 的请求，请求顺序如下：1-&gt;20-&gt;1-&gt;1-&gt;3-&gt;5-&gt;1，如果直接使用 FIFO，那么在处理完第一个 Obj1 之后，需要处理 Obj20，之后又需要处理 Obj1 的请求，后续同理，这样对 Obj 1 重复多次做了处理，这不是我们希望的。所以在 DeltaFIFO 中，我们将这一时间段内对同一个 Obj 的请求都合并为 Deltas，每一次的请求作为其中的一个 Delta。这里的一段时间指的是这个 Obj 对应的 key 入队列 queue 开始到出队列的这段时间内。</p><p>参考资料：</p><ul><li><a href="https://github.com/k8s-club/k8s-club/blob/main/articles/Informer%E6%9C%BA%E5%88%B6%20-%20DeltaFIFO.md" target="_blank" rel="noreferrer">articles/Informer机制 - DeltaFIFO.md</a></li><li><a href="https://github.com/k8s-club/k8s-club/blob/main/articles/K8s%20%E7%B3%BB%E5%88%97(%E5%9B%9B)%20-%20%E6%B5%85%E8%B0%88%20Informer.md" target="_blank" rel="noreferrer">articles/K8s 系列(四) - 浅谈 Informer.md</a></li></ul><h4 id="indexer-资源缓存" tabindex="-1">Indexer 资源缓存 <a class="header-anchor" href="#indexer-资源缓存" aria-label="Permalink to &quot;Indexer 资源缓存&quot;">​</a></h4><p>Indexer 是 client-go 用来存储资源对象并自带索引功能的本地存储，Reflector 从 DeltaFIFO 中将消费出来的资源对象存储至 Indexer。Indexer 中的数据与 etcd 集群中的数据保持完全一致。client-go 可以很方便地从本地存储中读取相应的资源对象数据，而无须每次都从远程 etcd 集群中读取，这样可以减轻 kube-apiserver 和 etcd 集群的压力。</p><h5 id="indexer-使用示例" tabindex="-1">Indexer 使用示例 <a class="header-anchor" href="#indexer-使用示例" aria-label="Permalink to &quot;Indexer 使用示例&quot;">​</a></h5><p>Indexer 的使用示例如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">	v1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k8s.io/api/core/v1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k8s.io/apimachinery/pkg/api/meta</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">	metav1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k8s.io/apimachinery/pkg/apis/meta/v1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k8s.io/client-go/tools/cache</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	NamespaceIndexName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;namespace&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	NodeNameIndexName  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;nodeName&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NamespaceIndexFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	m, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> meta.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Accessor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Errorf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object has no meta: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{m.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GetNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NodeNameIndexFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod, ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">v1.Pod)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ok {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{pod.Spec.NodeName}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 对象的 objKey 由 MetaNamespaceKeyFunc 函数生成</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 另外自定义了两个 IndexFunc 的 NamespaceIndexFunc 和 NodeNameIndexFunc，分别根据资源对象的命名空间和节点名称生成索引值列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cache.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewIndexer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cache.MetaNamespaceKeyFunc, cache.Indexers{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		NamespaceIndexName: NamespaceIndexFunc,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		NodeNameIndexName:  NodeNameIndexFunc,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">v1.Pod{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		ObjectMeta: metav1.ObjectMeta{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			Name:      </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			Namespace: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		Spec: v1.PodSpec{NodeName: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;node1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">v1.Pod{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		ObjectMeta: metav1.ObjectMeta{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			Name:      </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			Namespace: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		Spec: v1.PodSpec{NodeName: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;node2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pod3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">v1.Pod{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		ObjectMeta: metav1.ObjectMeta{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			Name:      </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			Namespace: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kube-system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		Spec: v1.PodSpec{NodeName: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;node2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod3)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// ByIndex 两个参数：IndexName（索引器名称）和 indexKey（需要检索的key）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;=========== NamespaceIndexFunc ==============&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pods, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ByIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(NamespaceIndexName, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _, pod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pods {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">v1.Pod).Name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;=========== NodeNameIndexFunc ==============&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	pods, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ByIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(NodeNameIndexName, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;node2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _, pod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pods {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pod.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">v1.Pod).Name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;=========== MetaNamespaceKeyFunc ===============&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 直接通过 &lt;namespace&gt;/&lt;name&gt; 的 key 来获取对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	obj, _, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GetByKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default/pod-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">v1.Pod).Name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出结果为：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//=========== NamespaceIndexFunc ==============</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//pod-1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//pod-2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//=========== NodeNameIndexFunc ==============</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//pod-3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//pod-2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//=========== MetaNamespaceKeyFunc ===============</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//pod-2</span></span></code></pre></div><p>在上面的示例中首先通过 <code>NewIndexer</code> 函数实例化 Indexer 对象，第一个参数就是用于计算资源对象键的函数，这里我们使用的是 <code>MetaNamespaceKeyFunc</code> 这个默认的对象键函数；第二个参数是 Indexers，里面包含了我们自定义的两个 IndexFunc：<code>NamespaceIndexFunc</code> 与 <code>NodeNameIndexFunc</code>，一个根据资源对象的命名空间来进行索引，一个根据资源对象所在的节点进行索引。</p><p>然后定义了 3 个 Pod，前两个在 default 命名空间下面，另外一个在 kube-system 命名空间下面，然后通过 <code>index.Add</code> 函数添加这 3 个 Pod 资源对象。然后通过 <code>index.ByIndex</code> 函数查询在名为 namespace 的 Index 下面匹配 IndexedValue 为 default 的 Pod 列表。也就是查询 default 这个命名空间下面的所有 Pod，这里就是前两个定义的 Pod。</p><h5 id="indexfunc-index-indexers-和-indices" tabindex="-1">IndexFunc, Index, Indexers 和 Indices <a class="header-anchor" href="#indexfunc-index-indexers-和-indices" aria-label="Permalink to &quot;IndexFunc, Index, Indexers 和 Indices&quot;">​</a></h5><p>Indexer 中有几个非常重要的概念：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// IndexFunc knows how to compute the set of indexed values for an object.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IndexFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Index maps the indexed value to a set of keys in the store that match on that value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]sets.String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Indexers maps a name to an IndexFunc</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Indexers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]IndexFunc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Indices maps a name to an Index</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Indices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]Index</span></span></code></pre></div><ul><li>IndexFunc 用于计算一个资源对象的索引值列表，上面示例是指定创建 &quot;namespace&quot; 和 &quot;nodeName&quot; 2 个索引，当然我们也可以根据需求定义其他的，比如根据 Label 标签、Annotation 等属性来生成索引值列表。</li><li>Index 是实际的索引，key 是 <a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/index.go#L44" target="_blank" rel="noreferrer">indexedValue</a>（在 &quot;namespace&quot; 索引中有两个 indexedValue：default, kube-system），value 是 objKey（默认使用 MetaNamespaceKeyFunc 函数计算，例如 default/pod-1, kube-system/pod-3） ，对于上面的示例，我们要查找某个命名空间下面的 Pod，那就要让 Pod 按照其命名空间进行索引，对应的 Index 类型就是 map[namespace]sets.pod。</li><li>Indexers 用于查找 IndexFunc，key 为 <a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/index.go#L40" target="_blank" rel="noreferrer">indexName</a>（例如 &quot;namespace&quot;），value 为 indexName 对应的 IndexFunc，上面的示例就是 map[&quot;namespace&quot;]MetaNamespaceIndexFunc。</li><li>Indices：用于查找 Index，key 为 indexName, value 为 indexName 对应的 Index，对于上面的示例就是 map[&quot;namespace&quot;]map[namespace]sets.pod。</li></ul><p>按照上面的理解我们可以得到上面示例的索引数据如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Indexers 包含了所有的 IndexFunc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Indexers: {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;namespace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">NamespaceIndexFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// IndexFunc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;nodeName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">NodeNameIndexFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// IndexFunc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Indices 包含了所有的 Index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Indices: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;"> &quot;namespace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Index</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Index 中的一条记录，key 是 IndexedValue，value 是 objKey</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;kube-system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;"> &quot;nodeName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Index</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;node1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;node2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pod-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410121933684.png" alt=""></p><p>对于 Kubernetes 资源对象的新增操作来说，其建立索引并存储的过程如下：</p><ul><li>1.将新增的对象存储到 <a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/thread_safe_store.go#L240" target="_blank" rel="noreferrer">threadSafeMap 的 items</a> 中，key 是 对象的 objKey（默认使用 MetaNamespaceKeyFunc 函数计算），value 为对象本身。</li><li>2.<a href="https://github.com/kubernetes/client-go/blob/v0.28.3/tools/cache/thread_safe_store.go#L146" target="_blank" rel="noreferrer">遍历 Indexers 中的 indexFunc 列表</a>，为新增的对象应用所有的 indexFunc 函数计算出不同 Index 下的 indexedValue。例如，假设我们设置了 <code>NamespaceIndexFunc</code> 和 <code>NodeNameIndexFunc</code> 两个 indexFunc 函数，那么对于新增的 pod-4 对象，在 Index <code>namespace</code> 下的 indexedValue 为 <code>default</code>，在 Index <code>nodeName</code> 下的 indexedValue 为 <code>node-1</code>。</li><li>3.<a href="https://github.com/kubernetes/client-go/blob/v0.28.3/tools/cache/thread_safe_store.go#L165" target="_blank" rel="noreferrer">根据 IndexName 在 Indices 中找到对应的 Index</a>，将新增的对象 objKey 添加到 Index 中。</li></ul><h5 id="indexer-接口实现" tabindex="-1">Indexer 接口实现 <a class="header-anchor" href="#indexer-接口实现" aria-label="Permalink to &quot;Indexer 接口实现&quot;">​</a></h5><p><a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/index.go#L35" target="_blank" rel="noreferrer">Indexer</a> 定义了两方面的接口：</p><ul><li>第一类为存储类型的接口 <code>Store</code>，包含了 <code>Add</code>、<code>Update</code>、<code>Delete</code>、<code>List</code>、<code>ListKeys</code>、<code>Get</code>、<code>GetByKey</code>、<code>Replace</code>、<code>Resync</code> 等数据存储、读取的常规操作。</li><li>第二类为索引类型的接口，(方法名中包含 Index)。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Indexer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Store</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Index returns the stored objects whose set of indexed values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// intersects the set of indexed values of the given object, for</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// the named index</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// IndexKeys returns the storage keys of the stored objects whose</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// set of indexed values for the named index includes the given</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// indexed value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	IndexKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexName, indexedValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// ListIndexFuncValues returns all the indexed values of the given index</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ListIndexFuncValues</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// ByIndex returns the stored objects whose set of indexed values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// for the named index includes the given indexed value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ByIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexName, indexedValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// GetIndexers return the indexers</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	GetIndexers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() Indexers</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// AddIndexers adds more indexers to this store.  If you call this after you already have data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// in the store, the results are undefined.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	AddIndexers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newIndexers Indexers) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><a href="https://github.com/kubernetes/client-go/blob/64f5574f09ee34521c63013855fb2eaac853012a/tools/cache/store.go#L158" target="_blank" rel="noreferrer">cache</a> 实现了 Indexer 接口，内部定义了 ThreadSafeStore 接口类型的 cacheStorage，用来实现基于索引的本地存储。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// \`*cache\` implements Indexer in terms of a ThreadSafeStore and an</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// associated KeyFunc.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// ThreadSafeStore由 threadSafeMap 实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	cacheStorage ThreadSafeStore</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//默认使用 MetaNamespaceKeyFunc 也即是 key 为namespace/name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	keyFunc KeyFunc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/thread_safe_store.go#L41" target="_blank" rel="noreferrer">ThreadSafeStore</a> 接口定义了常规的存储、读取、更新接口，以及对于索引的一些接口。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ThreadSafeStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, exists </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ListKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	IndexKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexName, indexedValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ListIndexFuncValues</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ByIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexName, indexedValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	GetIndexers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() Indexers</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// AddIndexers adds more indexers to this store. This supports adding indexes after the store already has items.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	AddIndexers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newIndexers Indexers) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Resync is a no-op and is deprecated</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Resync</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/thread_safe_store.go#L224" target="_blank" rel="noreferrer">threadSafeMap</a> 实现了 ThreadSafeStore 接口，此处为真正实现 local store (Indexer) 的地方，通过 <code>items</code> 来存储数据、indexers 来存储索引方法、indices 来存储索引，实现基于索引的存储。并实现了实现了 ThreadSafeStore 的所有接口。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// threadSafeMap implements ThreadSafeStore</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> threadSafeMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	lock  sync.RWMutex</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// index implements the indexing functionality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">storeIndex</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>参考资料：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1692517" target="_blank" rel="noreferrer">client-go 之 Indexer 的理解</a></li><li><a href="https://www.bilibili.com/video/BV1AG411b72E/?spm_id_from=333.788&amp;vd_source=1c0f4059dae237b29416579c3a5d326e" target="_blank" rel="noreferrer">Client-Go 之 Indexer 原理分析及示例演示</a></li><li><a href="https://cloud.tencent.com/developer/article/2144571" target="_blank" rel="noreferrer">K8s源码分析(23)-indexer及index和indices组件</a></li><li><a href="https://github.com/k8s-club/k8s-club/blob/main/articles/Informer%E6%9C%BA%E5%88%B6%20-%20Indexer.md#%E9%87%8D%E7%82%B9%E6%A6%82%E5%BF%B5" target="_blank" rel="noreferrer">k8s-club/articles/Informer机制 - Indexer.md</a></li><li><a href="https://github.com/rfyiamcool/notes/blob/main/kubernetes_client_go_informer.md" target="_blank" rel="noreferrer">深入源码分析 kubernetes client-go list-watch 和 informer 机制的实现原理</a></li><li>深入理解 Kubernetes 源码 P227</li></ul><h4 id="processor-资源处理" tabindex="-1">Processor 资源处理 <a class="header-anchor" href="#processor-资源处理" aria-label="Permalink to &quot;Processor 资源处理&quot;">​</a></h4><p>从 DeltaFIFO 中推送的资源对象的操作记录，除了交由 Indexer 存储至本地缓存，还会一并推送给 processor，最终交由 Informer 机制的使用方处理。</p><h4 id="workqueue-工作队列" tabindex="-1">Workqueue 工作队列 <a class="header-anchor" href="#workqueue-工作队列" aria-label="Permalink to &quot;Workqueue 工作队列&quot;">​</a></h4><p>workqueue 支持 3 种队列，并且提供了 3 种接口，不同队列实现可应对不同的使用场景。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410131142640.png" alt=""></p><ul><li><a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/queue.go#L26-L34" target="_blank" rel="noreferrer">Interface</a>：FIFO 通用队列接口，先进先出队列，并且支持去重机制。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, shutdown </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ShutDown</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ShutDownWithDrain</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	ShuttingDown</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li><a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/delaying_queue.go#L28-L34" target="_blank" rel="noreferrer">DelayingInterface</a>：延迟队列接口，基于 <a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/queue.go#L26-L34" target="_blank" rel="noreferrer">Interface</a> 接口封装，<code>AddAfter</code> 方法允许延迟一段时间后再将元素插入队列。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// DelayingInterface is an Interface that can Add an item at a later time. This makes it easier to</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// requeue items after failures without ending up in a hot-loop.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> DelayingInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Interface</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// AddAfter adds an item to the workqueue after the indicated duration has passed</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	AddAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, duration time.Duration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li><a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/rate_limiting_queue.go#L19-L33" target="_blank" rel="noreferrer">RateLimitingInterface</a>：限速队列接口，基于 <a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/delaying_queue.go#L28-L34" target="_blank" rel="noreferrer">DelayingInterface</a> 接口封装，支持在将元素插入队列时进行速率限制。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// RateLimitingInterface is an interface that rate limits items being added to the queue.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> RateLimitingInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	DelayingInterface</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// AddRateLimited adds an item to the workqueue after the rate limiter says it&#39;s ok</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	AddRateLimited</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Forget indicates that an item is finished being retried.  Doesn&#39;t matter whether it&#39;s for perm failing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// or for success, we&#39;ll stop the rate limiter from tracking it.  This only clears the \`rateLimiter\`, you</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// still have to call \`Done\` on the queue.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Forget</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// NumRequeues returns back how many times the item was requeued</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	NumRequeues</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h5 id="fifo-通用队列实现" tabindex="-1">FIFO 通用队列实现 <a class="header-anchor" href="#fifo-通用队列实现" aria-label="Permalink to &quot;FIFO 通用队列实现&quot;">​</a></h5><p>FIFO 通用队列数据结构中最主要的字段有 <code>queue</code>、<code>dirty</code>、<code>processing</code>，通过这个 <code>dirty</code> 和 <code>processing</code> 两个字段实现了去重的功能。</p><ul><li><code>queue</code> 用来实现顺序存储元素的, 其结构为 slice 切片类型, 元素类型为 interface{} 任意类型。<code>queue</code> 读写流程为读 slice 的头部, 写 slice 的尾部。 <code>queue</code> 是 FIFO 先进先出的设计。</li><li><code>dirty</code> 是用来实现去重的，主要是为了避免重复消费元素。当添加元素时（不管元素是待处理，还是正常被处理），如果 <code>dirty</code> 中已含有该元素则直接返回。</li><li><code>processing</code> 也是用来去重的，用于标记一个元素是否正在被处理，其主要是为了避免元素被并发处理。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Type is a work queue (see the package comment).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// queue defines the order in which we will work on items. Every</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// element of queue should be in the dirty set and not in the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// processing set.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	queue []t</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// dirty defines all of the items that need to be processed.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	dirty set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Things that are currently being processed are in the processing set.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// These things may be simultaneously in the dirty set. When we finish</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// processing something and remove it from this set, we&#39;ll check if</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// it&#39;s in the dirty set, and if so, add it to the queue.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	processing set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	cond </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sync.Cond</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	shuttingDown </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	drain        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	metrics queueMetrics</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	unfinishedWorkUpdatePeriod time.Duration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	clock                      clock.WithTicker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h6 id="fifo-通用队列存储过程" tabindex="-1">FIFO 通用队列存储过程 <a class="header-anchor" href="#fifo-通用队列存储过程" aria-label="Permalink to &quot;FIFO 通用队列存储过程&quot;">​</a></h6><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410131435502.png" alt=""></p><p>例如上图所示为 FIFO 的存储过程，通过 <code>Add</code> 方法向 FIFO 队列中分别插入 1，2，3 这 3 个元素，此时队列中的 <code>queue</code> 和 <code>dirty</code> 字段分别存有 1，2，3 元素，<code>processing</code> 字段为空。</p><p>然后通过 <code>Get</code> 方法获取最先进入的元素（元素1），此时队列中的 <code>queue</code> 和 <code>dirty</code> 字段分别存有 2，3；元素 1 被放入 <code>processing</code> 字段中，说明它正在被处理。最后处理完元素 1 时，通过 <code>Done</code> 方法将其标记为处理完成，此时队列中的 <code>processing</code> 字段中的 1 元素被删除。</p><h6 id="fifo-通用队列并发存储过程" tabindex="-1">FIFO 通用队列并发存储过程 <a class="header-anchor" href="#fifo-通用队列并发存储过程" aria-label="Permalink to &quot;FIFO 通用队列并发存储过程&quot;">​</a></h6><p>但是在并发存储下，如何保证处理一个元素之前哪怕被添加多次，也只是处理一次？下图为 FIFO 并发存储的过程。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410131438514.png" alt=""></p><p>在并发场景下，goroutine A 通过 <code>Get</code> 方法获取元素 1，元素 1 被添加到 <code>processing</code> 字段中，同一时间，goroutine B 通过 <code>Add</code> 方法插入另一个 1 元素，此时在 <code>processing</code> 字段中已经存在相同的元素，所以后面后面的元素 1 不会被直接插入到 <code>queue</code> 字段中，而是存入 <code>dirty</code> 字段中；在 goroutine A 通过 <code>Done</code> 方法标记处理完元素 1 后，如果 <code>dirty</code> 字段中存有元素 1，则将其追加到 <code>queue</code> 字段的尾部，<code>dirty</code> 和 <code>processing</code> 字段都是 HashMap 数据结构实现的，不考虑无序，只考虑去重。</p><h6 id="fifo-通用队列主要方法" tabindex="-1">FIFO 通用队列主要方法 <a class="header-anchor" href="#fifo-通用队列主要方法" aria-label="Permalink to &quot;FIFO 通用队列主要方法&quot;">​</a></h6><p><code>Add()</code> 是将元素插入到队列的方法。插入元素的流程原理如下：</p><ul><li>判断 <code>dirty</code> 是否存在该元素，如存在则直接跳出，其目的是为了实现待处理元素的去重效果。</li><li>然后在 <code>dirty</code> 里添加元素，再判断 <code>processing</code> 集合是否存在元素，如果存在则跳出。其目的是为了防止同一个元素被并发处理。</li><li>在 <code>processing</code> 集合里加入元素。</li><li>使用 cond signal 唤醒其他陷入阻塞的协程。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Type) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 加锁保证并发安全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.cond.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.cond.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 已关闭直接退出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.shuttingDown {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果 dirty 已存在，则直接退出，dirty 是为了实现待消费元素的去重。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.dirty.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 增加 add 的指标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.metrics.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 每次 add 的元素也要放到 dirty 集合里，为了去重效果。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.dirty.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果这个元素正在处理, 那么在把元素放到 dirty 后就完事了。后面由 Done 方法来处理 dirty -&gt; queue 的逻辑。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.processing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 把元素放到队列里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(q.queue, item)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 通知等待的协程处理任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.cond.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Signal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><code>Get()</code> 是获取元素的方法，从队列的头部获取最先入队的元素。然后在 <code>processing</code> 集合中添加元素，其目的就是为了防止同一个元素对象被并发处理。最后从 <code>dirty</code> 集合里删除对象，因为 <code>dirty</code> 是为了实现的待消费去重，既然从 <code>queue</code> 拿走元素，<code>dirty</code> 也需要删除。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Type) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}, shutdown </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 线程安全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.cond.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.cond.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果队列为空则陷入 cond 等待</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(q.queue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">q.shuttingDown {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        q.cond.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果关闭了且队列为空，直接 return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(q.queue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 从头部获取元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.queue[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.queue[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 重新引用切片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.queue[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 统计 metrics get 指标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.metrics.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 从 dirty set 里去除，加到 processing 集合里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.processing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.dirty.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><code>Done()</code> 用来标记某元素已经处理完，可以从 <code>processing</code> 集合中去除，然后判断 <code>dirty</code> 集合中是否有该对象，如果存在则把该对象推到 <code>queue</code> 里再次入队。</p><p>如果一个元素正在被处理，这时候如果再次添加同一个元素，由于该元素还在处理未完成，只能把对象放到 <code>dirty</code> 里。为什么不放到 <code>queue</code> 里？因为放 <code>queue</code> 里的话，在并发消费场景下，同一个元素会被多个协程并发处理。当执行完毕调用 <code>Done()</code> 时，会把 <code>dirty</code> 的任务重新入队，起到了排队的效果。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Type) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 线程安全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.cond.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    defer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.cond.L.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 统计 metrics done 指标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.metrics.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 从 processing 集合中剔除</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    q.processing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果 dirty 还有，那么把该元素加到 queue 队列里</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.dirty.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        q.queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(q.queue, item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        q.cond.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Signal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.processing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        q.cond.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Signal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>FIFO 通用队列的使用示例可以在这里找到：<a href="https://github.com/cr7258/hands-on-lab/blob/main/client-go/workqueue/workqueue.go" target="_blank" rel="noreferrer">workqueue.go</a></p><h5 id="延迟队列" tabindex="-1">延迟队列 <a class="header-anchor" href="#延迟队列" aria-label="Permalink to &quot;延迟队列&quot;">​</a></h5><p>延迟队列是基于 FIFO 队列接口封装的，在原有功能上增加了 <code>AddAfter</code> 方法，其原理是延迟一段时间后再将元素插入 FIFO 队列。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// delayingType wraps an Interface and provides delayed re-enquing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> delayingType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Interface</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// clock tracks time for delayed firing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	clock clock.Clock</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// stopCh lets us signal a shutdown to the waiting loop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	stopCh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// stopOnce guarantees we only signal shutdown a single time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	stopOnce sync.Once</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// heartbeat ensures we wait no more than maxWait before firing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	heartbeat clock.Ticker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// waitingForAddCh is a buffered channel that feeds waitingForAdd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	waitingForAddCh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">waitFor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// metrics counts the number of retries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	metrics retryMetrics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><code>delayingType</code> 结构中最主要的字段是 <code>waitingForAddCh</code>，其默认初始大小为 1000，在通过 <code>AddAfter</code> 方法插入元素时，是非阻塞状态的，只有当插入的元素大于或等于 1000 时，延迟队列才会处于阻塞状态。<code>waitingForAddCh</code> 字段中的数据通过 goroutine 运行的 <a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/delaying_queue.go#L189" target="_blank" rel="noreferrer">waitingLoop</a> 函数持久运行。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410132109043.png" alt=""></p><p>如上图所示，将元素 1 插入 <code>waitingForAddCh</code> 字段中，通过 <code>waitingLoop</code> 函数消费元素数据。当元素的处理时间 <code>readyAt</code> 大于当前时间，说明需要延迟将元素插入 FIFO 通用队列，此时将该元素放入优先队列（<code>waitForPriorityQueue</code>）中。当元素处理时间小于或等于当前时间时，说明该元素需要立即处理，此时将元素直接插入 FIFO 通用队列。此外，<code>waitingLoop</code> 函数还会不断遍历优先队列中的元素，将已经达到处理时间的元素插入 FIFO 通用队列。</p><p>延迟队列的使用示例可以在这里找到：<a href="https://github.com/cr7258/hands-on-lab/blob/main/client-go/workqueue/delayworkqueue.go" target="_blank" rel="noreferrer">delayworkqueue.go</a></p><h5 id="限速队列" tabindex="-1">限速队列 <a class="header-anchor" href="#限速队列" aria-label="Permalink to &quot;限速队列&quot;">​</a></h5><p>限速对列是基于延迟队列和 FIFO 队列接口封装，限速队列接口（<a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/rate_limiting_queue.go#L20" target="_blank" rel="noreferrer">RateLimitingInterface</a>）在原有功能上增加了 <code>AddRateLimited</code>、<code>Forget</code>、<code>NumRequeues</code> 方法。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// RateLimitingInterface is an interface that rate limits items being added to the queue.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> RateLimitingInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	DelayingInterface</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// AddRateLimited adds an item to the workqueue after the rate limiter says it&#39;s ok</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	AddRateLimited</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Forget indicates that an item is finished being retried.  Doesn&#39;t matter whether it&#39;s for perm failing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// or for success, we&#39;ll stop the rate limiter from tracking it.  This only clears the \`rateLimiter\`, you</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// still have to call \`Done\` on the queue.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Forget</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// NumRequeues returns back how many times the item was requeued</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	NumRequeues</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在创建限速队列时，可以传入不同的限速器 <a href="https://github.com/kubernetes/client-go/blob/release-1.25/util/workqueue/default_rate_limiters.go#L27" target="_blank" rel="noreferrer">RateLimiter</a> 实现，官方提供 4 种限速器，分别应对不同的场景，包括令牌桶算法（BucketRateLimiter）、排队指数算法（ItemExponentialFailureRateLimiter）、计数器算法（ItemFastSlowRateLimiter）和混合算法（MaxOfRateLimiter）。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> RateLimiter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// When gets an item and gets to decide how long that item should wait</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	When</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) time.Duration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// Forget indicates that an item is finished being retried.  Doesn&#39;t matter whether it&#39;s for failing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// or for success, we&#39;ll stop tracking it</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	Forget</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// NumRequeues returns back how many failures the item has had</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	NumRequeues</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>其中 <code>MaxOfRateLimiter</code> 实例化时可以传入多个 RateLimiter 限速器实例，使用 <code>When()</code> 求等待间隔时，然后选择最大的等待间隔。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 我们定义了一个复合的限速器，它结合了两种限速策略：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1. 使用指数退避的限速器，用于限制每个任务的重试频率</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2. 使用令牌桶算法限制总体速率，这里设置为每秒 5 个请求。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// MaxOfRateLimiter 会遍历所有的 RateLimiter 示例，使用 When() 计算等待间隔，然后选择最大的等待间隔。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">limiter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workqueue.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewMaxOfRateLimiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    workqueue.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewItemExponentialFailureRateLimiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(time.Millisecond, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">time.Millisecond),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">workqueue.BucketRateLimiter{Limiter: rate.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewLimiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rate.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Limit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>限速队列的使用示例可以在这里找到：<a href="https://github.com/cr7258/hands-on-lab/blob/main/client-go/workqueue/ratelimitworkqueue.go" target="_blank" rel="noreferrer">ratelimitworkqueue.go</a></p><ul><li><a href="https://xiaorui.cc/archives/7363" target="_blank" rel="noreferrer">源码分析 kubernetes client-go workqueue 的实现原理</a></li><li>深入理解 Kubernetes 源码 P233 ~ P240</li></ul><h5 id="为什么-controller-不直接从-informer-中获取资源对象进行处理-而是从-workqueue-中获取对象的-objkey-进行处理" tabindex="-1">为什么 Controller 不直接从 Informer 中获取资源对象进行处理，而是从 Workqueue 中获取对象的 objKey 进行处理？ <a class="header-anchor" href="#为什么-controller-不直接从-informer-中获取资源对象进行处理-而是从-workqueue-中获取对象的-objkey-进行处理" aria-label="Permalink to &quot;为什么 Controller 不直接从 Informer 中获取资源对象进行处理，而是从 Workqueue 中获取对象的 objKey 进行处理？&quot;">​</a></h5><p>因为每个 obj 在 Kubernetes 各组件内经过 Reconcile，obj 随时都在进行变化。Informer 中对象是以 key-accumulator 方式存储，即一个 obj 随着时间的变化存在很多版本，通过取 key 间接取到最新的 obj，保证了取到的 obj 是实时最新的对象。</p><p>另外，为什么在 Controller 内使用 WorkQueue，还有以下两点考虑：</p><ul><li>避免 OOM。具体来说，是提升 Controller（Listener） 处理（接收）事件的速率，（直接放入WorkQueue，比完成复杂的 Reconcile 流程要快很多很多），这样就能避免 Informer 框架内的 processorListener 在向当前这个 Listener/Controller 派发事件时，向 pendingNotifications 中堆积过多事件，从而引发 OOM。</li><li>减少 Reconcile 次数，避免多次无意义的 Reconcile。通过 WorkQueue 内部的实现机制，能够保证在处理一个 obj 之前哪怕其被添加了多次（在短时间内大量到来等），也只会被处理一次，极大的减少了 Reconcile 的次数。同时每次 Reconcile 从 Indexer 中取最新的 obj，而不是直接使用被通知的 obj，能够避免无意义的 Reconcile。</li></ul><p>参考资料：<a href="https://github.com/k8s-club/k8s-club/blob/c742e2234a7898f6524046cd7c40ffc95e2b0f71/articles/QA%20to%20Understand%20K8s.md" target="_blank" rel="noreferrer">在掌握 K8s 路上，应该理解下面这些 QA</a></p><h4 id="resync-机制的作用是什么" tabindex="-1">Resync 机制的作用是什么？ <a class="header-anchor" href="#resync-机制的作用是什么" aria-label="Permalink to &quot;Resync 机制的作用是什么？&quot;">​</a></h4><p>resync 的目的是为了让 listener 能够定期 reconcile Indexer 内的所有事件，来保证对应事件关心的对象（可能是系统内，也可能是系统外）状态都是预期状态。如果此时 reconcile 过程中发现对象状态不是预期状态，就会驱动其向预期状态发展。</p><p>一个易理解的例子：我们实现了一个 listener，其会通过对象描述的磁盘规格（大小，类型等等）来向云服务商购买对应的磁盘。对于对象 A 而言，listener 在第一次 reconcile 对象 A 时，通过调用云服务商的接口，购买了其对应规格的磁盘，并在购买完成之后，在对象 A 的 status 中添加上了购买完成的信息，之后本轮 reconcile 就结束了。之后，用户通过云服务商控制台将磁盘误删除了，但是此时 listener 是感知不到这个操作的，并且对象 A 的 status 中一直维持着购买成功的信息，这可能会导致依赖这个 status 的程序出现意外的错误。在这种场景下，通过 resync 功能，在 listener 的同步时间到达之后，就会重新处理对象 A，此时 listener 发现控制台上并没有该磁盘，就会重新调用接口再创建一次，这样就将用户在控制台误删除的动作给修正了）</p><p>参考资料：</p><ul><li><a href="https://github.com/k8s-club/k8s-club/blob/main/articles/Informer%E6%9C%BA%E5%88%B6%20-%20Resync.md" target="_blank" rel="noreferrer">articles/Informer机制 - Resync.md</a></li></ul><h3 id="使用-informer-controller-runtime-和-kubebuilder-来编写-controller-的区别" tabindex="-1">使用 Informer，Controller runtime 和 Kubebuilder 来编写 Controller 的区别 <a class="header-anchor" href="#使用-informer-controller-runtime-和-kubebuilder-来编写-controller-的区别" aria-label="Permalink to &quot;使用 Informer，Controller runtime 和 Kubebuilder 来编写 Controller 的区别&quot;">​</a></h3><ul><li><p>直接使用 Informer：直接使用 Informer 编写 Controller 需要编写更多的代码，因为我们需要在代码处理更多的底层细节，例如如何在集群中监视资源，以及如何处理资源变化的通知。但是，使用 Informer 也可以更加自定义和灵活，因为我们可以更细粒度地控制 Controller 的行为。</p></li><li><p>Controller runtime：Controller runtime 是基于 Informer 实现的，在 Informer 之上为 Controller 编写提供了高级别的抽象和帮助类，包括 Leader Election、Event Handling 和 Reconcile Loop 等等。使用 Controller runtime，可以更容易地编写和测试 Controller，因为它已经处理了许多底层的细节。</p></li><li><p>Kubebuilder：和 Informer 及 Controller runtime 不同，Kubebuilder 并不是一个代码库，而是一个开发框架。Kubebuilder 底层使用了 controller-runtime。Kubebuilder 提供了 CRD 生成器和代码生成器等工具，可以帮助开发者自动生成一些重复性的代码和资源定义，提高开发效率。同时，Kubebuilder 还可以生成 Webhooks，以用于验证自定义资源。</p></li></ul><p>参考资料：<a href="https://www.zhaohuabing.com/post/2023-03-09-how-to-create-a-k8s-controller/" target="_blank" rel="noreferrer">Kubernetes Controller 机制详解（一）：Kubernetes API List/Watch 机制 与 Informer 客户端库</a></p><h2 id="controller-runtime" tabindex="-1">Controller-Runtime <a class="header-anchor" href="#controller-runtime" aria-label="Permalink to &quot;Controller-Runtime&quot;">​</a></h2><h3 id="controller-runtime-的使用方法" tabindex="-1">Controller-Runtime 的使用方法 <a class="header-anchor" href="#controller-runtime-的使用方法" aria-label="Permalink to &quot;Controller-Runtime 的使用方法&quot;">​</a></h3><p>controller-runtime 的使用主要分为以下几个步骤：</p><ul><li>1.使用 <code>NewManager</code> 方法创建 Manager，Manager 主要用来启动 Controller、管理 Controller 依赖、提供集群相关资源的获取方式等。</li><li>2.通过 <code>NewControllerManagedBy(mgr)</code> 方法实例化一个 Builder 对象，其中传入的 Manager 提供创建 Controller 所需的依赖。</li><li>3.使用 <code>For</code> 方法用来指定需要 Watch 的资源类型；有时候也会用到 <code>Owns</code> 方法，表示某资源是我关心资源的从属，其 event 也会进去 Controller 的队列中；<code>Complete</code> 方法传入用户实现 Reconciler 接口的一个对象，controller-runtime 会生成相应 Controller，将用户的 Reconciler 注册进 Controller，并生成 watch 资源的默认 eventHandler，同时执行 Controller 的 watch 函数；</li><li>4.用户的 Reconciler 需要实现 reconcile.Reconciler 接口。</li><li>5.使用 <code>Start</code> 方法启动 Manager，这一步中会同时启动 Cache，即启动 Informer，以及启动 Controller。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">	api</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">github.com/zhaohuabing/k8scontrollertutorial/pkg/custom/apis/foo/v1alpha1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">	_</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">k8s.io/client-go/plugin/pkg/client/auth/gcp</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">os</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">	ctrl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sigs.k8s.io/controller-runtime</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sigs.k8s.io/controller-runtime/pkg/client</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sigs.k8s.io/controller-runtime/pkg/log</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sigs.k8s.io/controller-runtime/pkg/log/zap</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	setupLog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ctrl.Log.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WithName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;setup&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> reconciler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	client.Client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 对 foo 进行调谐的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">reconciler) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Reconcile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctx context.Context, req ctrl.Request) (ctrl.Result, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> log.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">FromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctx).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WithValues</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, req.NamespacedName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	log.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;reconciling foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foo api.Foo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctx, req.NamespacedName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">foo); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		log.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;unable to get foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ctrl.Result{}, err</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	fmt.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Sync/Add/Update for foo </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, foo.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GetName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ctrl.Result{}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	ctrl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SetLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(zap.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 创建 Manager，创建时设置 Leader Election 相关的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	mgr, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ctrl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctrl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GetConfigOrDie</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), ctrl.Options{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		LeaderElection:          </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		LeaderElectionID:        </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sample-controller&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		LeaderElectionNamespace: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kube-system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		setupLog.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;unable to start manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// in a real controller, we&#39;d create a new scheme for this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> api.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">AddToScheme</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(mgr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GetScheme</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		setupLog.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;unable to add scheme&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 创建对 foo 进行调谐的 controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ctrl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewControllerManagedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(mgr).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		For</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api.Foo{}).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		Complete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">reconciler{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			Client: mgr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GetClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		setupLog.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;unable to create controller&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 创建用于校验 foo 的 webhook</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ctrl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NewWebhookManagedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(mgr).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		For</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api.Foo{}).</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		Complete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		setupLog.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;unable to create webhook&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 启动 Manager，Manager 将启动其管理的所有 controller 以及 webhook server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	setupLog.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;starting manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mgr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ctrl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SetupSignalHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		setupLog.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(err, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;problem running manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>参考资料：</p><ul><li><a href="https://www.zhaohuabing.com/post/2023-04-04-how-to-create-a-k8s-controller-2/" target="_blank" rel="noreferrer">Kubernetes Controller 机制详解（二）</a></li><li><a href="https://mp.weixin.qq.com/s/VIBC9FudR2sdy9U7p72A-Q" target="_blank" rel="noreferrer">k8s operator开发进阶之controller-runtime源码分析</a></li><li><a href="https://cloud.tencent.com/developer/article/2352384" target="_blank" rel="noreferrer">一文读懂 K8s controller-runtime</a></li><li><a href="https://yash-kukreja-98.medium.com/develop-on-kubernetes-series-demystifying-the-for-vs-owns-vs-watches-controller-builders-in-c11ab32a046e" target="_blank" rel="noreferrer">Develop on Kubernetes Series — Demystifying the For vs Owns vs Watches controller-builders in controller-runtime</a></li></ul><h3 id="controller-runtime-的整体架构" tabindex="-1">Controller-Runtime 的整体架构 <a class="header-anchor" href="#controller-runtime-的整体架构" aria-label="Permalink to &quot;Controller-Runtime 的整体架构&quot;">​</a></h3><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232112133.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232144263.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232144616.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232145539.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232145650.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232145573.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232146634.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410232149688.png" alt=""></p><p>Builder 创建 Controller 时，会根据 <code>Build.For()</code>、<code>Build.Owns()</code>、<code>Build.Watches()</code> 方法中设置的资源对象类型在 <code>Builder.Build()</code> 中创建相应的 <code>Kind</code>，并调用 <code>Controller.Watch()</code> 方法将 <code>Kind</code> 传入 Controller。</p><p>Watch 从 Source 获取事件，并使用 Predicates 处理接收到的事件以进行过滤，并使用 EventHandler 将它们放入队列中。</p><p>参考资料：</p><ul><li><a href="https://qiankunli.github.io/2020/08/10/controller_runtime.html" target="_blank" rel="noreferrer">controller-runtime源码分析</a></li><li><a href="https://nakamasato.medium.com/kubernetes-operator-series-1-controller-runtime-aa50d1d93c5c" target="_blank" rel="noreferrer">Kubernetes Operator series 1 — controller-runtime example controller</a></li><li><a href="https://mp.weixin.qq.com/s/VIBC9FudR2sdy9U7p72A-Q" target="_blank" rel="noreferrer">k8s operator开发进阶之controller-runtime源码分析</a></li></ul>`,161)]))}const c=i(t,[["render",l]]);export{o as __pageData,c as default};
