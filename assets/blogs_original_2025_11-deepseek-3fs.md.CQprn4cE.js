import{_ as s}from"./chunks/ArticleMetadata.BGfgJEkN.js";import{_ as p,C as h,c,o as i,k as l,G as d,P as g,a as u,w as m,b as f,e as k}from"./chunks/framework.hsaHFr3N.js";import"./chunks/md5.Csn9Gkkw.js";const M=JSON.parse('{"title":"DeepSeek 开源周第五弹：3FS —— 专为 AI 训练和推理设计的分布式存储","description":"","frontmatter":{"title":"DeepSeek 开源周第五弹：3FS —— 专为 AI 训练和推理设计的分布式存储","author":"Se7en","date":"2025/02/28 21:30","categories":["AI"],"tags":["DeepSeek","AI"]},"headers":[],"relativePath":"blogs/original/2025/11-deepseek-3fs.md","filePath":"blogs/original/2025/11-deepseek-3fs.md","lastUpdated":1740749363000}'),b={name:"blogs/original/2025/11-deepseek-3fs.md"};function S(a,e,A,q,D,F){const n=s,o=h("ClientOnly");return i(),c("div",null,[e[0]||(e[0]=l("h1",{id:"deepseek-开源周第五弹-3fs-——-专为-ai-训练和推理设计的分布式存储",tabindex:"-1"},[u("DeepSeek 开源周第五弹：3FS —— 专为 AI 训练和推理设计的分布式存储 "),l("a",{class:"header-anchor",href:"#deepseek-开源周第五弹-3fs-——-专为-ai-训练和推理设计的分布式存储","aria-label":'Permalink to "DeepSeek 开源周第五弹：3FS —— 专为 AI 训练和推理设计的分布式存储"'},"​")],-1)),d(o,null,{default:m(()=>{var t,r;return[(((t=a.$frontmatter)==null?void 0:t.aside)??!0)&&(((r=a.$frontmatter)==null?void 0:r.showArticleMetadata)??!0)?(i(),f(n,{key:0,article:a.$frontmatter},null,8,["article"])):k("",!0)]}),_:1}),e[1]||(e[1]=g('<p>DeepSeek 开源周的最后一天，为我们带来了 <a href="https://github.com/deepseek-ai/3FS" target="_blank" rel="noreferrer">Fire-Flyer File System (3FS)</a>，这是一个专为 AI 训练和推理设计的高效分布式文件系统。此外，DeepSeek 还开源了基于 3FS 的数据处理框架 <a href="https://github.com/deepseek-ai/smallpond" target="_blank" rel="noreferrer">Smallpond</a>，是一款构建于 DuckDB 和 3FS 之上的轻量级数据处理框架。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502282100271.png" alt=""></p><h2 id="数据处理与存储的挑战" tabindex="-1">数据处理与存储的挑战 <a class="header-anchor" href="#数据处理与存储的挑战" aria-label="Permalink to &quot;数据处理与存储的挑战&quot;">​</a></h2><p>在 AI 训练中，数据存储和访问的效率往往是制约整体性能的关键因素。例如：</p><ul><li><strong>数据访问延迟</strong>：在分布式训练中，数据通常存储在远程服务器上，频繁的 I/O 操作会导致显著的延迟，拖慢训练速度；</li><li><strong>存储瓶颈</strong>：随着模型和数据集的规模不断增长，传统的文件系统难以应对高并发的数据访问需求；</li><li><strong>数据一致性</strong>：在分布式环境中，如何保证数据的一致性和可靠性是一个复杂的挑战。</li></ul><h2 id="_3fs-主要特性和优势" tabindex="-1">3FS 主要特性和优势 <a class="header-anchor" href="#_3fs-主要特性和优势" aria-label="Permalink to &quot;3FS 主要特性和优势&quot;">​</a></h2><p>3FS 是一款高性能分布式文件系统，专为应对 AI 训练和推理工作负载的挑战而设计。它利用现代 SSD 和 RDMA 网络，提供一个共享存储层，简化分布式应用的开发。3FS 的主要特性和优势包括：</p><h3 id="性能与易用性" tabindex="-1">性能与易用性 <a class="header-anchor" href="#性能与易用性" aria-label="Permalink to &quot;性能与易用性&quot;">​</a></h3><ul><li><strong>解耦架构</strong>：融合数千块 SSD 的吞吐能力和数百个存储节点的网络带宽，使应用能够高效地访问存储资源。</li><li><strong>强一致性</strong>：基于 <strong>CRAQ（Chain Replication with Apportioned Queries）</strong> 实现强一致性。</li><li><strong>文件接口</strong>：基于<strong>事务型键值存储（如 FoundationDB）</strong> 构建无状态元数据服务，采用通用文件接口，无需学习新的存储 API。</li></ul><h3 id="多样化工作负载" tabindex="-1">多样化工作负载 <a class="header-anchor" href="#多样化工作负载" aria-label="Permalink to &quot;多样化工作负载&quot;">​</a></h3><ul><li><strong>数据准备</strong>：将数据分析管道的输出组织为分层目录结构，并高效管理大规模中间数据。</li><li><strong>数据加载</strong>：支持跨计算节点的随机访问，无需预取或 Shuffle 数据集，提高训练效率。</li><li><strong>Checkpoint</strong>：支持大规模训练任务的高吞吐并行 Checkpoint 机制。</li><li><strong>推理 KVCache</strong>：提供比 DRAM 缓存更具性价比的方案，具备高吞吐能力，并显著提升缓存容量。</li></ul><h2 id="_3fs-的性能如何" tabindex="-1">3FS 的性能如何？ <a class="header-anchor" href="#_3fs-的性能如何" aria-label="Permalink to &quot;3FS 的性能如何？&quot;">​</a></h2><p>3FS 在高性能存储方面表现卓越，能够满足 AI 训练和推理的极端 I/O 需求，具体体现在以下几个方面：</p><h3 id="峰值吞吐量" tabindex="-1">峰值吞吐量 <a class="header-anchor" href="#峰值吞吐量" aria-label="Permalink to &quot;峰值吞吐量&quot;">​</a></h3><p>在大规模读压力测试中，3FS 集群展示了极高的吞吐能力。测试使用 180 个存储节点（每个节点配备 2×200Gbps InfiniBand NICs 和 16 块 14TiB NVMe SSD），并由 500 多个客户端节点发起并发读取请求（每个客户端配备 1×200Gbps InfiniBand NIC）。<strong>最终聚合读吞吐量达到 6.6 TiB/s</strong>，即使在 AI 训练任务带来额外背景流量的情况下，仍能保持卓越的 I/O 性能。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502282112103.png" alt=""></p><h3 id="graysort" tabindex="-1">GraySort <a class="header-anchor" href="#graysort" aria-label="Permalink to &quot;GraySort&quot;">​</a></h3><p>3FS 在 GraySort 基准测试中表现优异，该测试衡量大规模数据集的排序能力。测试采用两阶段方法：</p><ul><li>第一阶段：通过 key 的前缀位进行数据分区（Shuffle）。</li><li>第二阶段：在各个分区内执行排序。</li></ul><p>测试集群由 25 个存储节点（每个节点包含 2 个 NUMA 域，每个 NUMA 运行 1 个存储服务，2×400Gbps NICs）和 50 个计算节点（每个节点包含 2 个 NUMA 域、192 个物理核心、2.2 TiB RAM 和 1×200Gbps NIC）组成。<strong>在 8192 个分区上对 110.5 TiB 的数据进行排序在 30 分钟 14 秒内完成，平均吞吐量达到 3.66 TiB/分钟</strong>。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502282115168.png" alt=""></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502282115963.png" alt=""></p><h3 id="kvcache" tabindex="-1">KVCache <a class="header-anchor" href="#kvcache" aria-label="Permalink to &quot;KVCache&quot;">​</a></h3><p>KVCache 是一种用于优化 LLM 推理过程的技术。它通过缓存解码器层中先前 token 的键值向量来避免冗余计算。下图展示了所有 KVCache 客户端的读取吞吐量，<strong>其中峰值吞吐量高达 40 GiB/s</strong>。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202502282115584.png" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>回顾本周的发布，DeepSeek 已经构建了完整的大模型技术栈，覆盖从底层计算优化到高效存储管理的关键环节：</p><ul><li><a href="https://mp.weixin.qq.com/s/OnPI82oZcxLAMun040ylWA" target="_blank" rel="noreferrer">Day 1 - FlashMLA：高效的 MLA 解码内核，优化变长序列处理，提升推理性能。</a></li><li><a href="https://mp.weixin.qq.com/s/B-mQgiaHGw9j07jxfJ4NMA" target="_blank" rel="noreferrer">Day 2 - DeepEP：首个开源专家并行通信库，助力 MoE 模型的高效训练与推理。</a></li><li><a href="https://mp.weixin.qq.com/s/TOSaduTqDdVAeBZ7KyKhXg" target="_blank" rel="noreferrer">Day 3 - DeepGEMM：支持密集计算与 MoE 计算的 FP8 GEMM 库，优化矩阵运算效率。</a></li><li><a href="https://mp.weixin.qq.com/s/SrTnAv9BcngQTy69kpWwdQ" target="_blank" rel="noreferrer">Day 4 - 优化并行策略：包括 DualPipe 双向流水线并行算法和 EPLB 专家并行负载均衡器，提升并行计算性能。</a></li><li><strong>Day 5 - 3FS 与 Smallpond</strong>：高性能数据存储与处理基础设施，为大规模 AI 任务提供稳定支撑。</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li>deepseek-ai/3FS：<a href="https://github.com/deepseek-ai/3FS" target="_blank" rel="noreferrer">https://github.com/deepseek-ai/3FS</a></li><li>deepseek-ai/smallpond：<a href="https://github.com/deepseek-ai/smallpond" target="_blank" rel="noreferrer">https://github.com/deepseek-ai/smallpond</a></li></ul>',30))])}const P=p(b,[["render",S]]);export{M as __pageData,P as default};
