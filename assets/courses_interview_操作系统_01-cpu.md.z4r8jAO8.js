import{_ as t,o as e,c as i,R as l}from"./chunks/framework.FHZ5yb6k.js";const g=JSON.parse('{"title":"CPU","description":"","frontmatter":{"title":"CPU","author":"Se7en","categories":["Interview"],"tags":["Operating System","CPU"]},"headers":[],"relativePath":"courses/interview/操作系统/01-cpu.md","filePath":"courses/interview/操作系统/01-cpu.md","lastUpdated":1729736003000}'),a={name:"courses/interview/操作系统/01-cpu.md"},r=l('<h2 id="为什么要有-dma-技术" tabindex="-1">为什么要有 DMA 技术? <a class="header-anchor" href="#为什么要有-dma-技术" aria-label="Permalink to &quot;为什么要有 DMA 技术?&quot;">​</a></h2><p>在没有 DMA 技术前，I/O 的过程是这样的：</p><ul><li>CPU 发出对应的指令给磁盘控制器，然后返回；</li><li>磁盘控制器收到指令后，于是就开始准备数据，会把数据放入磁盘控制器的内部缓冲区中，然后产生一个中断；</li><li>CPU 收到中断信号后，停下手头的工作，接着把磁盘控制器的缓冲区的数据一次一个字节地读进自己的寄存器，然后再把寄存器里的数据写入到内存，而在数据传输期间，CPU 是无法执行其他任务的。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410231324143.png" alt=""></p><p>DMA（Direct Memory Access） 技术就是在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU 不再参与任何与数据搬运相关的事情，这样 CPU 就可以去处理别的事务了。</p><p>DMA 的具体过程如下：</p><ul><li>用户进程调用 read 方法，向操作系统发出 I/O 请求，请求读取数据到自己的内存缓冲区中，进程进入阻塞状态；</li><li>操作系统收到请求后，进一步将 I/O 请求发送给 DMA 控制器，然后让 CPU 执行其他任务；</li><li>DMA 控制器将 I/O 请求发送给磁盘；</li><li>磁盘收到 DMA 的 I/O 请求后，把数据从磁盘读取到磁盘控制器的缓冲区中，当缓冲区被读满后，向 DMA 控制器发起中断信号，告知自己的缓冲区已满；</li><li>DMA 控制器收到磁盘的信号，将磁盘控制器缓冲区中的数据拷贝到内核缓冲区中，此时不占用 CPU，CPU 可以执行其他任务。</li><li>当 DMA 控制器读取了足够多的数据，就会发送中断信号给 CPU；</li><li>CPU 收到 DMA 控制器的信号，知道数据已经准备好了，于是将数据从内核拷贝到用户空间，返回系统调用。</li></ul><p>可以看到，CPU 不再参与将数据从磁盘控制器的缓冲区搬运到内核空间的工作，这部分工作全程由 DMA 完成。但是 CPU 在这个过程中也是必不可少的，因为传输什么数据，从哪里传输到哪里，都需要 CPU 来告诉 DMA 控制器。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410231330513.png" alt=""></p><p>参考资料：</p><ul><li><a href="https://xiaolincoding.com/os/8_network_system/zero_copy.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-dma-%E6%8A%80%E6%9C%AF" target="_blank" rel="noreferrer">9.1 什么是零拷贝？</a></li></ul><h2 id="如何实现零拷贝" tabindex="-1">如何实现零拷贝？ <a class="header-anchor" href="#如何实现零拷贝" aria-label="Permalink to &quot;如何实现零拷贝？&quot;">​</a></h2><p>要搞明白零拷贝技术就要先搞清楚传统 I/O 的执行流程，传统的 I/O 的执行流程如下，期间共发生了 4 次用户态与内核态的上下文切换，因为发生了 2 次系统调用，一次是 read()，一次是 write()，每次系统调用都得先从用户态切换到内核态，等内核任务完成后，再从内核态切换回用户态。 期间还发生了 4 次数据拷贝，其中两次是 DMA 的拷贝，另外两次则是通过 CPU 拷贝的。 可以看到我们只是处理一份数据，结果却搬运了 4 次，过多的数据拷贝无疑会消耗大量的 CPU 资源，降低系统的性能。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410231339848.png" alt=""></p><p>所谓的零拷贝技术不是指不发生拷贝，而是在用户态没有进行拷贝。实现零拷贝的技术的方式通常有 2 种：</p><ul><li><strong>mmap（memory map）</strong>：<code>mmap()</code> 系统调用函数会直接把内核缓冲区里的数据映射到用户空间，这样操作系统内核与用户空间共享同一块内存区域，这样就避免了数据的拷贝。具体过程如下：</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410231345331.png" alt=""></p><ul><li><strong>sendfile</strong>：<code>sendfile()</code> 可以替代 <code>read()</code> 和 <code>write</code> 这 2 个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。其次，<code>sendfile()</code> 函数可以直接把内核缓冲区的数据拷贝到 Socket 缓冲区，不再拷贝到用户态，这样就只有 2 次上下文切换和 3 次数据拷贝。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410231351414.png" alt=""></p><ul><li>但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA 技术，我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 Socket 缓冲区里的过程。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202410231352570.png" alt=""></p><p>传统方式以及不同零拷贝技术的对比如下：</p><table><thead><tr><th>操作方式</th><th>CPU 拷贝（次数）</th><th>DMA 拷贝（次数）</th><th>上下文切换（次数）</th></tr></thead><tbody><tr><td>传统 I/O</td><td>2</td><td>2</td><td>4</td></tr><tr><td>mmap</td><td>1</td><td>2</td><td>4</td></tr><tr><td>sendfile</td><td>1</td><td>2</td><td>2</td></tr><tr><td>sendfile (SG-DMA)</td><td>0</td><td>2</td><td>2</td></tr></tbody></table><p>参考资料：</p><ul><li><a href="https://xie.infoq.cn/article/51b6764c48ff70988e124a868" target="_blank" rel="noreferrer">面试官问：kafka 为什么如此之快？</a></li><li><a href="https://xiaolincoding.com/os/8_network_system/zero_copy.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-dma-%E6%8A%80%E6%9C%AF" target="_blank" rel="noreferrer">9.1 什么是零拷贝？</a></li><li><a href="https://www.javacn.site/interview/basic/zero-copy.html" target="_blank" rel="noreferrer">说一下零拷贝的实现原理？</a></li></ul><h2 id="如何理解平均负载" tabindex="-1">如何理解平均负载？ <a class="header-anchor" href="#如何理解平均负载" aria-label="Permalink to &quot;如何理解平均负载？&quot;">​</a></h2><p>平均负载是指单位时间内，系统处于可运行状态和不可中断状态的平均进程数，也就是平均活跃进程数，它和 CPU 使用率并没有直接关系。</p><p>既然平均的是活跃进程数，那么最理想的，就是每个 CPU 上都刚好运行着一个进程，这样每个 CPU 都得到了充分利用。比如当平均负载为 2 时，意味着什么呢？</p><ul><li>在只有 2 个 CPU 的系统上，意味着所有的 CPU 都刚好被完全占用。</li><li>在 4 个 CPU 的系统上，意味着 CPU 有 50% 的空闲。</li><li>而在只有 1 个 CPU 的系统中，则意味着有一半的进程竞争不到 CPU。</li></ul><p>平均负载高有可能是 CPU 密集型进程导致的；平均负载高并不一定代表 CPU 使用率高，还有可能是 I/O 更繁忙了；当发现负载高的时候，你可以使用 mpstat、pidstat 等工具，辅助分析负载的来源。</p>',30),c=[r];function o(s,n,d,p,h,m){return e(),i("div",null,c)}const C=t(a,[["render",o]]);export{g as __pageData,C as default};
