import{_ as h}from"./chunks/ArticleMetadata.BGfgJEkN.js";import{_ as r,C as k,c as o,o as t,k as n,G as d,P as c,a as g,w as u,b as F,e as m}from"./chunks/framework.hsaHFr3N.js";import"./chunks/md5.Csn9Gkkw.js";const q=JSON.parse('{"title":"Pulsar 介绍与部署","description":"","frontmatter":{"title":"Pulsar 介绍与部署","author":"Se7en","date":"2022/02/03 20:00","categories":["原创"],"tags":["Pulsar"]},"headers":[],"relativePath":"blogs/original/2022/09-pulsar.md","filePath":"blogs/original/2022/09-pulsar.md","lastUpdated":1707227798000}'),y={name:"blogs/original/2022/09-pulsar.md"};function C(i,s,b,D,B,v){const l=h,p=k("ClientOnly");return t(),o("div",null,[s[0]||(s[0]=n("h1",{id:"pulsar-介绍与部署",tabindex:"-1"},[g("Pulsar 介绍与部署 "),n("a",{class:"header-anchor",href:"#pulsar-介绍与部署","aria-label":'Permalink to "Pulsar 介绍与部署"'},"​")],-1)),d(p,null,{default:u(()=>{var a,e;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((e=i.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(t(),F(l,{key:0,article:i.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),s[1]||(s[1]=c(`<p>Apache Pulsar 是灵活的发布-订阅消息系统（Flexible Pub/Sub messaging），采用计算与存储分离的架构。雅虎在 2013 年开始开发 Pulsar ，于 2016 年首次开源，目前是 Apache 软件基金会的顶级项目。Pulsar 具有支持多租户、持久化存储、多机房跨区域数据复制、高吞吐、低延迟等特性。</p><h2 id="pulsar-组件" tabindex="-1">Pulsar 组件 <a class="header-anchor" href="#pulsar-组件" aria-label="Permalink to &quot;Pulsar 组件&quot;">​</a></h2><p>Pulsar 集群主要由以下三部分组成：</p><ul><li><strong>Broker</strong>：Pulsar 的 broker 是一个无状态组件，本身不存储数据。主要负责处理 producer 和 consumer 的请求，消息的复制与分发，数据的计算。</li><li><strong>Zookeeper</strong>：主要用于存储元数据、集群配置，任务的协调（例如哪个 broker 负责哪个 topic），服务的发现（例如 broker 发现 bookie 的地址）。</li><li><strong>Bookkeeper</strong>：主要用于数据的持久化存储。除了消息数据，cursors 也会被持久化到 Bookkeeper，cursors 是消费端订阅消费的位移。 Bookkeeper 中每一个存储节点叫做 bookie。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210518235843.png" alt=""></p><h2 id="pulsar-基本概念" tabindex="-1">Pulsar 基本概念 <a class="header-anchor" href="#pulsar-基本概念" aria-label="Permalink to &quot;Pulsar 基本概念&quot;">​</a></h2><h3 id="producer-consumer" tabindex="-1">Producer &amp; Consumer <a class="header-anchor" href="#producer-consumer" aria-label="Permalink to &quot;Producer &amp; Consumer&quot;">​</a></h3><p>身为⼀个 Pub/Sub 系统，⾸先的存在要素必然是 producer（⽣产者）。producer 发送数据给 Pulsar，将消息以 append 的形式追加到 topic 中。发送的数据是 key/value 形式的，并且数据会上 schema 的信息。Pulsar 会确保⼀个 producer 往 topic 发送的消息满⾜⼀定的 schema 格式。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519160102.png" alt=""></p><p>既然有 producer 负责生产消息，那么相应地就有 consumer 负责消费消息。在 Pulsar 中 consumer 可以使用不同的订阅模式来接受消息。</p><h3 id="subscription" tabindex="-1">Subscription <a class="header-anchor" href="#subscription" aria-label="Permalink to &quot;Subscription&quot;">​</a></h3><p>Pulsar ⾥将 consumer 接收消息的过程称之为：subscription（订阅），类似于 Kafka 的 consumer group（消费组）。⼀个订阅⾥的所有 consumer，会作为⼀个整体去消费这个 topic ⾥的所有消息。Pulsar 有四种订阅模式：独占（exclusive）、故障转移（failover）、共享（shared）、共享键（key_shared）。</p><h4 id="exclusive" tabindex="-1">Exclusive <a class="header-anchor" href="#exclusive" aria-label="Permalink to &quot;Exclusive&quot;">​</a></h4><p>在 exclusive 模式下，一个 subscription 只允许被一个 consumer 用于订阅 topic ，如果多个 consumer 使用相同的 subscription 去订阅同一个 topic，则会发生错误。exclusive 是默认的订阅模式。如下图所示，Consumer A-0 和 Consumer A-1 都使用了相同的 subscription（相同的消费组），只有 Consumer A-0 被允许消费消息。 <img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519212224.png" alt=""></p><h4 id="failover" tabindex="-1">Failover <a class="header-anchor" href="#failover" aria-label="Permalink to &quot;Failover&quot;">​</a></h4><p>在 failover 模式下，多个 consumer 允许使用同一个 subscription 去订阅 topic。但是对于给定的 topic，broker 将选择⼀个 consumer 作为该 topic 的主 consumer ，其他 consumer 将被指定为故障转移 consumer 。当主 consumer 失去连接时，topic 将被重新分配给其中⼀个故障转移 consumer ，⽽新分配的 consumer 将成为新的主 consumer 。发⽣这种情况时，所有未确认的消息都将传递给新的主 consumer ，这个过程类似于 Kafka 中的 consumer 组重平衡（rebalance）。</p><p>如下图所示，Consumer B-0 是 topic 的主 consumer ，当 Consumer B-0 失去连接时，Consumer B-1 才能成为新的主 consumer 去消费 topic。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519214440.png" alt=""></p><h4 id="shared" tabindex="-1">Shared <a class="header-anchor" href="#shared" aria-label="Permalink to &quot;Shared&quot;">​</a></h4><p>在 shared 模式下，多个 consumer 可以使用同一个 subscription 去订阅 topic。消息以轮询的方式分发给 consumer ，并且每条消费仅发送给一个 consumer 。当有 consumer 失去连接时，所有发送给该 consumer 但未被确认的消息将被重新安排，以便发送给该 subscription 上剩余的 consumer 。</p><p>如下图所示，Consumer C-1，Consumer C-2，Consumer C-3 以轮询的方式接受消息。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519214921.png" alt=""></p><p>shared 模式有以下限制：</p><ul><li>消息不能保证有序。</li><li>不支持批量 ack。</li></ul><h4 id="key-shared" tabindex="-1">Key_Shared <a class="header-anchor" href="#key-shared" aria-label="Permalink to &quot;Key_Shared&quot;">​</a></h4><p>key_shared 是 Pulsar 2.4.0 以后⼀个新订阅模式。在 shared 模式下，多个 consumer 可以使用同一个 subscription 去订阅 topic。消息按照 key 分发给 consumer ，含有相同 key 的消息只被发送给同一个 consumer 。</p><p>如下图所示，不同的 consumer 只接受到对应 key 的消息。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519215046.png" alt=""></p><p>key_shared 模式有以下限制：</p><ul><li>需要为每条消息指定一个 key 或者 orderingKey。</li><li>不支持批量 ack。</li><li>producer 应该禁用 batch 或者使用基于 key 的 batch。</li></ul><h3 id="cursor" tabindex="-1">Cursor <a class="header-anchor" href="#cursor" aria-label="Permalink to &quot;Cursor&quot;">​</a></h3><p>cursor 是用来存储一个 subscription 中消费的状态信息（类似 Kafka 中的 offset，偏移量）。Pulsar 将 subscription 的 cursor 存储至 BookKeeper 的 ledger 中。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519223522.png" alt=""></p><h3 id="存储模型" tabindex="-1">存储模型 <a class="header-anchor" href="#存储模型" aria-label="Permalink to &quot;存储模型&quot;">​</a></h3><ul><li>第一层抽象是 topic（partition），topic 是一个逻辑的概念，topic 是消息的集合，所有⽣产者的消息，都会归属到指定的 topic ⾥。所有在 topic ⾥的消息，会按照⼀定的规则，被切分成不同的分区（partition）。在 Kafka 中 partition 是真正的物理单元，但是在 Pulsar 中 partition 仍然是一个逻辑的概念。</li><li>Pulsar 把 partition 进一步分成多个分片（segment），segment 是 Pulsar 中真正的物理单元，Pulsar 中的数据是持久化在 Bookkeeper 中的，segment 其实对应的就是 Bookkeeper 中的 ledger。</li><li>在分片中存储了更小粒度的 entry，entry 存储的是一条或者一个 batch 的消息，batch 是一次性批量提交多条消息。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519224042.png" alt=""></p><p>⽽最底层的 message 通常包含 Message ID，由以下几个部分组成：</p><ul><li>partition-index</li><li>ledger-id（segment）</li><li>entry-id</li><li>batch-index</li></ul><h3 id="broker" tabindex="-1">Broker <a class="header-anchor" href="#broker" aria-label="Permalink to &quot;Broker&quot;">​</a></h3><p>Pulsar 中的 broker 是无状态的，不存储数据，真正的数据存储在 Bookkeeper 上。每个 topic 的 partition 都会分配到某一个 borker 上，producer 和 consumer 则会连接到这个 broker，从而向该 topic 的 partition 发送和消费消息。broker 主要负责消息的复制与分发，数据的计算。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519161252.png" alt=""></p><h3 id="namespace-tenant" tabindex="-1">Namespace &amp; Tenant <a class="header-anchor" href="#namespace-tenant" aria-label="Permalink to &quot;Namespace &amp; Tenant&quot;">​</a></h3><p>Pulsar 从一开始就支持多租户，topic 的名称是层级化的，最上层是租户（tenant），然后是命名空间（namespace），最后才是 topic。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">persistent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">non-persistent}://tenant/namespace/topic</span></span></code></pre></div><ul><li>租户可以跨集群分布，每个租户都可以有单独的认证和授权机制。 租户也是存储配额、消息 TTL 和隔离策略的管理单元。</li><li>命名空间是租户的管理单元，命名空间上配置的策略适用于在该命名空间中创建的所有 topic。 租户可以使用 REST API 和 pulsar-admin CLI 工具来创建多个命名空间。</li><li><code>persistent|non-persistent</code> 标识了 topic 的类型，默认情况下 topic 是持久化存储到磁盘上的。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519210253.png" alt=""></p><h3 id="ack-机制" tabindex="-1">Ack 机制 <a class="header-anchor" href="#ack-机制" aria-label="Permalink to &quot;Ack 机制&quot;">​</a></h3><p>在 Pulsar 中支持了两种 ack 的机制，分别是单条 ack 和批量 ack。单条 ack（AckIndividual）是指 consumer 可以根据消息的 messageID 来针对某一个特定的消息进行 ack 操作；批量 ack（AckCumulative）是指一次 ack 多条消息。</p><h3 id="消息生命周期" tabindex="-1">消息生命周期 <a class="header-anchor" href="#消息生命周期" aria-label="Permalink to &quot;消息生命周期&quot;">​</a></h3><p>默认情况下，Pulsar Broker 会对消息做如下处理：</p><ul><li>当消息被 consumer 确认之后，会立即执行删除操作。</li><li>对于未被确认的消息会存储到 backlog 中。</li></ul><p>但是，很多线上的生产环境下，这种默认行为并不能满足我们的生产需求，所以，Pulsar 提供了如下配置策略来覆盖这些行为：</p><ul><li>Retention 策略：用户可以将 consumer 已经确认的消息保留下来。</li><li>TTL 策略：对于未确认的消息，用户可以通过设置 TTL 来使未确认的消息到达已经确认的状态。</li></ul><p>上述两种策略的设置都是在 NameSpace 的级别进行设置。</p><h4 id="backlog" tabindex="-1">Backlog <a class="header-anchor" href="#backlog" aria-label="Permalink to &quot;Backlog&quot;">​</a></h4><p>backlog 是未被确认的消息的集合，它有一个大前提是，这些消息所在的 topic 是被 broker 所持久化的，在默认情况下，用户创建的 topic 都会被持久化。换句话说，broker 会将所有未确认或者未处理的消息都存放到 backlog 中。</p><p>需要注意的是，对 backlog 进行配置时，我们需要明确以下两点：</p><ul><li>在当前的 namespace 下，每一个 topic 允许 backlog 的大小是多少。</li><li>如果超过设定的 backlog 的阈值，将会执行哪些操作。</li></ul><p>当超过设定的 backlog 的阈值，Pulsar 提供了以下三种策略供用户选择：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519233202.png" alt=""></p><h4 id="retention" tabindex="-1">Retention <a class="header-anchor" href="#retention" aria-label="Permalink to &quot;Retention&quot;">​</a></h4><p>Retention 策略的设置提供了两种方式：</p><ul><li>消息的大小，默认值：defaultRetentionSizeInMB=0</li><li>消息被保存的时间，默认值：defaultRetentionTimeInMinutes=0</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519232953.png" alt=""></p><h4 id="time-to-live-ttl" tabindex="-1">Time To Live（TTL） <a class="header-anchor" href="#time-to-live-ttl" aria-label="Permalink to &quot;Time To Live（TTL）&quot;">​</a></h4><p>TTL 参数就像附在每条消息上的秒表，用于定义允许消息停留在未确认状态的时间。当 TTL 过期时，Pulsar 会自动将消息更改为已确认状态（并使其准备删除）。TTL 只去处理一件事情，就是将未被确认的消息变为被确认的状态，TTL 本身不会去涉及相应的删除操作。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519232401.png" alt=""></p><h3 id="消息写入流程" tabindex="-1">消息写入流程 <a class="header-anchor" href="#消息写入流程" aria-label="Permalink to &quot;消息写入流程&quot;">​</a></h3><p>producer 向 topic 的 partition 对应的 broker 发送消息。broker 以并行的方式将消息写到多个 bookie 中，当指定数量的 bookie 写入成功时，broker 会向 producer 响应消息写入成功。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519000205.png" alt=""></p><h3 id="消息读取流程" tabindex="-1">消息读取流程 <a class="header-anchor" href="#消息读取流程" aria-label="Permalink to &quot;消息读取流程&quot;">​</a></h3><p>consumer 向订阅 topic 的 partition 对应的 broker 请求消息，如果消息在 broker 的缓存中存在，则 broker 直接将消息返回给 consumer 。如果缓存中不存在，broker 去 bookie 中读取消息，然后返回给 consumer 。 consumer 在完成消费后，向 broker 响应 ack 表示完成消费。 consumer ack 的元数据也是会持久化在 bookie 中的。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519000313.png" alt=""></p><h2 id="pulsar-vs-kafka" tabindex="-1">Pulsar vs Kafka <a class="header-anchor" href="#pulsar-vs-kafka" aria-label="Permalink to &quot;Pulsar vs Kafka&quot;">​</a></h2><h3 id="数据存储" tabindex="-1">数据存储 <a class="header-anchor" href="#数据存储" aria-label="Permalink to &quot;数据存储&quot;">​</a></h3><ul><li>Kafka 的服务层和存储层位于同一节点上，broker 负责数据的计算与存储。</li><li>Pulsar 的架构将服务层与存储层解耦：无状态 broker 节点负责数据服务；bookie 节点负责数据存储。</li><li>另外 Pulsar 还支持分层存储，如主存储（基于 SSD）、历史存储（S3）等。可以将访问频率较低的数据卸载到低成本的持久化存储（如 AWS S3、Azure 云）中。</li></ul><h3 id="存储单元" tabindex="-1">存储单元 <a class="header-anchor" href="#存储单元" aria-label="Permalink to &quot;存储单元&quot;">​</a></h3><ul><li>Kafka 和 Pulsar 都有类似的消息概念，客户端通过主题与消息系统进行交互，每个主题都可以分为多个分区。 Pulsar 和 Kafka 之间的根本区别在于 Kafka 是以分区（partition）作为数据的存储单元，而 Pulsar 是以分片（segment）作为为数据的存储单元。</li><li>在 Kafka 中，分区只能存储在单个节点上并复制到其他节点，其容量受最小节点容量的限制。当对集群进行扩容时或者发送副本故障时，会触发数据的拷贝，这将耗费很长的时间。</li><li>在 Pulsar 中，同样是以分区作为为逻辑单元，但是是以 segment 为物理存储单元。分区随着时间的推移会进行分段，并在整个集群中均衡分布，能够有效迅速地扩展。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210519135832.png" alt=""></p><h3 id="名词对应表" tabindex="-1">名词对应表 <a class="header-anchor" href="#名词对应表" aria-label="Permalink to &quot;名词对应表&quot;">​</a></h3><p>根据个人对 Pulsar 和 Kafka 的理解，整理如下 Pulsar 和 Kafka 的名词对应表：</p><table><thead><tr><th>Pulsar</th><th>Kafka</th></tr></thead><tbody><tr><td>Topic</td><td>Topic</td></tr><tr><td>Partition</td><td>Partition</td></tr><tr><td>Segment（Ledger）</td><td>Segment</td></tr><tr><td>Bookie</td><td>Broker</td></tr><tr><td>Broker</td><td>Client SDK</td></tr><tr><td>Ensemble Size</td><td>metadata.broker.list</td></tr><tr><td>Write Quorum Size (Qw)</td><td>Replica Number</td></tr><tr><td>Ack Quorum Size (Qa)</td><td>request.required.acks</td></tr></tbody></table><ul><li>Pulsar 和 Kafka 都是以 topic 描述一个基本的数据集合，topic 数据又逻辑分为若干个 partition。</li><li>但 Kafka 以 partition 作为物理存储单位，每个 partition 必须作为一个整体（一个目录）存储在某一个 broker 上，虽然 Kafka 也会将一个 partition 分成多个 segment，但是这些 segment 是存在 Kafka broker 的同一个目录下。而 Pulsar 的每个 partition 是以 segment（对应到 Bookkeeper 的 ledger） 作为物理存储的单位，所以 Pulsar 中的一个逻辑上有序的 partition 数据集合在物理上会均匀分散到多个 bookie 节点中。</li><li>Pulsar 的数据存储节点 Bookkeeper 被称为 bookie，相当于一个 Kafka broker。</li><li>ensemble size 表示 topic 要用到的物理存储节点 bookie 个数，其副本数目 Qw 不能超过 bookie 个数，因为一个 bookie 上不能存储超过一个以上的数据副本。</li><li>Qa 是每次写请求发送完毕后需要回复确认的 bookie 的个数。</li></ul><h2 id="pulsar-部署" tabindex="-1">Pulsar 部署 <a class="header-anchor" href="#pulsar-部署" aria-label="Permalink to &quot;Pulsar 部署&quot;">​</a></h2><p>部署 Pulsar 集群包括以下步骤(按顺序)：</p><ul><li>1.部署一个 ZooKeeper 集群，初始化 Pulsar 集群元数据。</li><li>2.部署一个 Bookkeeper 集群。</li><li>3.部署一个或多个 Pulsar brokers。</li><li>4.部署 Pulsar manager（可选）。</li></ul><h2 id="节点规划" tabindex="-1">节点规划 <a class="header-anchor" href="#节点规划" aria-label="Permalink to &quot;节点规划&quot;">​</a></h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>角色</th><th>端口号</th></tr></thead><tbody><tr><td>zookeeper1</td><td>192.168.1.191</td><td>zookeeper</td><td>2181</td></tr><tr><td>zookeeper2</td><td>192.168.1.192</td><td>zookeeper</td><td>2181</td></tr><tr><td>zookeeper3</td><td>192.168.1.193</td><td>zookeeper</td><td>2181</td></tr><tr><td>Bookkeeper1</td><td>192.168.1.194</td><td>Bookkeeper</td><td>3181</td></tr><tr><td>Bookkeeper2</td><td>192.168.1.195</td><td>Bookkeeper</td><td>3181</td></tr><tr><td>Bookkeeper3</td><td>192.168.1.196</td><td>Bookkeeper</td><td>3181</td></tr><tr><td>pulsar1</td><td>192.168.1.147</td><td>broker</td><td>8080（http协议），6650（pulsar协议）</td></tr><tr><td>pulsar2</td><td>192.168.1.148</td><td>broker</td><td>8080（http协议），6650（pulsar协议）</td></tr><tr><td>pulsar3</td><td>192.168.1.149</td><td>broker</td><td>8080（http协议），6650（pulsar协议）</td></tr><tr><td>pulsar1</td><td>192.168.1.149</td><td>pulsar-manager</td><td>7750</td></tr></tbody></table><h2 id="下载二进制包" tabindex="-1">下载二进制包 <a class="header-anchor" href="#下载二进制包" aria-label="Permalink to &quot;下载二进制包&quot;">​</a></h2><p>下载 pulsar 发行版的二进制的包，里面包含了 zookeeper，Bookkeeper，pulsar 所需要的文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://archive.apache.org/dist/pulsar/pulsar-2.7.1/apache-pulsar-2.7.1-bin.tar.gz</span></span></code></pre></div><p>包下载完成后，解压并进入到解压后的目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> xvzf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apache-pulsar-2.7.1-bin.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apache-pulsar-2.7.1</span></span></code></pre></div><p>解压后的文件目录包含以下子目录：</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>bin</td><td>Pulsar 命令行工具，比如 pulsar 和 pulsar-admin</td></tr><tr><td>conf</td><td>配置文件，包含ZooKeeper，Bookkeeper，Pulsar 等等</td></tr><tr><td>data</td><td>Zookeeper 和 Bookkeeper 保存数据的目录</td></tr><tr><td>lib</td><td>Pulsar 使用的 JAR 文件</td></tr><tr><td>logs</td><td>日志目录</td></tr></tbody></table><h2 id="部署-zookeeper-集群" tabindex="-1">部署 Zookeeper 集群 <a class="header-anchor" href="#部署-zookeeper-集群" aria-label="Permalink to &quot;部署 Zookeeper 集群&quot;">​</a></h2><h3 id="修改-zookeeper-配置文件" tabindex="-1">修改 Zookeeper 配置文件 <a class="header-anchor" href="#修改-zookeeper-配置文件" aria-label="Permalink to &quot;修改 Zookeeper 配置文件&quot;">​</a></h3><p>修改所有 Zookeeper 节点的 conf/zookeeper.conf 配置文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 设置Zookeeper数据存放目录。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dataDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">data/zookeeper</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 在配置文件中为每个节点添加一个 server.N行，其中N是ZooKeeper节点的编号。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.191:2888:3888</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.192:2888:3888</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.193:2888:3888</span></span></code></pre></div><p>在每个 Zookeeper 节点的 myid 文件中配置该节点在集群中的唯一ID。 myid 文件应放在 dataDir 指定的目录下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> data/zookeeper</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 每个Zookeeper节点的ID号不能重复，并且和server.N的编号对应，依次为1，2，3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> data/zookeeper/myid</span></span></code></pre></div><h3 id="启动-zookeeper-集群" tabindex="-1">启动 Zookeeper 集群 <a class="header-anchor" href="#启动-zookeeper-集群" aria-label="Permalink to &quot;启动 Zookeeper 集群&quot;">​</a></h3><p>在每台 Zookeeper 节点启动 Zookeeper 服务：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar-daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> zookeeper</span></span></code></pre></div><h3 id="初始化集群元数据" tabindex="-1">初始化集群元数据 <a class="header-anchor" href="#初始化集群元数据" aria-label="Permalink to &quot;初始化集群元数据&quot;">​</a></h3><p>Zookeeper 集群启动成功后，需要将一些 Pulsar 集群的元信息写入 ZooKeeper 集群的每个节点，由于数据在 ZooKeeper 集群内部会互相同步，因此只需要将元信息写入 ZooKeeper 的一个节点即可：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> initialize-cluster-metadata</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --cluster</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pulsar-cluster-1</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --zookeeper</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.1.191:2181</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --configuration-store</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.1.191:2181</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --web-service-url</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://192.168.1.147:8080,192.168.1.148:8080,192.168.1.149:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --broker-service-url</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pulsar://192.168.1.147:6650,192.168.1.148:6650,192.168.1.149:6650</span></span></code></pre></div><p>参数说明如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>—cluster</td><td>pulsar 集群名字</td></tr><tr><td>--zookeeper</td><td>zookeeper 地址，只需要包含 zookeeer 集群中的任意一台机器即可</td></tr><tr><td>--configuration-store</td><td>配置存储地址，只需要包含 zookeeer 集群中的任意一台机器即可</td></tr><tr><td>--web-service-url</td><td>pulsar 集群 web 服务的 URL 以及端口，默认的端口是8080</td></tr><tr><td>--broker-service-url</td><td>broker 服务的URL，用于与 pulsar 集群中的 brokers 进行交互，默认端口是 6650</td></tr></tbody></table><h2 id="部署-bookkeeper-集群" tabindex="-1">部署 Bookkeeper 集群 <a class="header-anchor" href="#部署-bookkeeper-集群" aria-label="Permalink to &quot;部署 Bookkeeper 集群&quot;">​</a></h2><p>Pulsar 集群中所有持久数据的存储都由 Bookkeeper 负责。</p><h3 id="修改-bookkeeper-配置文件" tabindex="-1">修改 Bookkeeper 配置文件 <a class="header-anchor" href="#修改-bookkeeper-配置文件" aria-label="Permalink to &quot;修改 Bookkeeper 配置文件&quot;">​</a></h3><p>修改所有 Bookkeeper 节点的 conf/Bookkeeper.conf 配置文件，设置 Bookkeeper 集群连接的 Zookeeper 信息：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">zkServers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.1.191:2181,192.168.1.192:2181,192.168.1.193:2181</span></span></code></pre></div><h3 id="启动-bookkeeper-集群" tabindex="-1">启动 Bookkeeper 集群 <a class="header-anchor" href="#启动-bookkeeper-集群" aria-label="Permalink to &quot;启动 Bookkeeper 集群&quot;">​</a></h3><p>在每台 Bookkeeper 节点启动 Bookkeeper 服务：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar-daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> bookie</span></span></code></pre></div><h3 id="验证-bookkeeper-集群状态" tabindex="-1">验证 Bookkeeper 集群状态 <a class="header-anchor" href="#验证-bookkeeper-集群状态" aria-label="Permalink to &quot;验证 Bookkeeper 集群状态&quot;">​</a></h3><p>在任意一台 Bookkeeper 节点上使用 Bookkeeper shell 的 simpletest 命令，去校验集群内所有的 bookie 是否都已经启动，3 为 Bookkeeper 节点数量。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/bookkeeper</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shell</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> simpletest</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --ensemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --writeQuorum</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --ackQuorum</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --numEntries</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span></span></code></pre></div><p>参数含义如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">-a,--ackQuorum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Ack</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> quorum</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (default </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)  当指定数量的 bookie ack 响应时，认为消息写入成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">-e,--ensemble</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      Ensemble</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (default </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)  写入数据的 bookie 节点数量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">-n,--numEntries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Entries</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (default </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) 一批消息的消息数量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">-w,--writeQuorum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   Write</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> quorum</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (default </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) 每条消息副本数量</span></span></code></pre></div><p>这个命令会在集群上创建和 bookie 同等数量的 ledger，并往里面写一些条目，然后读取它，最后删除这个 ledger。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210430225005.png" alt=""></p><h2 id="部署-pulsar-集群" tabindex="-1">部署 Pulsar 集群 <a class="header-anchor" href="#部署-pulsar-集群" aria-label="Permalink to &quot;部署 Pulsar 集群&quot;">​</a></h2><h3 id="修改-pulsar-配置文件" tabindex="-1">修改 Pulsar 配置文件 <a class="header-anchor" href="#修改-pulsar-配置文件" aria-label="Permalink to &quot;修改 Pulsar 配置文件&quot;">​</a></h3><p>修改所有 Pulsar 节点的 conf/broker.conf 配置文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 配置pulsar broker连接的zookeeper集群地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">zookeeperServers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.1.191:2181,192.168.1.192:2181,192.168.1.193:2181</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">configurationStoreServers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.1.191:2181,192.168.1.192:2181,192.168.1.193:2181</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># broker数据端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">brokerServicePort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6650</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># broker web服务端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">webServicePort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># pulsar 集群名字，和前面zookeeper初始化集群元数据时配置的一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">clusterName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pulsar-cluster-1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建一个ledger时使用的bookie数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">managedLedgerDefaultEnsembleSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 每个消息的副本数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">managedLedgerDefaultWriteQuorum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 完成写操作前等待副本ack的数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">managedLedgerDefaultAckQuorum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span></span></code></pre></div><h3 id="启动-pulsar-集群" tabindex="-1">启动 Pulsar 集群 <a class="header-anchor" href="#启动-pulsar-集群" aria-label="Permalink to &quot;启动 Pulsar 集群&quot;">​</a></h3><p>在每台 Pulsar 节点启动 broker：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar-daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> broker</span></span></code></pre></div><h2 id="客户端连接-pulsar-集群" tabindex="-1">客户端连接 Pulsar 集群 <a class="header-anchor" href="#客户端连接-pulsar-集群" aria-label="Permalink to &quot;客户端连接 Pulsar 集群&quot;">​</a></h2><h3 id="修改客户端配置文件" tabindex="-1">修改客户端配置文件 <a class="header-anchor" href="#修改客户端配置文件" aria-label="Permalink to &quot;修改客户端配置文件&quot;">​</a></h3><p>修改 conf/client.conf 文件。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># pulsar集群web服务url</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">webServiceUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">http://192.168.1.147:8080,192.168.1.148:8080,192.168.1.149:8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># pulsar服务端口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># URL for Pulsar Binary Protocol (for produce and consume operations)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">brokerServiceUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pulsar://192.168.1.147:6650,192.168.1.148:6650,192.168.1.149:6650</span></span></code></pre></div><h3 id="客户端生产和消费消息" tabindex="-1">客户端生产和消费消息 <a class="header-anchor" href="#客户端生产和消费消息" aria-label="Permalink to &quot;客户端生产和消费消息&quot;">​</a></h3><p>consumer 使用如下命令订阅 pulsar-test 这个主题的消息：</p><ul><li>-n：订阅消息的数量</li><li>-s：订阅组名</li><li>-t：订阅类型，有以下值Exclusive, Shared, Failover, Key_Shared</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar-client</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> consume</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  persistent://public/default/pulsar-test</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;consumer-test&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Exclusive&quot;</span></span></code></pre></div><p>如果不指定 <code>--url</code> 参数并且没有在 <code>conf/client.conf</code> 文件中指定 pulsar 集群连接信息，则默认连接的是 <code>pulsar://localhost:6650/</code>。可以指定 <code>--url pulsar://192.168.1.147:6650</code> 或者 <code>--url http://192.168.1.147:8080</code> 与 broker 进行交互。</p><p>新开一个终端， producer 使用如下命令向 pulsar-test 主题生产一条消息，消息内容为 &quot;Hello Pulsar&quot;：</p><ul><li>-n：生产消息的数量</li><li>-m：消息内容</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar-client</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> produce</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  persistent://public/default/pulsar-test</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -m</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Hello Pulsar&quot;</span></span></code></pre></div><p>在 consumer 终端可以看到成功消费到了消息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>23:20:47.418 [pulsar-client-io-1-1] INFO  com.scurrilous.circe.checksum.Crc32cIntChecksum - SSE4.2 CRC32C provider initialized</span></span>
<span class="line"><span>----- got message -----</span></span>
<span class="line"><span>key:[null], properties:[], content:Hello Pulsar</span></span></code></pre></div><h2 id="部署-pulsar-manager" tabindex="-1">部署 Pulsar manager <a class="header-anchor" href="#部署-pulsar-manager" aria-label="Permalink to &quot;部署 Pulsar manager&quot;">​</a></h2><p>Pulsar manager 是用于管理和监控 Pulsar 集群的 WebUI 工具。Pulsar manager 可以管理多个 Pulsar 集群。 github 地址：<a href="https://github.com/apache/pulsar-manager" target="_blank" rel="noreferrer">https://github.com/apache/pulsar-manager</a></p><h3 id="安装-pulsar-manager" tabindex="-1">安装 Pulsar manager <a class="header-anchor" href="#安装-pulsar-manager" aria-label="Permalink to &quot;安装 Pulsar manager&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://dist.apache.org/repos/dist/release/pulsar/pulsar-manager/pulsar-manager-0.2.0/apache-pulsar-manager-0.2.0-bin.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apache-pulsar-manager-0.2.0-bin.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pulsar-manager</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -xvf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pulsar-manager.tar</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pulsar-manager</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ../dist</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ui</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">./bin/pulsar-manager</span></span></code></pre></div><h3 id="创建-pulsar-manager-账号" tabindex="-1">创建 Pulsar manager 账号 <a class="header-anchor" href="#创建-pulsar-manager-账号" aria-label="Permalink to &quot;创建 Pulsar manager 账号&quot;">​</a></h3><p>创建用户名为 admin，密码为 apachepulsar 的超级管理员账号：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">CSRF_TOKEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://192.168.1.147:7750/pulsar-manager/csrf-token)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    -H</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;X-XSRF-TOKEN: </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$CSRF_TOKEN</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    -H</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Cookie: XSRF-TOKEN=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$CSRF_TOKEN</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    -H</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;Content-Type: application/json&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    -X</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> PUT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://192.168.1.147:7750/pulsar-manager/users/superuser</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;{&quot;name&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;apachepulsar&quot;, &quot;description&quot;: &quot;myuser&quot;, &quot;email&quot;: &quot;chengzw258@163.com&quot;}&#39;</span></span></code></pre></div><h3 id="pulsar-manager-界面" tabindex="-1">Pulsar manager 界面 <a class="header-anchor" href="#pulsar-manager-界面" aria-label="Permalink to &quot;Pulsar manager 界面&quot;">​</a></h3><p>访问 <a href="http://192.168.1.147:7750/ui/index.html" target="_blank" rel="noreferrer">http://192.168.1.147:7750/ui/index.html</a> 登录 Pulsar manager：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210512095328.png" alt=""></p><p>点击 New Environment 添加 Pulsar 集群：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210501104203.png" alt=""></p><p>添加完成后可以查看并设置 Pulsar 集群的相关信息，例如查看 topic 信息：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210512095544.png" alt=""></p><p>访问 <a href="http://192.168.1.147:7750/bkvm" target="_blank" rel="noreferrer">http://192.168.1.147:7750/bkvm</a> 查看 bookie 信息，用户名：admin，密码：admin。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210518224242.png" alt=""></p><p>查看 ledger 信息：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210518224258.png" alt=""></p><h2 id="perf-压力测试" tabindex="-1">Perf 压力测试 <a class="header-anchor" href="#perf-压力测试" aria-label="Permalink to &quot;Perf 压力测试&quot;">​</a></h2><p>pulsar 提供了压力测试的命令行工具，使用以下命令生产消息：</p><ul><li>-r：每秒生产的消息总数（所有生产者）</li><li>-n：生产者数量</li><li>-s：每条消息的大小（bytes）</li><li>最后跟上 topic 名字</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar-perf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> produce</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> test-perf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出内容，从左到右依次是：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 每秒生产的消息数量：87.2条</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 每秒流量大小：0.7Mb</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 每秒生产失败的消息数：0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 平均延迟：5.478ms</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 延迟中位数：4.462ms</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 95%的延迟在 11.262ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 99%的延迟在 25.802ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 99.9%的延迟在 43.757ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 99.99%的延迟在 51.956ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 最大延迟：51.956ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Throughput</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> produced:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   87.2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  msg/s</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ---</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      0.7</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Mbit/s</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ---</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> failure</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      0.0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> msg/s</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ---</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Latency:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> mean:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   5.478</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ms</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> med:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4.642</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 95</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  11.263</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 99</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  25.802</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 99.9</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  43.757</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 99.99</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  51.956</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  51.956</span></span></code></pre></div><p>使用以下命令消费消息：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/pulsar-perf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> consume</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> test-perf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出内容，从左到右依次是：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 每秒消费的消息数量：100.007条</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 每秒流量大小：0.781Mb</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 平均延迟：9.273ms</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 延迟中位数：9ms</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 95%的延迟在 14ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 99%的延迟在 15ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 99.9%的延迟在 28ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 99.99%的延迟在 34ms以内</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 最大延迟：34ms</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Throughput</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> received:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100.007</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  msg/s</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.781</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Mbit/s</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ---</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Latency:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> mean:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 9.273</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ms</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> med:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 9</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 95</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 99</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 15</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 99.9</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 28</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 99.99</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 34</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 34</span></span></code></pre></div><p>在 Pulsar manager 界面可以 test-perf 这个 topic 有两个生产者在生产消息，有一个消费者正在消费消息：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210518225656.png" alt=""></p><p>查看 topic 的 存储状况：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20210518225919.png" alt=""></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://livebook.manning.com/book/pulsar-in-action/chapter-1/v-8/1" target="_blank" rel="noreferrer">https://livebook.manning.com/book/pulsar-in-action/chapter-1/v-8/1</a></li><li><a href="https://pulsar.apache.org/en/" target="_blank" rel="noreferrer">https://pulsar.apache.org/en/</a></li><li><a href="https://www.jianshu.com/p/4664de047c71" target="_blank" rel="noreferrer">https://www.jianshu.com/p/4664de047c71</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUyMjkzMjA1Ng==&amp;mid=2247487414&amp;idx=1&amp;sn=850ec2ccc4d2847066a98a899bd0ce1f&amp;chksm=f9c51581ceb29c973a87c2548c45755225198ecfa2b235abec61623adfcc70c3d381be8cf501&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s?__biz=MzUyMjkzMjA1Ng==&amp;mid=2247487414&amp;idx=1&amp;sn=850ec2ccc4d2847066a98a899bd0ce1f&amp;chksm=f9c51581ceb29c973a87c2548c45755225198ecfa2b235abec61623adfcc70c3d381be8cf501&amp;scene=21#wechat_redirect</a></li><li><a href="https://alexstocks.github.io/html/pulsar.html" target="_blank" rel="noreferrer">https://alexstocks.github.io/html/pulsar.html</a></li><li><a href="https://tech.meituan.com/2015/01/13/kafka-fs-design-theory.html" target="_blank" rel="noreferrer">https://tech.meituan.com/2015/01/13/kafka-fs-design-theory.html</a></li></ul>`,175))])}const z=r(y,[["render",C]]);export{q as __pageData,z as default};
