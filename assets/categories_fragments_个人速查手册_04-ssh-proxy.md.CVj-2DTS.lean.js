import{_ as p}from"./chunks/ArticleMetadata.CgDBQq2o.js";import{_ as r,C as o,c as k,o as e,k as h,G as d,P as c,a as F,w as g,b as y,e as C}from"./chunks/framework.kLAB-UjF.js";import"./chunks/md5.CeBdha7O.js";const P=JSON.parse('{"title":"使用 ClashX 代理 SSH 连接","description":"","frontmatter":{"title":"使用 ClashX 代理 SSH 连接","author":"Se7en","date":"2024/12/27 22:00","categories":["SSH"],"tags":["SSH","代理"]},"headers":[],"relativePath":"categories/fragments/个人速查手册/04-ssh-proxy.md","filePath":"categories/fragments/个人速查手册/04-ssh-proxy.md","lastUpdated":1735311760000}'),m={name:"categories/fragments/个人速查手册/04-ssh-proxy.md"};function u(a,s,b,S,D,v){const n=p,l=o("ClientOnly");return e(),k("div",null,[s[0]||(s[0]=h("h1",{id:"使用-clashx-代理-ssh-连接",tabindex:"-1"},[F("使用 ClashX 代理 SSH 连接 "),h("a",{class:"header-anchor",href:"#使用-clashx-代理-ssh-连接","aria-label":'Permalink to "使用 ClashX 代理 SSH 连接"'},"​")],-1)),d(l,null,{default:g(()=>{var i,t;return[(((i=a.$frontmatter)==null?void 0:i.aside)??!0)&&(((t=a.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(e(),y(n,{key:0,article:a.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),s[1]||(s[1]=c(`<p>有时通过 SSH 连接国外的服务器会被防火墙拒绝，为了解决这个问题，可以使用 ClashX 来代理 SSH 连接。ClashX 是一个拥有 GUI 界面基于 Clash 可自定义规则的 macOS 代理应用。你也可以选择其他的代理软件，例如 Shadowsocks 等。</p><h2 id="修改-ssh-客户端配置文件" tabindex="-1">修改 SSH 客户端配置文件 <a class="header-anchor" href="#修改-ssh-客户端配置文件" aria-label="Permalink to &quot;修改 SSH 客户端配置文件&quot;">​</a></h2><p>编辑 <code>~/.ssh/config</code> 文件，添加如下配置：</p><ul><li>Host：定义一个主机别名，可以是一个自定义、容易记忆的名称。</li><li>User：定义要连接的远程主机的用户名。</li><li>HostName：定义要连接的远程主机的主机名或 IP 地址。</li><li>Port：定义要连接的远程主机的端口号。</li><li>IdentityFile：定义要使用的 SSH 私钥文件的路径。</li><li>ProxyCommand：定义要使用的代理命令，这里使用 nc（netcat）工具，通过 127.0.0.1:7890 的 SOCKS5 代理连接到目标主机 %h（HostName）的 %p（Port）。其中 7890 是 ClashX 代理默认的端口号，可以根据实际情况调整。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Host</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 34.95</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.63.65</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">	User</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> root</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">	HostName</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 34.95</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.63.65</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">	Port</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 443</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">	IdentityFile</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">	ProxyCommand</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> nc</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 127.0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.0.1:7890</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -X</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> %h</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> %p</span></span></code></pre></div><h2 id="新增-ssh-服务端的端口" tabindex="-1">新增 SSH 服务端的端口 <a class="header-anchor" href="#新增-ssh-服务端的端口" aria-label="Permalink to &quot;新增 SSH 服务端的端口&quot;">​</a></h2><p>大部分机场会关闭 SSH 默认的 22 端口，有的机场甚至只开放 80 和 443 端口。根据上面的客户端配置，我们在 SSH 服务器上开放 443 端口。</p><p>进入服务器，打开 <code>/etc/ssh/sshd_config</code>，找到：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#Port 22</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#AddressFamily any</span></span></code></pre></div><p>这里 Port 22 默认被注释掉，因为原本 22 就是默认端口。将这里修改为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Port</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Port</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 443</span></span></code></pre></div><p>这里我新增 Port 443，你可以修改为你想要设置的其他端口，但是请注意端口不要冲突。22 端口同样打开，这样你可以同时在这两个端口中选择使用进行 SSH 连接。</p><p>修改完毕后，重启 SSH 服务。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> sshd</span></span></code></pre></div><h2 id="测试-ssh-连接" tabindex="-1">测试 SSH 连接 <a class="header-anchor" href="#测试-ssh-连接" aria-label="Permalink to &quot;测试 SSH 连接&quot;">​</a></h2><p>一切正常的话，我们就可以通过代理进行 SSH 连接了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> root@34.95.63.65</span></span></code></pre></div><p>如果不确定有没有走 Proxy，可以打开 ClashX 的 Dashboard 查看连接中是否有对应的连接即可。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202412272302479.png" alt=""></p><h2 id="常见错误" tabindex="-1">常见错误 <a class="header-anchor" href="#常见错误" aria-label="Permalink to &quot;常见错误&quot;">​</a></h2><p>如果在 SSH 连接过程中遇到以下错误，说明是机场封禁了 SSH 端口，可以尝试其他端口。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kex_exchange_identification:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Connection</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> closed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> host</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Connection</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> closed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> UNKNOWN</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> port</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 65535</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://george.betterde.com/technology/20220215.html" target="_blank" rel="noreferrer">使用 ClashX 为 SSH 加速</a></li><li><a href="https://alleny.xyz/post/ssh-over-proxy/" target="_blank" rel="noreferrer">Using Proxy for SSH</a></li></ul>`,24))])}const _=r(m,[["render",u]]);export{P as __pageData,_ as default};
