import{_ as p}from"./chunks/ArticleMetadata.CHA3f0eO.js";import{_ as r,C as k,c,o as t,k as l,G as d,P as o,a as u,w as g,b as F,e as y}from"./chunks/framework.PU6D6dP3.js";import"./chunks/md5.BwKp3kP6.js";const _=JSON.parse('{"title":"使用 ClusterResourceSet 为 Cluster API 集群自动安装 CNI 插件","description":"","frontmatter":{"title":"使用 ClusterResourceSet 为 Cluster API 集群自动安装 CNI 插件","author":"Se7en","date":"2023/05/08 22:00","categories":["原创"],"tags":["Cluster API"]},"headers":[],"relativePath":"blogs/original/2023/09-clusterresourceset.md","filePath":"blogs/original/2023/09-clusterresourceset.md","lastUpdated":1707227798000}'),C={name:"blogs/original/2023/09-clusterresourceset.md"};function m(i,s,D,b,A,v){const n=p,h=k("ClientOnly");return t(),c("div",null,[s[0]||(s[0]=l("h1",{id:"使用-clusterresourceset-为-cluster-api-集群自动安装-cni-插件",tabindex:"-1"},[u("使用 ClusterResourceSet 为 Cluster API 集群自动安装 CNI 插件 "),l("a",{class:"header-anchor",href:"#使用-clusterresourceset-为-cluster-api-集群自动安装-cni-插件","aria-label":'Permalink to "使用 ClusterResourceSet 为 Cluster API 集群自动安装 CNI 插件"'},"​")],-1)),d(h,null,{default:g(()=>{var a,e;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((e=i.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(t(),F(n,{key:0,article:i.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),s[1]||(s[1]=o(`<h2 id="_1-什么是-cluster-api" tabindex="-1">1 什么是 Cluster API <a class="header-anchor" href="#_1-什么是-cluster-api" aria-label="Permalink to &quot;1 什么是 Cluster API&quot;">​</a></h2><p><a href="https://cluster-api.sigs.k8s.io/introduction.html" target="_blank" rel="noreferrer">Cluster API[1]</a> 是一个 Kubernetes 子项目，它将声明式、Kubernetes 风格的 API 引入到集群的创建、配置和管理中。Cluster API 支持在 AWS, Azure, GCP, vSphere, KubeVirt 等多种环境中创建和管理 Kuberenetes 集群，并负责提供部署集群所需的基础设施（例如 VPC, 虚拟机, 负载均衡等等）。此外 Cluster API 也支持在本地以 Kind（Kubernetes in Docker） 的方式快速创建用于测试的集群。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20221229102318.png" alt=""></p><p>在 Cluster API 中主要有两种集群：</p><ul><li>管理集群（Management cluster）： 在集群中部署 Cluster API 相关的管理组件。</li><li>工作负载集群（Workload cluster）：通过 Cluster API 创建出来的集群。</li></ul><h2 id="_2-clusterresourceset-有什么用" tabindex="-1">2 ClusterResourceSet 有什么用 <a class="header-anchor" href="#_2-clusterresourceset-有什么用" aria-label="Permalink to &quot;2 ClusterResourceSet 有什么用&quot;">​</a></h2><p>Cluster API 创建的集群仅包含最基本的功能。例如，它们没有 Pod 到 Pod 网络所需的容器网络接口 (CNI)，也没有动态持久卷配置所需的 StorageClass。当前用户必须手动将这些组件安装到他们创建的每一个集群中。</p><p>因此，Cluster API 引入了 ClusterResourceSet CRD，ClusterResourceSet Controller 会自动将用户在 ClusterResourceSet 中定义的一组资源配置应用到相应的集群中（通过 <code>label selectors</code> 根据标签选择集群），使得 Cluster API 创建的集群从一开始就为工作负载做好准备，而无需额外的用户干预。</p><p>在本文中，我们将会通过 ClusterResourceSet 来自动为工作负载集群安装 Cilium CNI 插件，所有使用到的资源文件可以在下面的 Github 链接中获取。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">https://github.com/cr7258/hands-on-lab/tree/main/cluster-api/clusterresourceset</span></span></code></pre></div><h2 id="_3-前提准备" tabindex="-1">3 前提准备 <a class="header-anchor" href="#_3-前提准备" aria-label="Permalink to &quot;3 前提准备&quot;">​</a></h2><ul><li><a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation" target="_blank" rel="noreferrer">kind[2]</a> 可以用来在本地运行和测试 Kubernetes 集群，它使用 Docker 容器来作为 Kubernetes 的节点。</li><li><a href="https://kubernetes.io/docs/tasks/tools/" target="_blank" rel="noreferrer">kubectl[3]</a>是用于管理 Kubernetes 的命令行工具。</li><li><a href="https://cluster-api.sigs.k8s.io/clusterctl/overview.html#overview-of-clusterctl" target="_blank" rel="noreferrer">clusterctl[4]</a>是用于管理 Cluster API 集群的生命周期的命令行工具。</li></ul><h2 id="_4-创建管理集群" tabindex="-1">4 创建管理集群 <a class="header-anchor" href="#_4-创建管理集群" aria-label="Permalink to &quot;4 创建管理集群&quot;">​</a></h2><p>首先，我们通过 Kind 创建一个管理集群。Kind 的配置文件如下，在本文中我们将使用 Cluster API 的 Docker Provider 来创建工作负载集群，因此我们要让 Kind 集群能够访问到主机上的 Docker 进程。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kind.x-k8s.io/v1alpha4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Cluster</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">manage-cluster</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">role</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">control-plane</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  extraMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">hostPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/var/run/docker.sock</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      containerPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/var/run/docker.sock</span></span></code></pre></div><p>使用上述文件创建管理集群。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kind</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kind.yaml</span></span></code></pre></div><h2 id="_5-安装-cluster-api-组件" tabindex="-1">5 安装 Cluster API 组件 <a class="header-anchor" href="#_5-安装-cluster-api-组件" aria-label="Permalink to &quot;5 安装 Cluster API 组件&quot;">​</a></h2><p>使用 <code>clusterctl init</code> 命令在管理集群中安装 Cluster API 组件。使用 <code>--infrastructure</code> 参数指定使用 Docker 作为基础设施的 Provider。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> EXP_CLUSTER_RESOURCE_SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CLUSTER_TOPOLOGY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">clusterctl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --infrastructure</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker</span></span></code></pre></div><h2 id="_6-创建安装-cilium-使用的-configmap" tabindex="-1">6 创建安装 Cilium 使用的 Configmap <a class="header-anchor" href="#_6-创建安装-cilium-使用的-configmap" aria-label="Permalink to &quot;6 创建安装 Cilium 使用的 Configmap&quot;">​</a></h2><p>要使用 ClusterResourceSet 来安装资源，我们需要提供资源所需的 YAML 文件。Cilium 支持使用 Helm 的方式来安装，使用 <code>helm template</code> 命令在本地渲染出 YAML 资源文件。你可以根据需要在 <code>helm template</code> 命令中通过 <code>--set &lt;key&gt;=&lt;value&gt;</code> 指定其他选项或者值，以适应特定的环境或要求。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://helm.cilium.io</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> template</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium/cilium</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --version</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1.12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">--namespace </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kube-system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium-1.12.5.yaml</span></span></code></pre></div><p>根据 Cilium 资源文件创建 ClusterResourceSet 需要的 ConfigMap。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium-crs-cm</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --from-file=cilium-1.12.5.yaml</span></span></code></pre></div><h2 id="_7-创建-clusterresourceset" tabindex="-1">7 创建 ClusterResourceSet <a class="header-anchor" href="#_7-创建-clusterresourceset" aria-label="Permalink to &quot;7 创建 ClusterResourceSet&quot;">​</a></h2><p>创建 ClusterResourceSet 引用上一步创建的包含 Cilium 安装资源的 ConfigMap，使用 <code>clusterSelector</code> 参数指定根据 <code>cni=cilium</code> 的 Label 选择目标集群。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> addons.cluster.x-k8s.io/v1alpha4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ClusterResourceSet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium-crs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  namespace:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">spec:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  clusterSelector:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    matchLabels:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      cni:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  resources:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ConfigMap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cilium-crs-cm</span></span></code></pre></div><h2 id="_8-部署工作负载集群" tabindex="-1">8 部署工作负载集群 <a class="header-anchor" href="#_8-部署工作负载集群" aria-label="Permalink to &quot;8 部署工作负载集群&quot;">​</a></h2><p>为了方便用户上手，Cluster API 提供了 <code>clusterctl generate cluster</code> 命令用于快速生成创建工作负载集群的 YAML 模板。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">clusterctl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> generate</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster-1</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --flavor</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> development</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --kubernetes-version</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> v1.25.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --control-plane-machine-count=3</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  --worker-machine-count=3</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster-1.yaml</span></span></code></pre></div><p>我们这里先不去深究生成的资源文件，可以直接运行以下命令应用资源文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster-1.yaml</span></span></code></pre></div><p>输出类似于：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">clusterclass.cluster.x-k8s.io/quick-start</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> created</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">dockerclustertemplate.infrastructure.cluster.x-k8s.io/quick-start-cluster</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> created</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubeadmcontrolplanetemplate.controlplane.cluster.x-k8s.io/quick-start-control-plane</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> created</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">dockermachinetemplate.infrastructure.cluster.x-k8s.io/quick-start-control-plane</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> created</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">dockermachinetemplate.infrastructure.cluster.x-k8s.io/quick-start-default-worker-machinetemplate</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> created</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubeadmconfigtemplate.bootstrap.cluster.x-k8s.io/quick-start-default-worker-bootstraptemplate</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> created</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建了一个集群</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cluster.cluster.x-k8s.io/cluster-1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> created</span></span></code></pre></div><p>查看创建的工作负载集群，状态处于 Provisioned 说明已经部署完毕。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        PHASE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         AGE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     VERSION</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cluster-1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   Provisioned</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   9</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m19s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   v1.25.3</span></span></code></pre></div><p>获取工作负载集群 cluster-1 的 kubeconfig 文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kind</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubeconfig</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster-1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster-1.kubeconfig</span></span></code></pre></div><p>切换到 cluster-1 集群，可以看到当前集群还未安装 CNI 插件，因此所有 Node 处于 NotReady 状态，并且所有非 <code>hostNetwork: true</code> 的 Pod 都处于 Pending 状态。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KUBECONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cluster-1.kubeconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pod</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> node</span></span></code></pre></div><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20221228192933.png" alt=""></p><p>接下来我们切换回管理集群，并给 cluster-1 集群打上 <code>cni=cilium</code> 的 Label。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KUBECONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">~/.kube/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> label</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster-1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cni=cilium</span></span></code></pre></div><p>切换到 cluster-1 集群会发现此时已经开始部署 Cilium CNI 了，完成部署后 Node 的状态也会变为 Ready。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KUBECONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cluster-1.kubeconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pod</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> node</span></span></code></pre></div><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20221228193617.png" alt=""></p><p>我们也可以使用以下资源文件创建一个新的集群，并加上 <code>cni=cilium</code> 的 Label。ClusterResourceSet Controller 将会在集群完成部署后，自动将 ConfigMap 中的配置应用到新集群中。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cluster.x-k8s.io/v1alpha4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Cluster</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cluster-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    cni</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cilium</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 安装 Cilium</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  topology</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">quick-start</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # ClusterClass 的名字</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1.25.3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    workers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      machineDeployments</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">default-worker</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # ClusterClass 中定义的 machineDeployments</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">my-cluster-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span></span></code></pre></div><h2 id="_9-参考资料" tabindex="-1">9 参考资料 <a class="header-anchor" href="#_9-参考资料" aria-label="Permalink to &quot;9 参考资料&quot;">​</a></h2><ul><li>[1] Cluster API: <a href="https://cluster-api.sigs.k8s.io/introduction.html#kubernetes-cluster-apidiv-stylefloat-right-position-relative-display-inlineimg-srcimagesintroductionsvg-width160px-div" target="_blank" rel="noreferrer">https://cluster-api.sigs.k8s.io/introduction.html#kubernetes-cluster-apidiv-stylefloat-right-position-relative-display-inlineimg-srcimagesintroductionsvg-width160px-div</a></li><li>[2] kind: <a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation" target="_blank" rel="noreferrer">https://kind.sigs.k8s.io/docs/user/quick-start/#installation</a></li><li>[3] kubectl: <a href="https://kubernetes.io/docs/tasks/tools/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/tasks/tools/</a></li><li>[4] clusterctl: <a href="https://cluster-api.sigs.k8s.io/clusterctl/overview.html#overview-of-clusterctl" target="_blank" rel="noreferrer">https://cluster-api.sigs.k8s.io/clusterctl/overview.html#overview-of-clusterctl</a></li><li>[5] Episode 73: cluster api and flux with cilium: <a href="https://hackmd.io/@Echo-Live/073" target="_blank" rel="noreferrer">https://hackmd.io/@Echo-Live/073</a></li><li>[6] Installing Cilium via a ClusterResourceSet: <a href="https://blog.scottlowe.org/2021/10/07/installing-cilium-via-clusterresourceset/" target="_blank" rel="noreferrer">https://blog.scottlowe.org/2021/10/07/installing-cilium-via-clusterresourceset/</a></li><li>[7] ClusterResourceSet proposal: <a href="https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200220-cluster-resource-set.md" target="_blank" rel="noreferrer">https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200220-cluster-resource-set.md</a></li><li>[8] Cluster API Intro and Deep Dive - Yuvaraj Balaji Rao Kakaraparthi &amp; Vince Prignano, VMware: <a href="https://www.youtube.com/watch?v=9H8flXm_lKk" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=9H8flXm_lKk</a></li><li>[9] Build Your Own Cluster API Provider the Easy Way - Anusha Hegde, VMware &amp; Richard Case, Weaveworks: <a href="https://www.youtube.com/watch?v=HSdgmcAAXa8" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=HSdgmcAAXa8</a></li><li>[10] k8s 官方推荐的交付项目cluster-api使用和源码解读: <a href="https://zhuanlan.zhihu.com/p/450835027" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/450835027</a></li><li>[11] Cluster API - KubeAcademy: <a href="https://kube.academy/courses/cluster-api" target="_blank" rel="noreferrer">https://kube.academy/courses/cluster-api</a></li><li>[12] 一文讲透Cluster API的前世、今生与未来: <a href="https://segmentfault.com/a/1190000022650813" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000022650813</a></li><li>[13] How to Migrate 700 Kubernetes Clusters to Cluster API with Zero Down Time: <a href="https://www.youtube.com/watch?v=KzYV-fJ_wH0" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=KzYV-fJ_wH0</a></li></ul>`,51))])}const w=r(C,[["render",m]]);export{_ as __pageData,w as default};
