import{_ as i,c as a,o as n,P as t}from"./chunks/framework.kLAB-UjF.js";const c=JSON.parse('{"title":"Python","description":"","frontmatter":{"title":"Python","author":"Se7en","categories":["Interview"],"tags":["Python"]},"headers":[],"relativePath":"courses/interview/编程语言/02-python.md","filePath":"courses/interview/编程语言/02-python.md","lastUpdated":1749998980000}'),h={name:"courses/interview/编程语言/02-python.md"};function l(p,s,k,e,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="python-类方法、实例方法、静态方法、抽象方法" tabindex="-1">Python 类方法、实例方法、静态方法、抽象方法 <a class="header-anchor" href="#python-类方法、实例方法、静态方法、抽象方法" aria-label="Permalink to &quot;Python 类方法、实例方法、静态方法、抽象方法&quot;">​</a></h2><h3 id="方法类型对比表格" tabindex="-1">方法类型对比表格 <a class="header-anchor" href="#方法类型对比表格" aria-label="Permalink to &quot;方法类型对比表格&quot;">​</a></h3><table><thead><tr><th>方法类型</th><th>装饰器</th><th>第一个参数</th><th>调用方式</th><th>可访问内容</th><th>应用场景</th></tr></thead><tbody><tr><td>Instance Method</td><td>无</td><td><code>self</code></td><td>实例调用</td><td>实例属性、实例方法、类属性、类方法</td><td>实现实例的行为逻辑</td></tr><tr><td>Class Method</td><td><code>@classmethod</code></td><td><code>cls</code></td><td>类或实例调用</td><td>类属性、类方法</td><td>工厂方法、修改类级状态或行为</td></tr><tr><td>Static Method</td><td><code>@staticmethod</code></td><td>无</td><td>类或实例调用</td><td>无法访问类或实例上下文，仅使用传入参数</td><td>工具函数、与类相关但不依赖状态</td></tr><tr><td>Abstract Method</td><td><code>@abstractmethod</code></td><td>通常为 <code>self</code></td><td>子类中实现</td><td>定义接口（通常访问实例）</td><td>统一接口、强制子类实现方法</td></tr></tbody></table><h3 id="实例方法-instance-method" tabindex="-1">实例方法（Instance Method） <a class="header-anchor" href="#实例方法-instance-method" aria-label="Permalink to &quot;实例方法（Instance Method）&quot;">​</a></h3><p>实例方法是最常见的方法类型，用于访问和操作实例属性，定义实例行为。必须通过实例对象调用。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, name):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bark</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 实例方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> says woof!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建不同的实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dog1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Dog(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Buddy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dog2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Dog(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 调用相同的实例方法，输出不同结果</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dog1.bark())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：Buddy says woof!</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dog2.bark())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：Charlie says woof!</span></span></code></pre></div><h3 id="类方法-class-method" tabindex="-1">类方法（Class Method） <a class="header-anchor" href="#类方法-class-method" aria-label="Permalink to &quot;类方法（Class Method）&quot;">​</a></h3><p>类方法作用于类本身，常用于访问类变量或创建工厂方法。类方法可通过类或实例调用。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  # 类变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, name):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Dog.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> get_count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 类方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Total dogs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.count</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Dog(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Buddy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Dog(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Dog.get_count())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：Total dogs: 2</span></span></code></pre></div><h3 id="静态方法-static-method" tabindex="-1">静态方法（Static Method） <a class="header-anchor" href="#静态方法-static-method" aria-label="Permalink to &quot;静态方法（Static Method）&quot;">​</a></h3><p>静态方法不依赖类或实例的状态，适合实现与类逻辑相关但不需要上下文的工具方法。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">staticmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bark_sound</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">():  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 静态方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;woof!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Dog.bark_sound())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：woof!</span></span></code></pre></div><h3 id="抽象方法-abstract-method" tabindex="-1">抽象方法（Abstract Method） <a class="header-anchor" href="#抽象方法-abstract-method" aria-label="Permalink to &quot;抽象方法（Abstract Method）&quot;">​</a></h3><p>抽象方法是接口设计的一部分，必须由子类实现，适合用于统一多个子类的行为结构。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> speak</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 抽象方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> speak</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Woof!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> speak</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Meow!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Dog()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cat()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dog.speak())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：Woof!</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cat.speak())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：Meow!</span></span></code></pre></div><h3 id="方法之间的调用关系示例" tabindex="-1">方法之间的调用关系示例 <a class="header-anchor" href="#方法之间的调用关系示例" aria-label="Permalink to &quot;方法之间的调用关系示例&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> instance_method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;This is an instance method&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> class_method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 类方法中调用实例方法，必须先创建实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj.instance_method()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">staticmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> static_method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;This is a static method&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> call_class_from_instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__class__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.class_method()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> call_static_from_instance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass.static_method()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyClass.class_method())                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：This is an instance method</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyClass().call_class_from_instance())     </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：This is an instance method</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyClass().call_static_from_instance())    </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出：This is a static method</span></span></code></pre></div><p>✅ 总结调用关系：</p><table><thead><tr><th>调用关系</th><th>是否支持</th><th>示例</th></tr></thead><tbody><tr><td>实例方法 → 实例方法</td><td>✅ 支持</td><td><code>self.other_method()</code></td></tr><tr><td>实例方法 → 类方法</td><td>✅ 支持</td><td><code>self.__class__.class_method()</code></td></tr><tr><td>实例方法 → 静态方法</td><td>✅ 支持</td><td><code>ClassName.static_method()</code></td></tr><tr><td>类方法 → 类方法</td><td>✅ 支持</td><td><code>cls.other_class_method()</code></td></tr><tr><td>类方法 → 实例方法</td><td>❌ 直接不行，需先创建实例</td><td><code>obj = cls(); obj.instance_method()</code></td></tr></tbody></table>`,19)]))}const g=i(h,[["render",l]]);export{c as __pageData,g as default};
