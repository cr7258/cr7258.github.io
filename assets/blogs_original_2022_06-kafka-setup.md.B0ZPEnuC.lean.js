import{_ as k}from"./chunks/ArticleMetadata.CBANxfkh.js";import{_ as t,C as r,c as d,o as l,k as e,G as g,P as o,a as c,w as F,b as y,e as D}from"./chunks/framework.BhFhJsV2.js";import"./chunks/md5.Ek22RXBH.js";const K=JSON.parse('{"title":"Kafka 生产环境部署指南","description":"","frontmatter":{"title":"Kafka 生产环境部署指南","author":"Se7en","date":"2022/05/03 20:00","categories":["原创"],"tags":["Kafka"]},"headers":[],"relativePath":"blogs/original/2022/06-kafka-setup.md","filePath":"blogs/original/2022/06-kafka-setup.md","lastUpdated":1707227798000}'),A={name:"blogs/original/2022/06-kafka-setup.md"};function C(a,s,u,f,m,b){const p=k,h=r("ClientOnly");return l(),d("div",null,[s[0]||(s[0]=e("h1",{id:"kafka-生产环境部署指南",tabindex:"-1"},[c("Kafka 生产环境部署指南 "),e("a",{class:"header-anchor",href:"#kafka-生产环境部署指南","aria-label":'Permalink to "Kafka 生产环境部署指南"'},"​")],-1)),g(h,null,{default:F(()=>{var i,n;return[(((i=a.$frontmatter)==null?void 0:i.aside)??!0)&&(((n=a.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),y(p,{key:0,article:a.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),s[1]||(s[1]=o(`<h2 id="_1-kafka-基本概念和系统架构" tabindex="-1">1 Kafka 基本概念和系统架构 <a class="header-anchor" href="#_1-kafka-基本概念和系统架构" aria-label="Permalink to &quot;1 Kafka 基本概念和系统架构&quot;">​</a></h2><p>在 Kafka 集群中存在以下几种节点角色：</p><ul><li><strong>Producer</strong>：生产者，生产消息并推送到 Kafka 集群中。</li><li><strong>Consumer</strong>：消费者，从 Kafka 集群中拉取并消费消息。可以将一个和多个 Consumer 指定为一个 Consumer Group（消费者组），一个消费者组在逻辑上是一个订阅者，不同消费者组之间可以消费相同的数据，消费者组之间互不干扰。</li><li><strong>Broker</strong>：一台 Kafka 服务器就是一个 Broker，一个 Kafka 集群由多个 Broker 组成。</li><li><strong>Controller</strong>：Kafka 集群中的其中一台 Broker，负责集群中的成员管理和 Topic 管理。</li><li><strong>Zookeeper</strong>：Kafka 集群通过外部的 Zookeeper 来协调管理节点角色，存储集群的元数据信息。不过在 Kafka 2.8 版本开始可以不用 Zookeeper 作为依赖组件了，官网把这种模式称为 KRaft 模式，Kafka 使用的内置共识机制进行集群选举并且将元数据信息保存在 Kafka 集群中。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c705f1064c4e5a5cdf40b3fd17989714.png" alt=""></p><p>在 Kafka 中，<strong>副本（Replica）</strong> 分成两类：领导者副本（Leader Replica）和追随者副本（Follower Replica）。</p><ul><li><strong>Leader Replica</strong>：每个分区在创建时都要选举一个副本，称为 Leader 副本，其余的副本称为 Follower 副本。</li><li><strong>Follower Replica</strong>：从 Leader 副本中实时同步数据，当 Leader 副本发生故障时，某个 Follower 副本会提升为 Leader。在 Kafka 中，Follower 副本是不对外提供服务的。也就是说，只有 Leader 副本才可以响应消费者和生产者的读写请求。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/32eb554ef485bbd577b5b072747e12ca.png" alt=""></p><ul><li><strong>Record</strong>：Kafka 是消息引擎，这里的消息就是指 Kafka 处理的主要对象。</li><li><strong>Topic</strong>：主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。</li><li><strong>Consumer Offset</strong>：消费者位移，表示消费者的消费进度，每个消费者都有自己的消费者位移。</li><li><strong>Rebalance</strong>：重平衡，消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/1fbdc38eadccd82251523552636ca399.png" alt=""></p><h2 id="_2-集群容量预估" tabindex="-1">2 集群容量预估 <a class="header-anchor" href="#_2-集群容量预估" aria-label="Permalink to &quot;2 集群容量预估&quot;">​</a></h2><ul><li>假设 Kafka 集群每日需要承载 10 亿条数据，每条数据的大小大概是 10 KB，一天的数据总量约等于 10 TB。</li><li>为了数据的可靠性保证，我们设置 3 副本，每天的数据量为 10 * 3 = 30 TB。</li><li>Kafka 支持数据的压缩，假设压缩比是 0.75，那么我们每天实际需要的存储空间是 30 * 0.75 = 22.5 TB。</li><li>通常情况下我们会在 Kafka 中保留 7 天的数据，方便在出现问题时回溯重新消费，那么保存 7 天数据需要的存储空间是 22.5 * 7 = 157.5 TB。</li><li>一般情况下 Kafka 集群除了消息数据还有其他类型的数据，比如索引数据等，故我们再为这些数据预留出 10% 的磁盘空间，因此最终需要的存储空间为 157.5 / 0.9 = 175 TB。</li><li>根据二八法则估计，10 亿条数据中的 80%（8亿）会在一天中的 20%（4.8小时） 的时间中涌入。也就是说一天中的高峰时期 Kafka 集群需要扛住每秒 (10^9 * 0.8) / (24 * 0.2 * 60 * 60) = 4.6 万次的并发。</li><li>单台物理机可以扛住 4 ~ 5 万的并发，通常建议高峰时期的 QPS 控制在集群能够承载的 QPS 的 30% 左右，加上基于高可用的考量，这里选择使用 3 台 Kafka 物理机搭建集群。</li><li>3 台物理机，总共 175 TB 数据，平均每台机器 175 / 3 = 58 TB 数据，每台物理机使用 15 块 4 TB 的硬盘。</li></ul><p>总之在规划磁盘容量时你需要考虑下面这几个元素：</p><ul><li>新增消息数。</li><li>消息留存时间。</li><li>平均消息大小。</li><li>副本数。</li><li>是否启用压缩。</li></ul><h2 id="_3-资源评估" tabindex="-1">3 资源评估 <a class="header-anchor" href="#_3-资源评估" aria-label="Permalink to &quot;3 资源评估&quot;">​</a></h2><h3 id="_3-1-硬盘" tabindex="-1">3.1 硬盘 <a class="header-anchor" href="#_3-1-硬盘" aria-label="Permalink to &quot;3.1 硬盘&quot;">​</a></h3><p>SSD 固态硬盘比机械硬盘快主要体现在随机读写方面，比如 MySQL 中经常需要对硬盘进行随机读写，就要用到 SSD 固态硬盘。而 Kafka 在写磁盘的时候是 append-only 顺序追加写入的，而机械硬盘顺序读写的性能和内存是差不多的，所以对于 Kafka 集群来说使用机械硬盘就可以了。</p><p>关于磁盘选择另一个经常讨论的话题就是到底是否应该使用磁盘阵列（RAID）。使用 RAID 的两个主要优势在于：</p><ul><li>提供冗余的磁盘存储空间。</li><li>提供负载均衡。</li></ul><p>不过就 Kafka 而言，一方面 Kafka 自己实现了冗余机制来提供高可靠性；另一方面通过分区的概念，Kafka 也能在软件层面自行实现负载均衡。因此可以不搭建 RAID，使用普通磁盘组成的存储空间即可。</p><h3 id="_3-2-内存" tabindex="-1">3.2 内存 <a class="header-anchor" href="#_3-2-内存" aria-label="Permalink to &quot;3.2 内存&quot;">​</a></h3><p>Kafka 自身的 JVM 是用不了过多堆内存的，因为 Kafka 设计就是规避掉用 JVM 对象来保存数据，避免频繁 Full GC 导致的问题。建议设置 Kafka 的 JVM 堆内存为 6G，这是业界比较公认的一个合理的值。Kafka 会大量用到 Page Cache 来提升读写效率，将剩下的系统内存都作为 Page Cache 空间。这里建议最少选择 64G 内存的服务器，当然如果是 128G 内存那就更好了，这样可以放更多数据到 Page Cache 中。</p><h3 id="_3-3-cpu" tabindex="-1">3.3 CPU <a class="header-anchor" href="#_3-3-cpu" aria-label="Permalink to &quot;3.3 CPU&quot;">​</a></h3><p>通常情况下 Kafka 不太占用 CPU，CPU 不是性能的瓶颈。Kafka 的服务器一般是建议 16 核，当然如果可以给到 32 核那就最好不过了。</p><h3 id="_3-4-网络" tabindex="-1">3.4 网络 <a class="header-anchor" href="#_3-4-网络" aria-label="Permalink to &quot;3.4 网络&quot;">​</a></h3><p>对于 Kafka 这种通过网络大量进行数据传输的框架而言，带宽特别容易成为瓶颈。在高峰期每秒涌入 4.6 万条数据的情况下，每条数据 10 KB，每秒的数据量是 4.6 * 10000 * 10 * 1000 = 460 MB。现在数据中心中的交换机通常是千兆和万兆带宽，但是这里需要注意的是交换机中的千兆和万兆带宽的单位是 bit（位），我们刚才计算的每秒的数据量的单位是 Byte（字节），换算成 bit 需要乘 8，因此每秒的数据量是 460 * 8 = 3680 Mb，所以我们的网络应该至少是万兆。</p><h3 id="_3-5-文件系统" tabindex="-1">3.5 文件系统 <a class="header-anchor" href="#_3-5-文件系统" aria-label="Permalink to &quot;3.5 文件系统&quot;">​</a></h3><p>Kafka 在生产环境中建议部署在 Linux 操作系统上，根据官网的测试报告，XFS 的性能要强于 ext4，因此生产环境建议使用 XFS 文件系统。</p><h2 id="_4-系统参数设置" tabindex="-1">4 系统参数设置 <a class="header-anchor" href="#_4-系统参数设置" aria-label="Permalink to &quot;4 系统参数设置&quot;">​</a></h2><h3 id="_4-1-文件描述符" tabindex="-1">4.1 文件描述符 <a class="header-anchor" href="#_4-1-文件描述符" aria-label="Permalink to &quot;4.1 文件描述符&quot;">​</a></h3><p>Kafka 会读写大量的文件并且和客户端建立大量的 Socket 连接，在 Linux 系统中一切皆文件，这些操作都需要使用大量的文件描述符。 默认 Linux 系统只允许每个线程使用 1024 个文件描述符，这对 Kafka 来说显然是不够的，因此需要增加线程可以使用的文件描述符到 100000。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#编辑配置文件 /etc/security/limits.conf  (永久生效)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> - nofile 100000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#命令行执行（当前会话生效）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100000</span></span></code></pre></div><h3 id="_4-2-线程数" tabindex="-1">4.2 线程数 <a class="header-anchor" href="#_4-2-线程数" aria-label="Permalink to &quot;4.2 线程数&quot;">​</a></h3><p>Kafka 中主要有以下几类线程：</p><ul><li><p>Kafka 在网络层采用的是 Reactor 模式，是一种基于事件驱动的模式。其中有 3种线程：</p><ul><li><strong>Acceptor 线程</strong>：1个接收线程，负责监听新的连接请求，同时注册 OP_ACCEPT 事件，将新的连接按照轮询的方式交给对应的 Processor 线程处理。</li><li><strong>Processor 线程</strong>：N 个 处理器线程，其中每个 Processor 都有自己的 selector，它会向 Acceptor 分配的 SocketChannel 注册相应的 OP_READ 事件，N 的大小由<code>num.networker.threads</code> 参数决定。</li><li><strong>KafkaRequestHandler 线程</strong>：M 个 请求处理线程，职责是从 requestChannel 中的 requestQueue 取出 Request，处理以后再将 Response 添加到 requestChannel 中的 ResponseQueue 中。M 的大小由<code>num.io.threads</code> 参数决定；</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/6abd4b98dff036ab57a70471186f63e9.png" alt=""></p></li><li><p>另外 Kafka 在后台还会有一些其他线程：</p><ul><li>定期清理数据的线程。</li><li>Controller 负责感知和管控整个集群的线程。</li><li>副本同步拉取数据的线程。</li></ul></li></ul><p>我们可以通过以下方式修改最大可以使用的线程数。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#编辑配置文件 /etc/security/limits.conf  (永久生效)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> - nproc 4096</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#命令行执行（当前会话生效）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4096</span></span></code></pre></div><h3 id="_4-3-进程可以使用的最大内存映射区域数" tabindex="-1">4.3 进程可以使用的最大内存映射区域数 <a class="header-anchor" href="#_4-3-进程可以使用的最大内存映射区域数" aria-label="Permalink to &quot;4.3 进程可以使用的最大内存映射区域数&quot;">​</a></h3><p>Kafka 之所以吞吐量高，其中的一个重要原因就是因为 Kafka 在 Consumer 读取日志文件时使用了 mmap 的方式。mmap 将磁盘文件映射到内存，支持读和写，对内存的操作会反映在磁盘文件上。当客户端读取 Kafka 日志文件时，在进行 log 文件读取的时候直接将 log 文件读入用户态进行缓存，绕过了内核态的 Page Cache，避免了内核态和用户态的切换。</p><p>我们可以通过以下方式修改进程可以使用的最大内存映射区域数。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#编辑配置文件 /etc/sysctl.conf  (永久生效)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">vm.max_map_count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=262144</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">编辑完文件后命令行执行</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> sysctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  立即永久生效</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#命令行执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sysctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> vm.max_map_count=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">262144</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (当前会话生效)</span></span></code></pre></div><h3 id="_4-4-关闭-swap" tabindex="-1">4.4 关闭 swap <a class="header-anchor" href="#_4-4-关闭-swap" aria-label="Permalink to &quot;4.4 关闭 swap&quot;">​</a></h3><p>Kafka 重度使用 Page Cache，如果内存页 swap 到磁盘中会严重影响到 Kafka 的性能。 使用以下命令永久关闭 swap。</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">swapoff -a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;/ swap / s/^\\(.*\\)$/#\\1/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /etc/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">fstab</span></span></code></pre></div><h3 id="_4-5-jvm-参数" tabindex="-1">4.5 JVM 参数 <a class="header-anchor" href="#_4-5-jvm-参数" aria-label="Permalink to &quot;4.5 JVM 参数&quot;">​</a></h3><p>虽然 Kafka 的服务器端代码是使用 Scala 编写的，但是最终还是编译成 Class 文件在 JVM 上允许，因此运行 Kafka 之前需要准备好 Java 运行环境。Kafka 自2.0.0版本开始，已经正式摒弃对 Java 7 的支持了，因此至少使用 Java 8。</p><p>进入 <a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html" target="_blank" rel="noreferrer">Oracle 官网下载页面</a> 下载 JDK 8 压缩包。</p><p>编辑 /etc/profile 文件添加以下内容，设置 Java 环境变量，路径根据实际安装的位置修改。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JAVA_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/software/jdk</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$JAVA_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/bin</span></span></code></pre></div><p>编辑 /etc/profile 文件添加以下内容，设置 JVM 环境变量，在 Confluent 官网推荐了以下 GC 调优参数，该参数在 LinkedIn 的大型生产环境中得到过验证（基于 JDK 1.8 u5）。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#推荐的 GC 调优参数和 JVM 堆大小设置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KAFKA_HEAP_OPTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-Xms6g -Xmx6g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#后面会用到的环境变量，先提前设置了 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#Kafka 环境变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KAFKA_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/usr/local/kafka</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$KAFKA_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$PATH</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#JMX 端口，Kafka Eagle 监控会用到</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JMX_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;9999&quot;</span></span></code></pre></div><p>使环境变量生效。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /etc/profile</span></span></code></pre></div><p>以下是 LinkedIn 中的 Kafka 集群之一在高峰期的统计数据：</p><ul><li>60 Brokers</li><li>50k Partitions (replication factor 2)</li><li>800k Messages/sec in</li><li>300 MBps inbound, 1 GBps + outbound</li></ul><p>在该集群中所有的 Broker 中 90% 的 GC 暂停时间约为 21 毫秒，并且它们每秒执行的 Young GC 不到 1 次。</p><h2 id="_5-部署-kafka-集群" tabindex="-1">5 部署 Kafka 集群 <a class="header-anchor" href="#_5-部署-kafka-集群" aria-label="Permalink to &quot;5 部署 Kafka 集群&quot;">​</a></h2><h3 id="_5-1-机器规划" tabindex="-1">5.1 机器规划 <a class="header-anchor" href="#_5-1-机器规划" aria-label="Permalink to &quot;5.1 机器规划&quot;">​</a></h3><p>Zookeeper 节点和 Kafka 节点共用同一台物理机。</p><table><thead><tr><th>IP 地址</th><th>角色</th></tr></thead><tbody><tr><td>192.168.1.6</td><td>Kafka Broker，Zookeeper，Kafka Eagle</td></tr><tr><td>192.168.1.7</td><td>Kafka Broker，Zookeeper</td></tr><tr><td>192.168.1.8</td><td>Kafka Broker，Zookeeper</td></tr></tbody></table><h3 id="_5-2-下载并解压安装包" tabindex="-1">5.2 下载并解压安装包 <a class="header-anchor" href="#_5-2-下载并解压安装包" aria-label="Permalink to &quot;5.2 下载并解压安装包&quot;">​</a></h3><p>本次 Kafka 搭建的版本是 2.7.1，下载地址可以在 <a href="https://kafka.apache.org/downloads" target="_blank" rel="noreferrer">Kafka 官网下载页面</a> 中找到。将下载好的安装包解压到 /usr/local/kafka 目录。</p><h3 id="_5-3-部署-zookeeper" tabindex="-1">5.3 部署 Zookeeper <a class="header-anchor" href="#_5-3-部署-zookeeper" aria-label="Permalink to &quot;5.3 部署 Zookeeper&quot;">​</a></h3><p>Kafka 官网提供的压缩包中包含了 Zookeeper 所需的文件，我们可以直接使用 Kafka 提供的文件来部署 Zookeeper。当然你可以单独下载 Zookeeper 的安装包来部署。</p><h4 id="_5-3-1-创建相关目录" tabindex="-1">5.3.1 创建相关目录 <a class="header-anchor" href="#_5-3-1-创建相关目录" aria-label="Permalink to &quot;5.3.1 创建相关目录&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /usr/local/zk</span></span></code></pre></div><h4 id="_5-3-2-zookeeper-配置文件" tabindex="-1">5.3.2 Zookeeper 配置文件 <a class="header-anchor" href="#_5-3-2-zookeeper-配置文件" aria-label="Permalink to &quot;5.3.2 Zookeeper 配置文件&quot;">​</a></h4><p>编辑 config/zookeeper.properties 文件，3 台 Zookeeper 节点的配置文件是相同的。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#ZooKeeper 使用的基本时间单位（毫秒），心跳超时时间是 tickTime 的两倍</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tickTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#Leader 和 Follower 初始连接时最多能容忍的最多心跳数（2000 * 10 = 20s）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">initLimit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#Leader 和 Follower 节点之间请求和应答之间能容忍的最多心跳数（2000 * 5 = 10s）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">syncLimit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#数据目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dataDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/usr/local/zk</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#监听客户端连接的端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">clientPort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2181</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#最大客户端连接数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">maxClientCnxns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">60</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#集群信息（服务器编号，服务器地址，Leader-Follower 通信端口，选举端口）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.6:2888:3888</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.7:2888:3888</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.8:2888:3888</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#不启动 jetty 管理页面服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">admin.enableServer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#允许所有四字指令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">4lw.commands.whitelist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=*</span></span></code></pre></div><h4 id="_5-3-3-设置节点-id" tabindex="-1">5.3.3 设置节点 id <a class="header-anchor" href="#_5-3-3-设置节点-id" aria-label="Permalink to &quot;5.3.3 设置节点 id&quot;">​</a></h4><p>分别为 3 台 Zookeeper 节点设置不同的节点 id。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#节点 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /usr/local/zk/myid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#节点 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;2&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /usr/local/zk/myid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#节点 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;3&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /usr/local/zk/myid</span></span></code></pre></div><h4 id="_5-3-4-启动-zookeeper" tabindex="-1">5.3.4 启动 Zookeeper <a class="header-anchor" href="#_5-3-4-启动-zookeeper" aria-label="Permalink to &quot;5.3.4 启动 Zookeeper&quot;">​</a></h4><p>在 3 台机器上分别使用以下命令启动 Zookeeper。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">zookeeper-server-start.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config/zookeeper.properties</span></span></code></pre></div><h4 id="_5-3-5-查看-zookeeper" tabindex="-1">5.3.5 查看 Zookeeper <a class="header-anchor" href="#_5-3-5-查看-zookeeper" aria-label="Permalink to &quot;5.3.5 查看 Zookeeper&quot;">​</a></h4><p>使用 zookeeper-shell 连接 Zookeeper：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">zookeeper-shell.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.1.6:2181</span></span></code></pre></div><p>然后使用以下命令可以看到注册到 Zookeeper 集群中的节点信息。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  /zookeeper/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.6:2888:3888:participant</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.7:2888:3888:participant</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">server.3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.8:2888:3888:participant</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span></code></pre></div><h3 id="_5-4-部署-kafka" tabindex="-1">5.4 部署 Kafka <a class="header-anchor" href="#_5-4-部署-kafka" aria-label="Permalink to &quot;5.4 部署 Kafka&quot;">​</a></h3><h4 id="_5-4-1-kafka-配置文件" tabindex="-1">5.4.1 Kafka 配置文件 <a class="header-anchor" href="#_5-4-1-kafka-配置文件" aria-label="Permalink to &quot;5.4.1 Kafka 配置文件&quot;">​</a></h4><p>编辑 config/server.propertie 文件，每台 Kafka 节点除了以下配置以外，其余配置相同：</p><ul><li>broker.id：每个 Broker 的 id 必须唯一，分别设置为 0，1，2。</li><li>listeners：Kafka Broker 监听地址和端口。</li></ul><p>有以下几个参数需要注意：</p><ul><li>连接相关参数： <ul><li><code>listeners</code>：Kafka Broker 监听地址和端口。</li><li><code>zookeeper.connect</code>：Zookeeper 连接信息。</li></ul></li><li>请求处理相关参数： <ul><li><code>num.network.threads</code>：Broker 用于处理网络请求的线程数，默认值 3。</li><li><code>num.io.threads</code>：Broker 用于处理 I/O 的线程数，推荐值 8 * 磁盘数，默认值 8.</li><li><code>queued.max.requests</code>：在网络线程停止读取新请求之前，可以排队等待 I/O 线程处理的最大请求个数，默认值 500。增大<code>queued.max.requests</code> 能够缓存更多的请求。</li></ul></li><li><code>log.dirs</code>：数据存放目录，我们在每台机器上使用 15 块硬盘，每块硬盘单独挂载一个目录。</li><li>Topic 相关参数： <ul><li><code>num.partitions</code> Topic 的默认分区数。</li><li><code>default.replication.factor</code> Topic 中每个分区的默认副本数。</li></ul></li><li>数据保留相关参数： <ul><li><code>log.retention.hours</code>：最多保留多少小时的数据。</li><li><code>log.retention.bytes</code>：最多保留多少字节的数据。</li></ul></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Server Basics #############################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#broker 的 id,必须唯一</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">broker.id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Socket Server Settings #############################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#监听地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">listeners</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PLAINTEXT://192.168.1.6:9092</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#Broker 用于处理网络请求的线程数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">num.network.threads</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#Broker 用于处理 I/O 的线程数，推荐值 8 * 磁盘数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">num.io.threads</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=120</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#在网络线程停止读取新请求之前，可以排队等待 I/O 线程处理的最大请求个数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">queued.max.requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=1000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#socket 发送缓冲区大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">socket.send.buffer.bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=102400</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#socket 接收缓冲区大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">socket.receive.buffer.bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=102400</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#socket 接收请求的最大值（防止 OOM）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">socket.request.max.bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=104857600</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Log Basics #############################</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#数据目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">log.dirs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=/data1,/data2,/data3,/data4,/data5,/data6,/data7,/data8,/data9,/data10,/data11,/data12,/data13,/data14,/data15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#清理过期数据线程数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">num.recovery.threads.per.data.dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#单条消息最大 10 M</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">message.max.bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=10485760</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Topic Settings #############################</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#不允许自动创建 Topic</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">auto.create.topics.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#不允许 Unclean Leader 选举。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">unclean.leader.election.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#不允许定期进行 Leader 选举。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">auto.leader.rebalance.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#默认分区数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">num.partitions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#默认分区副本数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">default.replication.factor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#当生产者将 acks 设置为 &quot;all&quot;（或&quot;-1&quot;）时，此配置指定必须确认写入的副本的最小数量，才能认为写入成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">min.insync.replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#允许删除主题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">delete.topic.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Log Flush Policy #############################</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#建议由操作系统使用默认设置执行后台刷新</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#日志落盘消息条数阈值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#log.flush.interval.messages=10000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#日志落盘时间间隔</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#log.flush.interval.ms=1000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#检查是否达到flush条件间隔</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#log.flush.scheduler.interval.ms=200</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Log Retention Policy #############################</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#日志留存时间 7 天</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">log.retention.hours</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=168</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#最多存储 58TB 数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">log.retention.bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=63771674411008</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#日志文件中每个 segment 的大小为 1G</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">log.segment.bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=1073741824</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#检查 segment 文件大小的周期 5 分钟</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">log.retention.check.interval.ms</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=300000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#开启日志压缩</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">log.cleaner.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#日志压缩线程数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">log.cleaner.threads</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Zookeeper #############################</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#Zookeeper 连接参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">zookeeper.connect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=192.168.1.6:2181,192.168.1.7:2181,192.168.1.8:2181</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#连接 Zookeeper 的超时时间</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">zookeeper.connection.timeout.ms</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=6000</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">############################# Group Coordinator Settings #############################</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#为了缩短多消费者首次平衡的时间，这段延时期间 10s 内允许更多的消费者加入组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">group.initial.rebalance.delay.ms</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=10000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#心跳超时时间默认 10s，设置成 6s 主要是为了让 Coordinator 能够更快地定位已经挂掉的 Consumer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">session.timeout.ms</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#心跳间隔时间，session.timeout.ms &gt;= 3 * heartbeat.interval.ms。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">heartbeat.interval.ms</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=2s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#最长消费时间 5 分钟</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">max.poll.interval.ms</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=300000</span></span></code></pre></div><h4 id="_5-4-2-启动-kafka" tabindex="-1">5.4.2 启动 Kafka <a class="header-anchor" href="#_5-4-2-启动-kafka" aria-label="Permalink to &quot;5.4.2 启动 Kafka&quot;">​</a></h4><p>使用以下命令在后台启动 Kafka。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kafka-server-start.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config/server.properties</span></span></code></pre></div><h4 id="_5-4-3-查看-kafka-集群" tabindex="-1">5.4.3 查看 Kafka 集群 <a class="header-anchor" href="#_5-4-3-查看-kafka-集群" aria-label="Permalink to &quot;5.4.3 查看 Kafka 集群&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#连接 Zookeeper</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">zookeeper-shell.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  127.0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.0.1:2181</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#查看 Kafka 节点</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /brokers/ids</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#查看 Kafka Controller</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;version&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">:1,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;brokerid&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">:0,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;timestamp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;1631005545929&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">}</span></span></code></pre></div><h2 id="_6-部署-kafka-eagle-可视化工具-可选" tabindex="-1">6 部署 Kafka Eagle 可视化工具（可选） <a class="header-anchor" href="#_6-部署-kafka-eagle-可视化工具-可选" aria-label="Permalink to &quot;6 部署 Kafka Eagle 可视化工具（可选）&quot;">​</a></h2><p>Kafka Eagle 是一款 Kafka 可视化和管理软件，支持对多个不同版本的 Kafka 集群进行管理。Kafka Eagle 可以监控 Kafka 集群的健康状态，消费者组的消费情况，创建和删除 Topic，支持使用 KSQL 对 Kafka 消息做 Ad-hoc 查询，支持多种告警方式等等。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a8e2b58b29ffec0f1642f4b1a85ac799.png" alt=""></p><h3 id="_6-1-下载并解压安装包" tabindex="-1">6.1 下载并解压安装包 <a class="header-anchor" href="#_6-1-下载并解压安装包" aria-label="Permalink to &quot;6.1 下载并解压安装包&quot;">​</a></h3><p>在 <a href="http://download.kafka-eagle.org/" target="_blank" rel="noreferrer">Kafka Eagle 官网下载页面</a> 下载压缩包，将压缩包解压到 /usr/local/kafka-eagle 目录。</p><h3 id="_6-2-设置环境变量" tabindex="-1">6.2 设置环境变量 <a class="header-anchor" href="#_6-2-设置环境变量" aria-label="Permalink to &quot;6.2 设置环境变量&quot;">​</a></h3><p>编辑 /etc/profile 文件设置环境变量：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KE_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/usr/local/kafka-eagle/kafka-eagle-web-2.0.6</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$KE_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/bin</span></span></code></pre></div><h3 id="_6-3-kafka-eagle-配置" tabindex="-1">6.3 Kafka Eagle 配置 <a class="header-anchor" href="#_6-3-kafka-eagle-配置" aria-label="Permalink to &quot;6.3 Kafka Eagle 配置&quot;">​</a></h3><p>编辑 conf/system-config.properties 配置文件：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Kafka 集群列表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.zk.cluster.alias=cluster1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cluster1.zk.list=192.168.1.6:2181,192.168.1.7:2181,192.168.1.8:2181</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Zookeeper 线程池最大连接数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.zk.limit.size=32</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Kafka Eagle 的页面访问端口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.webui.port=8048</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 存储消费信息的类型，在 0.9 版本之前，消费</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 信息会默认存储在 Zookeeper 中，存储类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 设置 Zookeeper 即可；如果是在 0.10 版本之后，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 消费者信息默认存储在 Kafka 中，存储类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 设置为 kafka。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cluster1.kafka.eagle.offset.storage=kafka</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Kafka JMX 指标监控，Kafka 需要开启 JMX</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">cluster1.kafka.eagle.jmx.uri=service:jmx:rmi:///jndi/rmi://%s/jmxrmi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 开启性能监控，数据默认保留 30 天</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.metrics.charts=true</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.metrics.retain=15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># kafka sql topic records max</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.sql.topic.records.max=5000</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.sql.topic.preview.records.max=10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#  删除 Kafka Topic 时需要输入的密钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.topic.token=keadmin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 存储 Kafka Eagle 元数据信息的数据库</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 目前支持 MySQL 和 Sqlite，默认使用 Sqlite 进行存储</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">######################################</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.driver=org.sqlite.JDBC</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.url=jdbc:sqlite:/usr/local/kafka-eagle/kafka-eagle-web-2.0.6/db/ke.db</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.username=root</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kafka.eagle.password=123456</span></span></code></pre></div><h3 id="_6-4-启动-kafka-eagle" tabindex="-1">6.4 启动 Kafka Eagle <a class="header-anchor" href="#_6-4-启动-kafka-eagle" aria-label="Permalink to &quot;6.4 启动 Kafka Eagle&quot;">​</a></h3><p>使用以下命令启动 Kafka Eagle：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">bin/ke.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span></span></code></pre></div><p>看到以下输出，表示 Kafka Eagle 启动成功。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">......</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Welcome</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    __</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    ___</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     ____</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    __</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    ___</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            ______</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    ___</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    ______</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    __</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     ______</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> //_/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> //_/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">          /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ____/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ____/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ____/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /_</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">         /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ___</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ___</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /___</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ___</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /_/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /___</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /___</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/_/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  /_/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/_/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     /_/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  /_/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">       /_____/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /_/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">\\____/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   /_____//_____/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                                                                                             </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Version</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2.0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.6</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Copyright</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2016</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-2021</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*******************************************************************</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Kafka Eagle Service has started success.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Welcome, Now you can visit </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;http://192.168.1.6:8048&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Account:admin ,Password:123456</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*******************************************************************</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ke.sh [start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">restart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stats] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">/Usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> https://www.kafka-eagle.org/ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">/Usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*******************************************************************</span></span></code></pre></div><p>在浏览器输入 <a href="http://192.168.1.6:8048" target="_blank" rel="noreferrer">http://192.168.1.6:8048</a> 访问 Kafka Eagle 页面，用户名 admin，密码 123456。我们查看 Kafka 集群的节点状态。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/58f321454304b7726247ac37cd35d70f.png" alt=""></p><p>也可以在 Kafka Eagle 页面上管理 Topic。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8c22564313a1f6a2c7afd93ff1bf67ae.png" alt=""></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://docs.confluent.io/platform/current/kafka/deployment.html" target="_blank" rel="noreferrer">Confluent 官网 Running Kafka in Production</a></li><li><a href="https://segmentfault.com/a/1190000039723251" target="_blank" rel="noreferrer">Kafka(4)-kafka生产环境规划部署</a></li><li><a href="https://mp.weixin.qq.com/s/cU6fkgQH4ErTP-lKiVotrA" target="_blank" rel="noreferrer">2万长文，一文搞懂Kafka</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4NjY4MTU5Nw==&amp;mid=2247487568&amp;idx=1&amp;sn=fcd54d366b4e6ca049c43a3ce9d32ce4&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">Linux Page Cache调优在Kafka中的应用</a></li><li><a href="https://mp.weixin.qq.com/s/_1mnDFITm11AzMKXqmqFzg" target="_blank" rel="noreferrer">聊聊 page cache 与 Kafka 之间的事儿</a></li><li><a href="https://time.geekbang.org/column/article/101107" target="_blank" rel="noreferrer">Kafka线上集群部署方案怎么做？</a></li><li><a href="https://time.geekbang.org/column/article/101171" target="_blank" rel="noreferrer">最最最重要的集群参数配置（上）</a></li><li><a href="https://time.geekbang.org/column/article/101763" target="_blank" rel="noreferrer">最最最重要的集群参数配置（下）</a></li><li><a href="https://blog.csdn.net/daijiguo/article/details/104871390" target="_blank" rel="noreferrer">Kafka原理：kafka之mmap文件读写方式</a></li><li><a href="https://mp.weixin.qq.com/s/IiPeTZf6wd5OLqSJ5dySJQ" target="_blank" rel="noreferrer">Apache Kafka 集群部署指南</a></li><li><a href="https://cloud.tencent.com/developer/article/1421266" target="_blank" rel="noreferrer">图解Kafka的零拷贝技术到底有多牛？</a></li><li><a href="https://xie.infoq.cn/article/c06fea629926e2b6a8073e2f0" target="_blank" rel="noreferrer">终于知道 Kafka 为什么这么快了！</a></li><li><a href="https://segmentfault.com/a/1190000021175583" target="_blank" rel="noreferrer">深入了解Kafka【一】概述与基础架构</a></li><li><a href="https://www.cnblogs.com/smartloli/p/14722529.html" target="_blank" rel="noreferrer">Kafka2.8安装</a></li><li><a href="https://blog.csdn.net/zhongqi2513/article/details/120429015" target="_blank" rel="noreferrer">Apache Kafka 3.0 版本发布</a></li><li><a href="https://blog.csdn.net/qq_41324009/article/details/100584223" target="_blank" rel="noreferrer">Kafka 性能优化与问题深究</a></li></ul>`,113))])}const q=t(A,[["render",C]]);export{K as __pageData,q as default};
