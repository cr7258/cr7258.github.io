import{_ as t}from"./chunks/ArticleMetadata.CVGXiGE3.js";import{_ as e,C as r,c as d,o as h,k as l,G as F,P as g,a as y,w as D,b as c,e as o}from"./chunks/framework.4HvPmkFJ.js";import"./chunks/md5.Db34zHzH.js";const P=JSON.parse('{"title":"深入剖析 Kubernetes 原生 Sidecar 容器","description":"","frontmatter":{"title":"深入剖析 Kubernetes 原生 Sidecar 容器","author":"Se7en","date":"2024/05/31 13:30","categories":["原创"],"tags":["Kubernetes","Sidecar","Istio"]},"headers":[],"relativePath":"blogs/original/2024/02-sidecar-containers.md","filePath":"blogs/original/2024/02-sidecar-containers.md","lastUpdated":1717133267000}'),C={name:"blogs/original/2024/02-sidecar-containers.md"};function A(i,s,B,u,m,E){const p=t,k=r("ClientOnly");return h(),d("div",null,[s[0]||(s[0]=l("h1",{id:"深入剖析-kubernetes-原生-sidecar-容器",tabindex:"-1"},[y("深入剖析 Kubernetes 原生 Sidecar 容器 "),l("a",{class:"header-anchor",href:"#深入剖析-kubernetes-原生-sidecar-容器","aria-label":'Permalink to "深入剖析 Kubernetes 原生 Sidecar 容器"'},"​")],-1)),F(k,null,{default:D(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(h(),c(p,{key:0,article:i.$frontmatter},null,8,["article"])):o("",!0)]}),_:1}),s[1]||(s[1]=g(`<h2 id="_1-sidecar-容器的概念" tabindex="-1">1 Sidecar 容器的概念 <a class="header-anchor" href="#_1-sidecar-容器的概念" aria-label="Permalink to &quot;1 Sidecar 容器的概念&quot;">​</a></h2><p>sidecar 容器的概念在 Kubernetes 早期就已经存在。一个明显的例子就是 2015 年的这篇 Kubernetes <a href="https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/" target="_blank" rel="noreferrer">博客文章</a>，其中提到了 sidecar 模式。多年来，sidecar 模式在应用程序中变得越来越普遍，使用场景也变得更加多样化。</p><p>其中比较经典的就是 Istio 通过 sidecar 容器实现了服务网格的功能，Envoy 作为 sidecar 容器与应用程序容器一起运行，负责处理所有的网络流量，实现了服务之间的安全通信、流量管理、监控等功能。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240530185903.png" alt=""></p><h2 id="_2-当前-sidecar-容器的问题" tabindex="-1">2 当前 Sidecar 容器的问题 <a class="header-anchor" href="#_2-当前-sidecar-容器的问题" aria-label="Permalink to &quot;2 当前 Sidecar 容器的问题&quot;">​</a></h2><p>当前的 Kubernetes 原语可以很好地处理这种模式，但是对于几个用例来说，它们还存在着不足，并且迫使应用程序采用奇怪的变通方法。</p><h3 id="_2-1-问题-1-使用-sidecar-容器的-job" tabindex="-1">2.1 问题 1：使用 Sidecar 容器的 Job <a class="header-anchor" href="#_2-1-问题-1-使用-sidecar-容器的-job" aria-label="Permalink to &quot;2.1 问题 1：使用 Sidecar 容器的 Job&quot;">​</a></h3><p>假设你有一个 Job，其中包含两个容器：一个是用于执行作业的主容器，另一个只是完成辅助任务的 sidecar 容器。这个辅助容器可以是用于服务网格、收集指标或者日志的服务等等。当 Job 中的主容器完成任务退出时，由于 sidecar 容器还在运行，最终会导致 Pod 无法正常终止。此外，对于 <code>restartPolicy:Never</code> 的 Job，当 sidecar 容器因为 OOM 被杀死时，它不会被重新启动，如果 sidecar 容器为其他容器提供网络或者安全通信，这可能会导致 Pod 无法使用。</p><p>下面我们可以通过一个简单的例子来演示这个问题。本文中的所有示例文件都可以在 <a href="https://github.com/cr7258/hands-on-lab/tree/main/kubernetes/sidecar-containers" target="_blank" rel="noreferrer">Github</a> 中找到。 下面是一个 Job 的 YAML 文件，其中包含两个容器：一个是主容器 <code>main-container-1</code>，另一个是 sidecar 容器 <code>sidecar-container-1</code>。 <code>main-container-1</code> 容器在完成一些任务后会正常退出，而 <code>sidecar-container-1</code> 容器会则一直运行。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">batch/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo &quot;main container is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              for i in $(seq 1 5); do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                echo &quot;main container is doing some task: $i/5&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              done</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo &quot;main container completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo &quot;sidecar container is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                echo &quot;sidecar container is collecting logs...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                sleep 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">OnFailure</span></span></code></pre></div><p>执行以下命令应用上面的 Job 资源。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-job-cannot-complete.yaml</span></span></code></pre></div><p>在本文的实验中，我们会在一个 Pod 中同时运行多个容器，为了方便观察日志，我们可以使用 <a href="https://github.com/stern/stern" target="_blank" rel="noreferrer">stern</a> 这个开源工具。 stern 允许我们同时查看多个 Pod 中多个容器的日志，并且以不同颜色进行显示，方便我们直观地进行区分。</p><p>执行以下命令查看 <code>myapp</code> Pod 中所有容器的日志：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># --diff-container 参数会为每个容器的日志添加不同的颜色，默认情况下，只会为每个 Pod 的日志添加不同的颜色</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">stern</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --diff-container</span></span></code></pre></div><p>从日志中可以看到，<code>main-container-1</code> 容器完成任务后正常退出，而 <code>sidecar-container-1</code> 还在持续运行，最终导致这个 Job 无法正常结束。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240528213455.png" alt=""></p><p>如果我们提前在另一个窗口执行 <code>kubectl get pod -w</code> 命令，可以观察到 Pod 的状态变化如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp-fdpb7</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp-fdpb7</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp-fdpb7</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     ContainerCreating</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp-fdpb7</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">             0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp-fdpb7</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     NotReady</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          17</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span></code></pre></div><p>每行状态的解释如下，完整的 Pod 资源内容请查看 <code>logs/1-job-cannot-complete-status.yaml</code> 文件：</p><ul><li>1.Pod 创建后还未被调度，Pod 的 Phase 为 <code>Pending</code>。</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  phase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pending</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  qosClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">BestEffort</span></span></code></pre></div><ul><li>2.Pod 已经被调度到 Node 上，但是容器还未被创建，Pod 的 Phase 还是 <code>Pending</code>。</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  conditions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PodScheduled</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # Pod 已经被调度到 Node 上</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  phase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pending</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  qosClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">BestEffort</span></span></code></pre></div><ul><li>3.正在等待创建容器，Pod 还没有处于 Ready 状态，Pod 的 Phase 仍为 <code>Pending</code>。</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  conditions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Initialized</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;containers with unready status: [main-container-1 sidecar-container-1]&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      reason</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainersNotReady</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;False&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # Pod 还没有处于 Ready 状态</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Ready</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;containers with unready status: [main-container-1 sidecar-container-1]&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      reason</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainersNotReady</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;False&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainersReady</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PodScheduled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containerStatuses</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      imageID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      ready</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      started</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 等待容器创建完成</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          reason</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainerCreating</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      imageID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      ready</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      started</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 等待容器创建完成</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          reason</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainerCreating</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  hostIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">172.19.0.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  phase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pending</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  qosClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">BestEffort</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span></code></pre></div><ul><li>4.所有容器在运行中，Pod 的 Phase 变为 <code>Running</code>。</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  conditions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Initialized</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:27Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Ready</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:27Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainersReady</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PodScheduled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containerStatuses</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">containerID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">containerd://af182325a9bb106697dc56f7ff25e96d6dd22d45eb134990d9c4820349c11232</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      imageID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      ready</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      started</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        running</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 主容器在运行中</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          startedAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:26Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">containerID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">containerd://fb24805ffe5ee1fddb64a728ee8853299f9c093b2722b77d54808d9821b90b0e</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      imageID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      ready</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      started</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        running</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># sidecar 容器在运行中</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          startedAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:26Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  hostIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">172.19.0.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  phase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Running</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  podIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10.244.0.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  podIPs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10.244.0.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  qosClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">BestEffort</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span></code></pre></div><ul><li>5.<code>main-container-1</code> 容器完成任务后正常退出，而 <code>sidecar-container-1</code> 还在持续运行，最终这个 Job 无法正常结束。</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  conditions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Initialized</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:42Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;containers with unready status: [main-container-1]&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      reason</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainersNotReady</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;False&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Ready</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:42Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;containers with unready status: [main-container-1]&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      reason</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainersNotReady</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;False&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ContainersReady</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">lastProbeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PodScheduled</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containerStatuses</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">containerID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">containerd://af182325a9bb106697dc56f7ff25e96d6dd22d45eb134990d9c4820349c11232</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      imageID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      ready</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      started</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        terminated</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 主容器已经正常退出</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          containerID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">containerd://af182325a9bb106697dc56f7ff25e96d6dd22d45eb134990d9c4820349c11232</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          exitCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          finishedAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:41Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          reason</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Completed</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          startedAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:26Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">containerID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">containerd://fb24805ffe5ee1fddb64a728ee8853299f9c093b2722b77d54808d9821b90b0e</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      imageID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lastState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      ready</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      started</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        running</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># sidecar 容器还在继续运行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          startedAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:26Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  hostIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">172.19.0.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  phase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Running</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  podIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10.244.0.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  podIPs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10.244.0.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  qosClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">BestEffort</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2024-05-28T13:05:25Z&quot;</span></span></code></pre></div><p>下面这张图展示了上面描述的 Pod 状态变化过程：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240531124837.png" alt=""></p><p>这里有几个地方需要解释一下，在我们观察容器和 Pod 的状态时，Kubernetes 提供了一些字段来帮助我们理解 Pod 的状态：</p><ul><li><a href="https://v1-28.docs.kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase" target="_blank" rel="noreferrer">Pod phase</a>: Pod phase 是对 Pod 在其生命周期中所处位置的一个高层次的概括，包括 <code>Pending</code>、<code>Running</code>、<code>Succeeded</code>、<code>Failed</code> 和 <code>Unknown</code>。 <ul><li><code>Pending</code>：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未被创建。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间。</li><li><code>Running</code>：Pod 中的所有容器都已经被创建，并且至少有一个容器正在运行，或者正在启动或者重启。</li><li><code>Succeeded</code>：Pod 中的所有容器都已经成功终止，并且不会再重启。</li><li><code>Failed</code>：Pod 中的所有容器都已经终止，但至少有一个容器是因为失败而终止。</li><li><code>Unknown</code>：Pod 的状态无法被获取，通常是由于与 Pod 应该运行的节点通信失败导致的。</li></ul></li><li><a href="https://v1-28.docs.kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-states" target="_blank" rel="noreferrer">Container states</a>: 容器的状态，包括 <code>Waiting</code>、<code>Running</code> 和 <code>Terminated</code>。我在上图右边部分的方框中用不同的颜色标记了这三种 Container states，另外在括号内部还对相同 Container states 的不同情况作了区分。 <ul><li><code>Waiting</code>：容器正在等待某些条件满足，例如正在拉取镜像，或者应用 Secret 数据。</li><li><code>Running</code>：容器正在运行中。</li><li><code>Terminated</code>：容器已经终止，可能是正常结束或者因为某些原因失败。如果你使用 <code>kubectl describe pod</code> 或者 <code>kubectl get pod</code> 命令来查询包含 <code>Terminated</code> 状态的容器的 Pod 时， 你会看到容器进入此状态的原因、退出代码以及容器执行期间的起止时间。</li></ul></li><li><a href="https://kubernetes.io/docs/tasks/debug/debug-application/debug-init-containers/#understanding-pod-status" target="_blank" rel="noreferrer">Pod Status</a>：在执行 <code>kubectl get pod</code> 命令时返回的 Pod 状态，该字段是 Pod 内所有容器状态的一个聚合，具体的源代码参见 <a href="https://github.com/kubernetes/kubernetes/blob/v1.28.10/pkg/printers/internalversion/printers.go#L816-L995" target="_blank" rel="noreferrer">printPod 函数</a>.有以下几个常见的状态： <ul><li><code>Init:N/M</code>：Pod 包含 M 个 init 容器，其中 N 个已经运行完成。</li><li><code>Init:Error</code>：Pod 中的某个 init 容器执行失败。</li><li><code>Init:CrashLoopBackOff</code>：Pod 中的某个 init 容器多次失败。</li><li><code>Pending</code>：Pod 尚未开始创建 init 容器。</li><li><code>PodInitializing</code>：Pod 已经执行完所有 init 容器，在等待创建主容器。</li><li><code>ContainerCreating</code>：当 Pod 中不包含 init 容器时，在等待创建主容器时会显示这个状态。</li><li><code>Running</code>：Pod 中的所有容器都在运行中。</li></ul></li><li><strong>Pod Ready</strong>：以 <code>Ready 的容器数量 / 所有容器的数量</code>的形式展示。</li></ul><p>测试完毕后，执行以下命令删除这个 Job。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-job-cannot-complete.yaml</span></span></code></pre></div><h3 id="_2-2-问题-2-日志转发和指标收集的-sidecar-容器" tabindex="-1">2.2 问题 2：日志转发和指标收集的 Sidecar 容器 <a class="header-anchor" href="#_2-2-问题-2-日志转发和指标收集的-sidecar-容器" aria-label="Permalink to &quot;2.2 问题 2：日志转发和指标收集的 Sidecar 容器&quot;">​</a></h3><p>日志转发和指标收集的 sidecar 容器应该在主应用容器之前启动，以便能够完整地收集日志和指标。如果 sidecar 容器在主应用容器之后启动，而主应用容器在启动时崩溃，则可能会导致日志丢失（取决于日志是否通过共享卷或者通过 Localhost 网络来进行收集）。 另外，在 Pod 停止时，如果 sidecar 容器先于其他容器退出，也会导致日志丢失的问题。</p><h3 id="_2-3-问题-3-服务网格" tabindex="-1">2.3 问题 3：服务网格 <a class="header-anchor" href="#_2-3-问题-3-服务网格" aria-label="Permalink to &quot;2.3 问题 3：服务网格&quot;">​</a></h3><p>服务网格的 sidecar 容器需要在其他容器之前运行并准备就绪，以确保流量能够正确地通过服务网格。在关闭时，如果服务网格容器先于其他容器终止，也可能会导致流量异常。</p><h3 id="_2-4-问题-4-配置-密钥" tabindex="-1">2.4 问题 4：配置/密钥 <a class="header-anchor" href="#_2-4-问题-4-配置-密钥" aria-label="Permalink to &quot;2.4 问题 4：配置/密钥&quot;">​</a></h3><p>当前，一些 Pod 使用 init 容器来获取配置/密钥，然后使用 sidecar 容器来持续监视变更并将更新推送给主容器，这需要两个独立的容器来实现。也许可以考虑使用同一个 sidecar 容器来处理这两种情况，以简化实现。</p><h2 id="_3-什么是原生-sidecar-容器" tabindex="-1">3 什么是原生 Sidecar 容器 <a class="header-anchor" href="#_3-什么是原生-sidecar-容器" aria-label="Permalink to &quot;3 什么是原生 Sidecar 容器&quot;">​</a></h2><p>Kubernetes 1.28 引入了一种新型容器 - sidecar 容器。Kubernetes 将 sidecar 容器作为 init 容器的一个特例来实现，在 Pod 启动后，sidecar 容器仍将保持运行状态。</p><p>具体的实现方式是在 init 容器中添加了一个新的 <code>restartPolicy</code> 字段， 该字段在 <code>SidecarContainers</code> 特性门控启用时可用（该特性自 Kubernetes v1.29 起默认启用）。该字段是可选的，如果对其设置，则唯一有效的值为 <code>Always</code>。设置了这个字段以后，init 容器就成为了 sidecar 容器，它们会在 Pod 的整个生命周期内持续运行，而不是像 init 容器那样在成功执行完任务后就退出。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">secret-fetch</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">secret-fetch:1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">network-proxy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">network-proxy:1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  ...</span></span></code></pre></div><p>接下来让我们通过一些实验来深入理解 sidecar 容器的特性。</p><h2 id="_4-环境准备" tabindex="-1">4 环境准备 <a class="header-anchor" href="#_4-环境准备" aria-label="Permalink to &quot;4 环境准备&quot;">​</a></h2><p>在本文中，我们将使用 <a href="https://kind.sigs.k8s.io/" target="_blank" rel="noreferrer">Kind</a> 来创建一个 Kubernetes 集群。Kind 是一个用于在 Docker 容器中运行本地 Kubernetes 集群的工具，它使用 Docker 容器作为节点，并在这些节点上运行 Kubernetes 的相关组件。</p><p>在 Kind 配置文件中启用 <code>SidecarContainers</code> 特性门控，如下所示：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Cluster</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kind.x-k8s.io/v1alpha4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">featureGates</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  SidecarContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span></code></pre></div><p>然后执行以下命令创建一个 Kubernetes 集群，集群的版本为 v1.28.0。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kind</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --name=sidecar-demo-cluster</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">--image </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kindest/node:v1.28.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">--config </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-feature-enable.yaml</span></span></code></pre></div><h2 id="_5-init-容器和主容器" tabindex="-1">5 Init 容器和主容器 <a class="header-anchor" href="#_5-init-容器和主容器" aria-label="Permalink to &quot;5 Init 容器和主容器&quot;">​</a></h2><p>首先我们先来观察一下只有 init 容器和普通主容器的情况。在下面的示例中，我们定义了 3 个 init 容器和 2 个主容器。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 2 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 3 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 3 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 3 completed task and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span></code></pre></div><p>执行以下命令应用上面的 Pod 资源。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-init-and-main-containers.yaml</span></span></code></pre></div><p>执行 stern 命令查看 Pod 的日志，可以看到 3 个 init 容器是按照定义的顺序依次启动的。每个 init 容器在执行完任务后都会正常退出，而下一个 init 容器则会等到前一个 init 容器退出后才会开始启动。</p><p>等到所有的 init 容器退出后，两个主容器才会开始启动，它们之间的启动并没有先后顺序。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240528215324.png" alt=""></p><p>如果我们提前在另一个窗口执行 <code>kubectl get pod -w</code> 命令，可以观察到 Pod 的状态变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:1/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:1/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:2/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          23</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:2/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          24</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     PodInitializing</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          34</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          35</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span></code></pre></div><p>每行状态的解释如下，完整的 Pod 资源内容请查看 <code>logs/2-init-and-main-containers-status.yaml</code> 文件：</p><ul><li>1.Pod 创建后还未被调度。</li><li>2.Pod 已经被调度到 Node 上，但是容器还未被创建。</li><li>3.等待创建第 1 个 init 容器。</li><li>4.第 1 个 init 容器正在运行。</li><li>5.第 1 个 init 容器正常退出，等待创建第 2 个 init 容器。</li><li>6.第 2 个 init 容器正在运行。</li><li>7.第 2 个 init 容器正常退出，等待创建第 3 个 init 容器。</li><li>8.第 3 个 init 容器正在运行。</li><li>9.所有的 init 容器都已经正常退出，等待创建 <code>main-container-1</code> 和 <code>main-container-2</code> 两个主容器。</li><li>10.两个主容器都正在运行。</li></ul><p>下面这张图展示了上面描述的 Pod 状态变化过程：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240528222458.png" alt=""></p><p>测试完毕后，执行以下命令删除这个 Pod。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 执行 --force 参数立即删除 Pod，方便我们快速进行实验</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 不等待 terminationGracePeriodSeconds（默认是 30s）时间就让 Kubelet 强制发送 SIGKILL 信号，因为我们当前的容器并不会处理 SIGTERM 信号，这将在第 9 小节中会进一步说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 如果这里不使用 --force 参数，容器将等待 30s 后容器才会退出， </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-init-and-main-containers.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span></span></code></pre></div><h2 id="_6-init-容器、sidecar-容器和主容器" tabindex="-1">6 Init 容器、Sidecar 容器和主容器 <a class="header-anchor" href="#_6-init-容器、sidecar-容器和主容器" aria-label="Permalink to &quot;6 Init 容器、Sidecar 容器和主容器&quot;">​</a></h2><p>接下来，我们在 Pod 中引入 sidecar 容器，sidecar 容器是设置了 <code>restartPolicy: Always</code> 的 init 容器。在下面的示例中，我们定义了 3 个 init 容器、2 个 sidecar 容器和 2 个主容器。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # sidecar 容器是设置了 restartPolicy: Always 的 init 容器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span></code></pre></div><p>执行以下命令应用上面的 Pod 资源。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-init-and-sidecar-and-main-containers.yaml</span></span></code></pre></div><p>从日志中我们可以清晰地看到整个 Pod 的启动过程。首先，<code>init-container-1</code> 作为第一个 init 容器启动，在成功执行完任务后正常退出。</p><p>接下来，<code>sidecar-container-1</code> 作为第一个 sidecar 容器开始启动，接着是 <code>sidecar-container-2</code> 容器 。与 init 容器类似，sidecar 容器也是按照定义的顺序逐个启动的。不同的是，sidecar 不会像 init 容器那样在完成任务后退出。这确保了 sidecar 容器可以在 Pod 的整个生命周期内提供辅助功能。</p><p>当两个 sidecar 容器启动并成功运行后，两个主容器才会开始启动。两个主容器之间并没有固定的启动顺序，它们几乎是同时启动的。</p><p>最后我们可以看到 sidecar 容器和主容器会一直运行，交替输出日志。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240528222851.png" alt=""></p><p>如果我们提前在另一个窗口执行 <code>kubectl get pod -w</code> 命令，可以观察到 Pod 的状态变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:1/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          11</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:2/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     PodInitializing</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span></code></pre></div><p>每行状态的解释如下，完整的 Pod 资源内容请查看 <code>logs/3-init-and-sidecar-and-main-containers-status.yaml</code> 文件：</p><ul><li>1.Pod 创建后还未被调度。</li><li>2.Pod 已经被调度到 Node 上，但是容器还未被创建。</li><li>3.等待创建第 1 个 init 容器。</li><li>4.第 1 个 init 容器正在运行。</li><li>5.第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</li><li>6.第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。</li><li>7.第 2 个 sidecar 容器正在运行，等待创建 <code>main-container-1</code> 和 <code>main-container-2</code> 两个主容器。</li><li>8.两个主容器都正在运行。</li></ul><p>注意 <code>READY</code> 字段显示的容器数量是 4（2个 sidecar 容器 + 2 个主容器），而不是 2。这是因为 sidecar 容器也被包含在内，而 init 容器并不会被计算在内，因为 init 容器执行完任务就退出了。</p><p>下面这张图展示了上面描述的 Pod 状态变化过程：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240531124248.png" alt=""></p><p>测试完毕后，执行以下命令删除这个 Pod。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-init-and-sidecar-and-main-containers.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span></span></code></pre></div><h2 id="_7-sidecar-容器的-restartpolicy" tabindex="-1">7 Sidecar 容器的 RestartPolicy <a class="header-anchor" href="#_7-sidecar-容器的-restartpolicy" aria-label="Permalink to &quot;7 Sidecar 容器的 RestartPolicy&quot;">​</a></h2><p>我们前面提到过，sidecar 容器是通过在原有的 init 容器中设置 <code>restartPolicy: Always</code> 来实现的。这意味着如果 sidecar 容器异常退出，kubelet 会自动重启它，从而确保 sidecar 容器在 Pod 的整个生命周期内都能一直运行。 在以下示例中，我们定义了两个 sidecar 容器，并分别设置它们运行 20 秒和 30 秒后退出。通过这种方式，我们可以观察 sidecar 容器的重启行为。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># sidecar 容器完成任务后退出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 20</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># sidecar 容器完成任务后退出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 30</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span></code></pre></div><p>执行以下命令应用上面的 Pod 资源。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-sidecar-containers-restart.yaml</span></span></code></pre></div><p>通过日志我们可以看到 <code>sidecar-container-1</code> 和 <code>sidecar-container-2</code> 分别在 20 秒和 30 秒后退出，然后又被重新启动了。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240529081212.png" alt=""></p><p>如果我们提前在另一个窗口执行 <code>kubectl get pod -w</code> 命令，可以观察到 Pod 的状态变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:1/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          11</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:2/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     PodInitializing</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          32</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (2s </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ago</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)   33s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (11s </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ago</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)   42s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (1s </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ago</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)    43s</span></span></code></pre></div><p>每行状态的解释如下，完整的 Pod 资源内容请查看 <code>logs/4-sidecar-containers-restart-status.yaml</code> 文件：</p><ol><li>Pod 创建后还未被调度。</li><li>Pod 已经被调度到 Node 上，但是容器还未被创建。</li><li>等待创建第 1 个 init 容器。</li><li>第 1 个 init 容器正在运行。</li><li>第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</li><li>第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。</li><li>第 2 个 sidecar 容器正在运行，等待创建 <code>main-container-1</code> 和 <code>main-container-2</code> 两个主容器。</li><li>两个主容器都正在运行。</li><li><code>sidecar-container-1</code> 退出，kubelet 根据 <code>restartPolicy: Always</code> 自动重启 <code>sidecar-container-1</code>。</li><li><code>sidecar-container-1</code> 重启成功，所有容器都在运行状态。</li><li><code>sidecar-container-2</code> 退出，kubelet 根据 <code>restartPolicy: Always</code> 自动重启 <code>sidecar-container-2</code>。</li><li><code>sidecar-container-2</code> 重启成功，所有容器都在运行状态。</li></ol><p>下面这张图展示了上面描述的 Pod 状态变化过程：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240531125118.png" alt=""></p><p>测试完毕后，执行以下命令删除这个 Pod。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-sidecar-containers-restart.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span></span></code></pre></div><h2 id="_8-容器探针" tabindex="-1">8 容器探针 <a class="header-anchor" href="#_8-容器探针" aria-label="Permalink to &quot;8 容器探针&quot;">​</a></h2><p>在上面的实验中，我们知道了主容器要等到 sidecar 容器运行以后才会开始启动。那么 sidecar 容器的探针是否会影响到主容器的启动呢？也就是说，主容器是否需要等到 sidecar 容器 Ready 后才能启动呢？让我们通过以下实验来寻找答案。</p><p>sidecar 容器允许我们像主容器一样设置探针（startupProbe, readinessProbe, livenessProbe）来检查容器的健康状态。在下面的例子中，我们为两个 sidecar 容器分别添加了 readiness 探针，每个探针都会在容器启动后等待 30 秒才会通过。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      readinessProbe</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># sidecar 容器的 readiness 探针等待 30 秒通过</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        exec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo &quot;readiness probe of sidecar container 1 is starting...&quot; &gt;&gt; /proc/1/fd/1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 30</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo &quot;readiness probe of sidecar container 1 passed successfully&quot; &gt;&gt; /proc/1/fd/1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        timeoutSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">999</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      readinessProbe</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># sidecar 容器的 readiness 探针等待 30 秒通过</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        exec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo &quot;readiness probe of sidecar container 2 is starting...&quot; &gt;&gt; /proc/1/fd/1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 30</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo &quot;readiness probe of sidecar container 2 passed successfully&quot; &gt;&gt; /proc/1/fd/1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        timeoutSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">999</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span></code></pre></div><p>通过观察容器日志可以发现，两个主容器在 sidecar 容器的 readiness 探针通过之前就已经启动并开始执行任务了。 这表明主容器的启动并不需要等待 sidecar 容器达到 Ready 状态，只要 sidecar 容器处于 Running 状态即可。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240529100622.png" alt=""></p><p>如果我们提前在另一个窗口执行 <code>kubectl get pod -w</code> 命令，可以观察到 Pod 的状态变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:1/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          11</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:2/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     PodInitializing</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   3</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          42</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          43</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span></code></pre></div><p>每行状态的解释如下，完整的 Pod 资源内容请查看 <code>logs/5-readiness-probe-status.yaml</code> 文件：：</p><ol><li>Pod 创建后还未被调度。</li><li>Pod 已经被调度到 Node 上，但是容器还未创建。</li><li>等待创建第 1 个 init 容器。</li><li>第 1 个 init 容器正在运行。</li><li>第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</li><li>第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。注意，此时 <code>sidecar-container-1</code> 并未处于 ready 状态，因为就绪探针还在执行中，也就是说一旦容器处于 Running 状态，下一个容器就会开始启动。</li><li>第 2 个 sidecar 容器正在运行但并未处于 Ready 状态，等待创建 <code>main-container-1</code> 和 <code>main-container-2</code> 两个主容器。</li><li>两个主容器都正在运行，并且处于 Ready 状态。</li><li><code>sidecar-container-1</code> 通过就绪探针检查，进入 Ready 状态。</li><li><code>sidecar-container-2</code> 通过就绪探针检查，进入 Ready 状态。</li></ol><p>下面这张图展示了上面描述的 Pod 状态变化过程：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240531132158.png" alt=""></p><p>测试完毕后，执行以下命令删除这个 Pod。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-readiness-probe.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span></span></code></pre></div><h2 id="_9-容器的停止顺序" tabindex="-1">9 容器的停止顺序 <a class="header-anchor" href="#_9-容器的停止顺序" aria-label="Permalink to &quot;9 容器的停止顺序&quot;">​</a></h2><p>我们当前使用的 Kubernetes 版本是 1.28.0。让我们首先看看在这个版本中删除 Pod 时，sidecar 容器和主容器的停止顺序是怎样的。</p><p>在下面的示例中，我们为主容器设置了 preStop hook。在容器停止之前，Kubelet 会先执行 preStop hook 中定义的命令，然后才会发送 SIGTERM 信号给容器。</p><p>为了让容器接收到 SIGTERM 信号，我们在容器中使用了 trap 命令来捕获 SIGTERM 信号。另外，通常 hook 和 probe 的输出不会打印在 <code>kubectl logs</code> 中，为了方便我们通过日志来对容器的状态进行观察，这里使用了一种间接的方法：将输出重定向到 <code>/proc/1/fd/1</code> 文件中。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sh -c &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            trap &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;sidecar container 1 received SIGTERM\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 3;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;sidecar container 1 stopped\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              exit 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39; TERM;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;sidecar container 1 is doing some tasks...\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 3;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            done</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sh -c &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            trap &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;sidecar container 2 received SIGTERM\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 3;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;sidecar container 2 stopped\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              exit 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39; TERM;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;sidecar container 2 is doing some tasks...\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 3;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            done</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          exec sh -c &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            trap &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;main container 1 received SIGTERM\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 10;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;main container 1 stopped\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              exit 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39; TERM;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;main container 1 is doing some tasks...\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 3;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            done</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lifecycle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        preStop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          exec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">            command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;echo &#39;main container 1 preStop hook is running...&#39; &gt;&gt; /proc/1/fd/1; sleep 5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          exec sh -c &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            trap &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;main container 2 received SIGTERM\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 10;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;main container 2 stopped\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              exit 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39; TERM;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              echo \\&quot;main container 2 is doing some tasks...\\&quot;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              sleep 3;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            done</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lifecycle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        preStop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          exec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">            command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;echo &#39;main container 2 preStop hook is running...&#39; &gt;&gt; /proc/1/fd/1; sleep 5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>执行以下命令应用上面的 Pod 资源。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-prestop-hook.yaml</span></span></code></pre></div><p>通过查看日志，可以看到主容器首先执行了 preStop hook，然后接收到了 SIGTERM 信号，最后优雅地退出了。同时，sidecar 容器也接收到了 SIGTERM 信号，<strong>但是它在主容器停止之前就已经停止了。</strong></p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240530072838.png" alt=""></p><p>如果我们提前在另一个窗口执行 <code>kubectl get pod -w</code> 命令，可以观察到 Pod 的状态变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Pending</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:0/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:1/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          11</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Init:2/3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     PodInitializing</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Terminating</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          38</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Terminating</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          53</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Terminating</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          54</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Terminating</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          54</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/4</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Terminating</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          54</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s</span></span></code></pre></div><p>每行状态的解释如下，完整的 Pod 资源内容请查看 <code>logs/6-prestop-hook-status.yaml</code> 文件：</p><ol><li>Pod 创建后还未被调度。</li><li>Pod 已经被调度到 Node 上，但是容器还未创建。</li><li>等待创建第 1 个 init 容器。</li><li>第 1 个 init 容器正在运行。</li><li>第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</li><li>第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。</li><li>第 2 个 sidecar 容器正在运行，等待创建 <code>main-container-1</code> 和 <code>main-container-2</code> 两个主容器。</li><li>两个主容器都正在运行。</li><li>接收到 Pod 删除的请求，开始停止容器。</li><li>sidecar 容器和主容器都已经停止。</li><li>在后面的几行 Terminating 中， 容器的状态并不会发生变化。</li></ol><p>以下这张图展示了上面描述的 Pod 状态变化过程：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240531131116.png" alt=""></p><p>然而，由于 sidecar 容器可能会在主容器之前停止，这种情况仍然可能带来一些问题。例如，如果 sidecar 容器负责收集日志，那么可能会造成部分日志内容缺失。又比如，如果 sidecar 容器提供网络代理功能，那么它的提前退出可能会导致主容器的网络连接中断。</p><p>为了解决这个问题，从 Kubernetes 1.29 版本开始，如果 Pod 中包含一个或多个 sidecar 容器，kubelet 将延迟向这些 sidecar 容器发送 SIGTERM 信号，直到最后一个主容器完全终止。sidecar 容器将按照它们在 Pod spec 中定义的相反顺序终止。这确保了 sidecar 容器继续为 Pod 中的其他容器提供服务，直到不再需要它们。</p><p>下面让我们创建一个 Kubernetes 1.29 版本的集群，然后再次测试 sidecar 容器的停止顺序。由于在 1.29 版本中 <code>SidecarContainers</code> 这个特性已经成为 Beta 版本，因此默认是开启的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kind</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cluster</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --name=sidecar-demo-cluster-2</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">--image </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kindest/node:v1.29.0</span></span></code></pre></div><p>通过分析以下日志，我们可以清晰地看到容器退出的整个过程。首先两个主容器的 preStop hook 被执行，然后主容器接收到 Kubelet 发送的 SIGTERM 信号并正常退出。等到主容器完全退出后，sidecar-container-1 才会接收到 SIGTERM 信号并正常退出。最后，sidecar-container-2 接收到 SIGTERM 信号并正常退出。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240530080305.png" alt=""></p><p>下面这张图描述了 1.29 版本的 sidecar 容器的停止顺序：</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240531131150.png" alt=""></p><p>测试完毕后，执行以下命令删除这个 Pod。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-prestop-hook.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span></span></code></pre></div><h2 id="_10-容器资源的-request-和-limit" tabindex="-1">10 容器资源的 Request 和 Limit <a class="header-anchor" href="#_10-容器资源的-request-和-limit" aria-label="Permalink to &quot;10 容器资源的 Request 和 Limit&quot;">​</a></h2><p>在 Kubernetes 中，我们可以为容器设置资源请求（request）和资源限制（limit）。当你为 Pod 中的容器指定了资源 request（请求）时，kube-scheduler 就根据该信息决定将 Pod 调度到哪个节点上。 当你为容器指定了资源 limit（限制） 时，kubelet 就可以确保运行的容器不会使用超出所设限制的资源。</p><p>在评估节点是否有足够的资源来运行 Pod 时，kube-scheduler 会根据不同情况来计算 Pod 中容器资源的最大请求量。在没有引入 sidecar 容器的情况下，计算方式比较简单：资源的最大请求量是单个 init 容器的最大请求量与所有主容器请求量总和之间的最大值。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Max</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Max</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) )</span></span></code></pre></div><p>有了 sidecar 容器之后，计算公式会变得复杂一些。可以简单地分为两种情况：</p><ul><li>1.所有 sidecar 容器都是在 init 容器之后启动的。对于这种情况，我们只需要把所有 sidecar 容器的资源请求量与主容器的资源请求量相加，然后与单个 init 容器的最大请求量进行比较即可。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Max</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Max</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Sidecar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) )</span></span></code></pre></div><ul><li>2.有一个或者多个 sidecar 容器是在 init 容器之前启动的。在这种情况下，当计算 init 容器的最大请求量时，我们需要把在该 init 容器之前启动的 sidecar 容器也考虑在内。在这里，我们使用 InitContainerUse(i) 来表示当启动 i 个 init 容器时，所需的最大资源请求量（等于该 init 容器的请求量 + 在该 init 容器之前启动的 sidecar 容器的请求量总和）：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">InitContainerUse(i</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) = Sum(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sidecar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> containers</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) + InitContainer(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>最后将 InitContainerUse 与所有主容器以及在该 init 容器之后启动的 sidecar 容器的总和进行比较，取最大值。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Max</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Max</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">each</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> InitContainerUse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Sidecar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) )</span></span></code></pre></div><p>接下来我们用两个例子来验证上面的结论，当前 Kubernetes 集群中只有一个节点，使用 <code>kubectl describe node</code> 命令可以看到该节点总共有 10 个 CPU 可供分配，当前 CPU request 已经使用了 9% 的 CPU 资源，也就是说还有 9 个 完整的 CPU 可供分配。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20240530083634.png" alt=""></p><p>在下面的示例中，我们为 init 容器设置了 9 个 CPU 的 request，为 sidecar 容器和主容器也设置了总共 9 个 CPU 的 request，这样 Pod 刚刚好被允许调度到节点上。如果你尝试将 init 容器的 CPU request 设置为 10，或者将任一 sidecar 容器或主容器的 CPU request 增加 1，那么这个 Pod 都将无法被调度到节点上。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 7-resource-requests.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;9&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;4&quot;</span></span></code></pre></div><p>在第二个例子中，我们调整了容器的定义顺序，将 <code>sidecar-container-1</code> 移动到了 <code>init-container-1</code> 之前。虽然 Pod 的 CPU 资源请求总量没有改变，但你会发现这次 Pod 无法被调度到节点上了。这是因为在计算单个 init 容器的最大资源请求量时，<code>sidecar-container-1</code> 的资源请求量也被计入了。原本 <code>init-container-1</code> 的资源请求量是 9，现在加上了 <code>sidecar-container-1</code> 的资源请求量 1，最大的资源请求量就变为了 10，超过了节点的可用资源。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 8-resource-requests-init-container-after-sidecar-container.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">init-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          sleep 10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;init container 1 completed tasks and exited&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;9&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">sidecar-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;sidecar container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      restartPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 1 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 1 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">main-container-2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.35</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          echo &quot;main container 2 is starting...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          while true; do</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            echo &quot;main container 2 is doing some tasks...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            sleep 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          done</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;4&quot;</span></span></code></pre></div><h2 id="_11-在-istio-中使用-sidecar-容器" tabindex="-1">11 在 Istio 中使用 Sidecar 容器 <a class="header-anchor" href="#_11-在-istio-中使用-sidecar-容器" aria-label="Permalink to &quot;11 在 Istio 中使用 Sidecar 容器&quot;">​</a></h2><p>在没有原生 sidecar 容器的支持之前，Istio 采用了一种变通的方法来保证 sidecar 容器在主容器之前启动：通过为 Istio 的 sidecar 容器添加一个 postStart hook，该 hook 会阻塞其他容器的启动，直到 sidecar 代理完全运行为止。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  initContainers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">istio-init</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">istio-proxy</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      lifecycle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        postStart</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          exec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">            command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pilot-agent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">wait</span></span></code></pre></div><p>在 Istio 中可以通过将 <code>holdApplicationUntilProxyStarts</code> 设置为 true 来启用这个功能。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 1.7 版本特性 https://github.com/istio/istio/pull/24737</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">istioctl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> values.global.proxy.holdApplicationUntilProxyStarts=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span></code></pre></div><p>在 Kubernetes 1.28 发布 SidecarContainers 的功能之后，现在我们直接可以在 Istio 中使用原生的 sidecar 容器了，只需将 pilot 的<code>ENABLE_NATIVE_SIDECARS</code> 环境变量设置为 true 即可。完整的教程请参见 <a href="https://istio.io/latest/blog/2023/native-sidecars/" target="_blank" rel="noreferrer">Kubernetes Native Sidecars in Istio</a>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">TAG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1.19</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.0-beta.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/istio/istio/releases/download/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/istio-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">-linux-amd64.tar.gz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> tar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> xz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">./istioctl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> values.pilot.env.ENABLE_NATIVE_SIDECARS=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -y</span></span></code></pre></div><h2 id="_12-总结" tabindex="-1">12 总结 <a class="header-anchor" href="#_12-总结" aria-label="Permalink to &quot;12 总结&quot;">​</a></h2><p>本文首先回顾了传统 sidecar 模式存在的问题，包括 Job 无法正常终止、日志和指标收集不完整以及服务网格流量异常等等。随后，我们介绍了 Kubernetes 1.28 版本中引入的原生 sidecar 容器功能，这一功能旨在解决传统 sidecar 模式的局限性。我们还深入探讨了 sidecar 容器的其他特性，包括 sidecar 容器的启动顺序、重启策略、容器探针、停止顺序等。最后，我们简要地介绍了如何在 Istio 中利用原生 sidecar 容器来提升服务网格的可靠性。</p><h2 id="_13-参考资料" tabindex="-1">13 参考资料 <a class="header-anchor" href="#_13-参考资料" aria-label="Permalink to &quot;13 参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/kubernetes/enhancements/tree/e1a916745378660bafb96cb3c9f754fa793342f9/keps/sig-node/753-sidecar-containers" target="_blank" rel="noreferrer">KEP-753: sidecar containers</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/sidecar-containers/" target="_blank" rel="noreferrer">Sidecar Containers</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase" target="_blank" rel="noreferrer">Pod Lifecycle</a></li><li><a href="https://labs.iximiuz.com/tutorials/kubernetes-native-sidecars" target="_blank" rel="noreferrer">Making Sense Out of Native sidecar Containers in Kubernetes</a></li><li><a href="https://istio.io/latest/blog/2023/native-sidecars/" target="_blank" rel="noreferrer">Kubernetes Native sidecars in Istio</a></li><li><a href="https://kubernetes.io/blog/2023/08/25/native-sidecar-containers/" target="_blank" rel="noreferrer">Kubernetes v1.28: Introducing native sidecar containers</a></li><li><a href="https://cloudyuga.guru/blogs/k8s-1-28-native-sidecar-container/" target="_blank" rel="noreferrer">Unlocking Container Sequencing: Embracing Kubernetes’ Native Sidecar</a></li><li><a href="https://kccncna2023.sched.com/event/1R2tw/sidecar-containers-are-built-in-to-kubernetes-what-how-and-why-now-todd-neal-amazon-sergey-kanzhelev-google" target="_blank" rel="noreferrer">Sidecar Containers Are Built-in to Kubernetes: What, How, and Why Now?- Todd Neal &amp; Sergey Kanzhelev</a></li><li><a href="https://www.youtube.com/watch?v=HntbxWLVMso" target="_blank" rel="noreferrer">CSI Driver X FUSE Drivers: a Kubernetes Object Storage Solution for AI/ML Data Portability - Jiaxun Song, Google</a></li><li><a href="https://github.com/karlkfi/kubexit" target="_blank" rel="noreferrer">karlkfi/kubexit: Command supervisor for coordinated Kubernetes pod container termination</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination" target="_blank" rel="noreferrer">Termination of Pods</a></li><li><a href="https://stackoverflow.com/questions/55280259/prestop-hook-doesnt-get-executed" target="_blank" rel="noreferrer">preStop hook doesn&#39;t get executed</a></li><li><a href="https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/" target="_blank" rel="noreferrer">Container Lifecycle Hooks</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy" target="_blank" rel="noreferrer">Container restart policy</a></li><li><a href="https://kubernetes.io/docs/tasks/debug/debug-application/debug-init-containers/#understanding-pod-status" target="_blank" rel="noreferrer">Understanding Pod status</a></li><li><a href="https://github.com/istio/istio/pull/24737" target="_blank" rel="noreferrer">Istio holdApplicationUntilProxyStarts: Allow users to delay application start until proxy is ready</a></li></ul><h2 id="_14-欢迎关注" tabindex="-1">14 欢迎关注 <a class="header-anchor" href="#_14-欢迎关注" aria-label="Permalink to &quot;14 欢迎关注&quot;">​</a></h2><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220104221116.png" alt=""></p>`,172))])}const f=e(C,[["render",A]]);export{P as __pageData,f as default};
