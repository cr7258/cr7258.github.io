import{_ as o}from"./chunks/ArticleMetadata.Cxlq8Gj7.js";import{_ as c,C as p,c as d,o as i,k as l,G as h,P as b,a as m,w as y,b as g,e as u}from"./chunks/framework.DIkCQIk8.js";import"./chunks/md5.BFEskVOY.js";const P=JSON.parse('{"title":"OpenTelemetry × Elastic Observability 系列（一）：整体架构介绍","description":"","frontmatter":{"title":"OpenTelemetry × Elastic Observability 系列（一）：整体架构介绍","author":"Se7en","date":"2025/05/30 10:00","categories":["OpenTelemetry","Elastic"],"tags":["OpenTelemetry","Elastic"]},"headers":[],"relativePath":"courses/observability/OpenTelemetry/01-opentelemetry-elastic.md","filePath":"courses/observability/OpenTelemetry/01-opentelemetry-elastic.md","lastUpdated":1748582595000}'),f={name:"courses/observability/OpenTelemetry/01-opentelemetry-elastic.md"};function v(t,e,w,k,O,T){const s=o,n=p("ClientOnly");return i(),d("div",null,[e[0]||(e[0]=l("h1",{id:"opentelemetry-×-elastic-observability-系列-一-整体架构介绍",tabindex:"-1"},[m("OpenTelemetry × Elastic Observability 系列（一）：整体架构介绍 "),l("a",{class:"header-anchor",href:"#opentelemetry-×-elastic-observability-系列-一-整体架构介绍","aria-label":'Permalink to "OpenTelemetry × Elastic Observability 系列（一）：整体架构介绍"'},"​")],-1)),h(n,null,{default:y(()=>{var a,r;return[(((a=t.$frontmatter)==null?void 0:a.aside)??!0)&&(((r=t.$frontmatter)==null?void 0:r.showArticleMetadata)??!0)?(i(),g(s,{key:0,article:t.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),e[1]||(e[1]=b(`<p>本文是 <strong>OpenTelemetry × Elastic Observability 系列</strong>的第一篇，将介绍 OpenTelemetry Demo 的整体架构，以及如何集成 Elastic 来采集和可视化可观测性数据。后续文章将分别针对不同编程语言，深入讲解 OpenTelemetry 的集成实践。</p><h2 id="程序架构" tabindex="-1">程序架构 <a class="header-anchor" href="#程序架构" aria-label="Permalink to &quot;程序架构&quot;">​</a></h2><p><a href="https://github.com/open-telemetry/opentelemetry-demo" target="_blank" rel="noreferrer">OpenTelemetry Demo</a> 是由 OpenTelemetry 社区开发的微服务演示应用程序，用于展示 OpenTelemetry (OTel) 的插桩（Instrumentation）和可观测性能力。OpenTelemetry Demo 是一个电子商务网页，由多个通过 HTTP 和 gRPC 相互通信的微服务组成。所有服务都使用 OpenTelemetry 进行插桩，并生成链路追踪（trace）、指标（metric）和日志（log）。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301150987.png" alt=""></p><p>下表列出了应用程序中的各个微服务的介绍及其使用的编程语言：</p><table><thead><tr><th>服务</th><th>编程语言</th><th>描述</th></tr></thead><tbody><tr><td>accounting</td><td>.NET</td><td>处理传入的订单并计算所有订单的总和。</td></tr><tr><td>ad</td><td>Java</td><td>根据给定的上下文关键词提供文本广告。</td></tr><tr><td>cart</td><td>.NET</td><td>在 Valkey 中存储用户购物车中的商品并检索它们。</td></tr><tr><td>checkout</td><td>Go</td><td>检索用户购物车，准备订单并协调支付、配送和电子邮件通知。</td></tr><tr><td>currency</td><td>C++</td><td>将一种货币金额转换为另一种货币。使用从欧洲中央银行获取的实际汇率。</td></tr><tr><td>email</td><td>Ruby</td><td>向用户发送订单确认电子邮件。</td></tr><tr><td>fraud-detection</td><td>Kotlin</td><td>分析传入的订单并检测欺诈尝试。</td></tr><tr><td>frontend</td><td>TypeScript</td><td>提供 HTTP 服务器来服务网站。不需要注册/登录，自动为所有用户生成会话 ID。</td></tr><tr><td>load-generator</td><td>Python/Locust</td><td>持续发送请求，模拟真实用户购物流程到前端。</td></tr><tr><td>payment</td><td>JavaScript</td><td>使用给定的信用卡信息收取指定金额并返回交易 ID。</td></tr><tr><td>product-catalog</td><td>Go</td><td>从 JSON 文件提供产品列表，并能够搜索产品和获取单个产品。</td></tr><tr><td>quote</td><td>PHP</td><td>根据要运送的商品数量计算运费。</td></tr><tr><td>recommendation</td><td>Python</td><td>根据购物车中的商品推荐其他产品。</td></tr><tr><td>shipping</td><td>Rust</td><td>根据购物车提供运费估算。将商品运送到指定地址。</td></tr><tr><td>react-native-app</td><td>TypeScript</td><td>React Native 移动应用程序，在购物服务之上提供用户界面。</td></tr></tbody></table><h2 id="启动程序" tabindex="-1">启动程序 <a class="header-anchor" href="#启动程序" aria-label="Permalink to &quot;启动程序&quot;">​</a></h2><p>Elastic 提供了 <a href="https://github.com/elastic/opentelemetry-demo" target="_blank" rel="noreferrer">OpenTelemetry Demo 的 Elastic Observability 版本</a>，该版本使用了 Elastic Distributions of OpenTelemetry (EDOT) 来为应用程序进行插桩。<a href="https://www.elastic.co/docs/reference/opentelemetry" target="_blank" rel="noreferrer">Elastic Distributions of OpenTelemetry（EDOT）</a> 是为 Elastic 量身打造的 OpenTelemetry 开源发行版生态，包含定制化的 OpenTelemetry Collector 和多个 OpenTelemetry 语言 SDK。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301227959.png" alt=""></p><p>Elastic 提供的 OpenTelemetry Demo 依赖于 <a href="https://cloud.elastic.co/" target="_blank" rel="noreferrer">Elastic Cloud</a>，该平台提供开箱即用的 APM Server、Elasticsearch 和 Kibana 等服务。为了方便用户在本地搭建和运行环境，我对该项目进行了一些修改，使其支持本地部署 APM Server、Elasticsearch、Kibana 等组件。你可以直接克隆我修改后的项目来运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/cr7258/hands-on-lab.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> observability/opentelemetry-elastic/opentelemetry-demo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 使用 Docker Compose 启动项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span></span></code></pre></div><h2 id="网站界面" tabindex="-1">网站界面 <a class="header-anchor" href="#网站界面" aria-label="Permalink to &quot;网站界面&quot;">​</a></h2><p>启动成功后，浏览器输入 <code>http://localhost:8080/</code> 可以访问网站的前端界面。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301144156.png" alt=""></p><p>你可以在网站上将商品加入购物车并进行结算。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301144705.png" alt=""></p><h2 id="负载测试" tabindex="-1">负载测试 <a class="header-anchor" href="#负载测试" aria-label="Permalink to &quot;负载测试&quot;">​</a></h2><p>Load Generator 基于 Python 负载测试框架 Locust 编写。默认情况下，它将模拟用户请求前端的多个不同路由。浏览器输入 <code>http://localhost:8080/loadgen/</code> 可以访问 Load Generator 的 Web 界面。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301145639.png" alt=""></p><h2 id="功能标志" tabindex="-1">功能标志 <a class="header-anchor" href="#功能标志" aria-label="Permalink to &quot;功能标志&quot;">​</a></h2><p>Demo 应用提供了多个功能标志（Feature Flag），可用于模拟不同的场景和故障。这些标志由 <a href="https://flagd.dev/" target="_blank" rel="noreferrer">flagd</a> 管理，这是一个支持 <a href="https://openfeature.dev/" target="_blank" rel="noreferrer">OpenFeature</a> 的简单功能标志服务。</p><p>运行 Demo 时，可以通过访问 <code>http://localhost:8080/feature</code> 的用户界面来更改这些标志的值。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301145995.png" alt=""></p><h2 id="elastic-observability" tabindex="-1">Elastic Observability <a class="header-anchor" href="#elastic-observability" aria-label="Permalink to &quot;Elastic Observability&quot;">​</a></h2><p>通过浏览器访问 <code>http://localhost:5601/</code> 可打开 Kibana 的 Web 界面。在 <strong>Observability -&gt; APM</strong> 页面中，可以查看与 Elastic Observability 应用相关的可观测性数据。</p><p>Elastic Observability 提供全栈可观测性方案，通过支持 APM 和 OpenTelemetry，实现日志、指标和链路追踪的统一分析与可视化。它帮助团队加速故障排查、提升系统透明度，并降低运维成本。</p><p><a href="https://www.elastic.co/docs/solutions/observability/apm/service-map" target="_blank" rel="noreferrer">Service Map</a> 是 Elastic Observability 的核心功能之一，它实时地展示了应用程序中各服务之间的依赖关系和交互情况。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301119214.png" alt=""></p><p>Service Inventory 列出了所有的服务以及每个服务的关键指标（延时、吞吐量、失败率等）。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301121089.png" alt=""></p><p><a href="https://www.elastic.co/docs/solutions/observability/apm/traces-ui" target="_blank" rel="noreferrer">Trace</a> 以瀑布图的形式展示请求在各个微服务间的完整调用链，包含请求方法、耗时、状态码等关键信息，帮助用户快速定位性能瓶颈或异常问题。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301128145.png" alt=""></p><p>如果想要查看某条 trace 关联的信息，可以点击 <code>Investigate</code> 按钮。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301129123.png" alt=""></p><p>然后可以选择查看该 trace 关联的日志。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301129666.png" alt=""></p><p>或者是该 trace 的 Service Map。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202505301131219.png" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文介绍了 OpenTelemetry Demo 的整体架构，并演示了如何借助 Elastic Observability 实现链路追踪、日志与指标的统一观测。这是 OpenTelemetry × Elastic Observability 实践系列的第一篇文章，在后续的文章中，我们将深入探讨不同编程语言（如 Java、Go、Node.js 和 Python）的 OpenTelemetry 集成实践。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li>OpenTelemetry Demo Docs：<a href="https://opentelemetry.io/docs/demo/" target="_blank" rel="noreferrer">https://opentelemetry.io/docs/demo/</a></li><li>Elastic Distributions of OpenTelemetry：<a href="https://www.elastic.co/docs/reference/opentelemetry" target="_blank" rel="noreferrer">https://www.elastic.co/docs/reference/opentelemetry</a></li><li>OpenTelemetry Demo with the Elastic Distributions of OpenTelemetry：<a href="https://www.elastic.co/observability-labs/blog/opentelemetry-demo-with-the-elastic-distributions-of-opentelemetry" target="_blank" rel="noreferrer">https://www.elastic.co/observability-labs/blog/opentelemetry-demo-with-the-elastic-distributions-of-opentelemetry</a></li><li>elastic/opentelemetry-demo：<a href="https://github.com/elastic/opentelemetry-demo" target="_blank" rel="noreferrer">https://github.com/elastic/opentelemetry-demo</a></li><li>Use OpenTelemetry with APM：<a href="https://www.elastic.co/docs/solutions/observability/apm/use-opentelemetry-with-apm" target="_blank" rel="noreferrer">https://www.elastic.co/docs/solutions/observability/apm/use-opentelemetry-with-apm</a></li><li>Native OpenTelemetry support in Elastic Observability：<a href="https://www.elastic.co/observability-labs/blog/native-opentelemetry-support-in-elastic-observability" target="_blank" rel="noreferrer">https://www.elastic.co/observability-labs/blog/native-opentelemetry-support-in-elastic-observability</a></li><li>Combining Elastic Universal Profiling with Java APM Services and Traces：<a href="https://www.elastic.co/observability-labs/blog/universal-profiling-with-java-apm-services-traces" target="_blank" rel="noreferrer">https://www.elastic.co/observability-labs/blog/universal-profiling-with-java-apm-services-traces</a></li><li>Revealing unknowns in your tracing data with inferred spans in OpenTelemetry：<a href="https://www.elastic.co/observability-labs/blog/tracing-data-inferred-spans-opentelemetry" target="_blank" rel="noreferrer">https://www.elastic.co/observability-labs/blog/tracing-data-inferred-spans-opentelemetry</a></li><li>elastic/observability-examples：<a href="https://github.com/elastic/observability-examples/tree/main/Elastiflix" target="_blank" rel="noreferrer">https://github.com/elastic/observability-examples/tree/main/Elastiflix</a></li></ul><h2 id="欢迎关注" tabindex="-1">欢迎关注 <a class="header-anchor" href="#欢迎关注" aria-label="Permalink to &quot;欢迎关注&quot;">​</a></h2><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/202503222156941.png" alt=""></p>`,44))])}const A=c(f,[["render",v]]);export{P as __pageData,A as default};
