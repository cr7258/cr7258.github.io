import{_ as h}from"./chunks/ArticleMetadata.Dcj_pprX.js";import{_ as k,C as r,c as d,o as e,k as l,G as o,P as c,a as F,w as g,b as y,e as D}from"./chunks/framework.PU6D6dP3.js";import"./chunks/md5.BwKp3kP6.js";const v=JSON.parse('{"title":"Kubernetes 中的对象是如何删除的：Finalizers 字段介绍","description":"","frontmatter":{"title":"Kubernetes 中的对象是如何删除的：Finalizers 字段介绍","author":"Se7en","date":"2022/09/03 20:00","categories":["原创"],"tags":["Kubernetes"]},"headers":[],"relativePath":"blogs/original/2022/03-finalizer.md","filePath":"blogs/original/2022/03-finalizer.md","lastUpdated":1707227798000}'),C={name:"blogs/original/2022/03-finalizer.md"};function u(i,s,A,m,b,B){const t=h,p=r("ClientOnly");return e(),d("div",null,[s[0]||(s[0]=l("h1",{id:"kubernetes-中的对象是如何删除的-finalizers-字段介绍",tabindex:"-1"},[F("Kubernetes 中的对象是如何删除的：Finalizers 字段介绍 "),l("a",{class:"header-anchor",href:"#kubernetes-中的对象是如何删除的-finalizers-字段介绍","aria-label":'Permalink to "Kubernetes 中的对象是如何删除的：Finalizers 字段介绍"'},"​")],-1)),o(p,null,{default:g(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(e(),y(t,{key:0,article:i.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),s[1]||(s[1]=c(`<p>Kubernetes 中的对象删除并不像表面上看起来那么简单，删除对象涉及一系列过程，例如对象的级联和非级联删除，在删除之前检查以确定是否可以安全删除对象等等。这些都是通过称为 <code>Finalizers</code>（终结器）的 API 对象实现的。</p><h2 id="finalizers-终结器" tabindex="-1">Finalizers 终结器 <a class="header-anchor" href="#finalizers-终结器" aria-label="Permalink to &quot;Finalizers 终结器&quot;">​</a></h2><p><code>Finalizers</code> 是由字符串组成的数组，当 <code>Finalizers</code> 字段中存在元素时，相关资源不允许被删除，<code>Finalizers</code> 是 Kubernetes 资源删除流程中的一种拦截机制，能够让控制器实现异步的删除前（Pre-delete）回调，在对象删除之前执行相应的逻辑。</p><p><code>Finalizers</code> 可以防止意外删除集群所依赖的、用于正常运作的资源。 Kubernetes 中有些原生的资源对象会被自动加上 <code>Finalizers</code> 标签，例如 PVC 和 PV 分别原生自带 <code>kubernetes.io/pvc-protection</code> 和 <code>kubernetes.io/pv-protection</code> 的 <code>Finalizers</code> 标签，以保证持久化存储不被误删，避免挂载了存储的的工作负载产生问题。假如你试图删除一个仍被 Pod 使用的 PVC，该资源不会被立即删除， 它将进入 <code>Terminating</code> 状态，直到 PVC 不再挂载到 Pod 上时， Kubernetes 才清除这个对象。</p><h2 id="kubernetes-对象的删除过程" tabindex="-1">Kubernetes 对象的删除过程 <a class="header-anchor" href="#kubernetes-对象的删除过程" aria-label="Permalink to &quot;Kubernetes 对象的删除过程&quot;">​</a></h2><p>当删除一个对象时，其对应的控制器并不会真正执行删除对象的操作，在 Kubernetes 中对象的回收操作是由 GarbageCollectorController （垃圾收集器）负责的，其作用就是当删除一个对象时，会根据指定的删除策略回收该对象及其依赖对象。删除的具体过程如下：</p><ul><li>发出删除命令后 Kubernetes 会将该对象标记为待删除，但不会真的删除对象，具体做法是将对象的 <code>metadata.deletionTimestamp</code> 字段设置为当前时间戳，这使得对象处于只读状态（除了修改 <code>finalizers</code> 字段）。</li><li>当 <code>metadata.deletionTimestamp</code> 字段非空时，负责监视该对象的各个控制器会执行对应的 <code>Finalizer</code> 动作，每个 <code>Finalizer</code> 动作完成后，就会从 <code>Finalizers</code> 列表中删除对应的 <code>Finalizer</code>。</li><li>一旦 <code>Finalizers</code> 列表为空时，就意味着所有 <code>Finalizer</code> 都被执行过了，垃圾收集器会最终删除该对象。</li></ul><h2 id="owner-references-属主与附属" tabindex="-1">Owner References 属主与附属 <a class="header-anchor" href="#owner-references-属主与附属" aria-label="Permalink to &quot;Owner References  属主与附属&quot;">​</a></h2><p>在 Kubernetes 中，一些对象是其他对象的属主（Owner）。例如，ReplicaSet 是一组 Pod 的属主，具有属主的对象是属主的附属（Dependent）。附属对象有一个 <code>metadata.ownerReferences</code> 字段，用于引用其属主对象。在 Kubernetes 中不允许跨 namespace 指定属主，namespace 空间范围的附属可以指定集群范围或者相同 namespace 的属主。</p><p>Kubernetes 会自动为一些对象的附属资源设置属主引用的值， 这些对象包含 ReplicaSet、DaemonSet、Deployment、Job、CronJob、ReplicationController 等等。 你也可以通过改变这个字段的值，来手动配置这些关系。</p><p>接下来我们通过手动设置 <code>metadata.ownerReferences</code> 字段来设置从属关系。如下所示，我们首先创建了一个属主对象，然后创建了一个附属对象，根据 <code>ownerReferences</code> 字段中的 name 和 uid 关联属主对象。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建属主对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> kubectl create -f -</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">apiVersion: v1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kind: ConfigMap</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  name: mymap-parent</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 获取属主对象 UID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">CM_UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get configmap mymap-parent </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">-o</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> jsonpath=&quot;{.metadata.uid}&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建附属对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> kubectl create -f -</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">apiVersion: v1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">kind: ConfigMap</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  name: mymap-child</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  ownerReferences:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  - apiVersion: v1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    kind: ConfigMap</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    name: mymap-parent # 父对象的名称</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    uid: </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$CM_UID</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  # 父对象的 uid</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">EOF</span></span></code></pre></div><p>当我们删除附属对象时，不会删除属主对象。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           DATA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-child</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m4s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-parent</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m4s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 删除附属对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap/mymap-child</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;mymap-child&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> deleted</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 属主对象还存在</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           DATA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-parent</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      12</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m10s</span></span></code></pre></div><p>现在我们重新创建属主和附属对象，这次我们删除属主对象，发现附属对象也一并被删除了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           DATA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-child</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      10</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m2s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-parent</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      10</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m2s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 删除属主对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap/mymap-parent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;mymap-parent&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> deleted</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 属主对象和附属对象都被删除了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> resources</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> found</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> namespace.</span></span></code></pre></div><p>继续重新创建属主和附属对象，Kubernetes 默认删除时使用级联删除，这次我们在删除属主对象的时候加上参数 <code>--cascade=orphan</code>，表示使用非级联删除，这样删除属主对象后，附属对象依然存在。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           DATA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-child</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m8s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-parent</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m8s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 非级联删除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --cascade=orphan</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap/mymap-parent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;mymap-parent&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> deleted</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 附属对象还存在</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> configmap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          DATA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">mymap-child</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">m21s</span></span></code></pre></div><h2 id="kubernetes-中的删除策略" tabindex="-1">Kubernetes 中的删除策略 <a class="header-anchor" href="#kubernetes-中的删除策略" aria-label="Permalink to &quot;Kubernetes 中的删除策略&quot;">​</a></h2><p>在默认情况下，删除一个对象同时会删除它的附属对象，如果我们在一些特定情况下只是想删除当前对象本身并不想造成复杂的级联删除，可以指定具体的删除策略。在 Kubernetes 中有三种删除策略：</p><ul><li><strong>级联删除</strong><ul><li><code>Foreground</code> 策略：<strong>先删除附属对象，再删除属主对象</strong>。在 <code>Foreground</code> 模式下，待删除对象首先进入 <code>deletion in progress</code> 状态。 在此状态下存在如下的场景： <ul><li>对象仍然可以通过 REST API 获取。</li><li>会将对象的 <code>deletionTimestamp</code> 字段设置为对象被标记为要删除的时间点。</li><li>将对象的 <code>metadata.finalizers</code> 字段值设置为 <code>foregroundDeletion</code>。 对象一旦被设置为 <code>deletion in progress</code> 状态时，垃圾收集器会删除对象的所有依赖， 垃圾收集器在删除了所有有阻塞能力的附属对象之后（ <code>ownerReference.blockOwnerDeletion=true</code>），再删除属主对象。</li></ul></li><li><code>Background</code> 策略（默认）：<strong>先删除属主对象，再删除附属对象。</strong> 在 <code>Background</code> 模式下，Kubernetes 会立即删除属主对象，之后垃圾收集器会在后台删除其附属对象。</li></ul></li><li><strong>非级联删除</strong><ul><li><code>Orphan</code> 策略：<strong>不会自动删除它的附属对象</strong>，这些残留的依赖被称作是原对象的<strong>孤儿对象</strong>。</li></ul></li></ul><p>在 kubernetes v1.9 版本之前，大部分控制器的默认删除策略为 <code>Orphan</code>，从 v1.9 开始，对 apps/v1 下的资源默认使用 <code>Background</code> 模式。</p><p>下面的例子中，在删除 Deployment 时指定删除策略为 <code>Orphan</code>，这样删除 Deployment 后不会删除 Deployment 的附属对象 ReplicaSet，同样地， ReplicaSet 的附属对象 Pod 也不会被删除。</p><p><strong>方式一：使用 kubectl</strong>，在 <code>-cascade</code> 参数中指定删除策略。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> nginx-deployment</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --cascade=orphan</span></span></code></pre></div><p><strong>方式二：使用 Kubernetes API</strong>，<code>在 propagationPolicy</code> 参数中指定删除策略。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 启动一个本地代理会话  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> proxy</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --port=8080</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 使用 curl 来触发删除操作  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> DELETE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> localhost:8080/apis/apps/v1/namespaces/default/deployments/nginx-deployment</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\ </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;{&quot;kind&quot;:&quot;DeleteOptions&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;propagationPolicy&quot;:&quot;Orphan&quot;}&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> \\ </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Content-Type: application/json&quot;</span></span></code></pre></div><p>你可以检查 Deployment 所管理的 ReplicaSet 和 Pod 仍然处于运行状态：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># deployment 已经删除  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> deployments</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> resources</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> found</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> namespace.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">​</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># replicaset 和 pod 依然在运行  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> replicaset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                          DESIRED</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   CURRENT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">nginx-deployment-66b6c48dd5</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">         3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">         3</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       23</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pod</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                                READY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   AGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">nginx-deployment-66b6c48dd5-4tnxf</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          23</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">nginx-deployment-66b6c48dd5-l48cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          23</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">nginx-deployment-66b6c48dd5-ss6nx</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          23</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">h</span></span></code></pre></div><h2 id="finalizers-在-kubernetes-中的使用场景" tabindex="-1">Finalizers 在 Kubernetes 中的使用场景 <a class="header-anchor" href="#finalizers-在-kubernetes-中的使用场景" aria-label="Permalink to &quot;Finalizers 在 Kubernetes 中的使用场景&quot;">​</a></h2><h3 id="pv-pvc-pod" tabindex="-1">PV, PVC, Pod <a class="header-anchor" href="#pv-pvc-pod" aria-label="Permalink to &quot;PV, PVC, Pod&quot;">​</a></h3><p>存储的管理是一个与计算实例的管理完全不同的问题，Kubernetes 引入 PersistentVolume 和 PersistentVolumeClaim 两个 API，将存储的细节和使用抽象出来。</p><ul><li><strong>持久卷（PersistentVolume，PV）</strong> 是集群中的一块存储，可以由管理员事先供应，或者使用<strong>存储类（Storage Class）</strong> 来动态供应。持久卷是集群资源，就像节点也是集群资源一样。持久卷的底层可以是 NFS，iSCSI 或者是基于特定云平台的存储系统等等。</li><li><strong>持久卷申领（PersistentVolumeClaim，PVC）</strong> 表达的是用户对存储的请求，概念上与 Pod 类似。 Pod 会耗用节点资源，而 PVC 申领会耗用 PV 资源。Pod 可以请求特定数量的资源（CPU 和内存）；同样 PVC 申领也可以请求特定的容量大小，访问模式，读写性能等等，无需关心持久卷背后实现的细节。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220322140555.png" alt=""></p><p>下面的 yaml 资源文件中，分别声明的 PV, PVC 和 Pod 三个资源。PV 使用节点本地的 <em>/tmp/mydata</em> 目录作为存储，磁盘容量为 1Gi，在 PVC 中申领容量至少为 1Gi 的卷，Pod 使用 PVC 作为存储卷。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建 PV，使用节点本地 /tmp/mydata 目录作为存储</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PersistentVolume</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">task-pv-volume</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">local</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  storageClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">manual</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    storage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">1Gi</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  accessModes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ReadWriteOnce</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  hostPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/tmp/mydata&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">---</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建 PVC，请求至少 1Gi 容量的卷</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PersistentVolumeClaim</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">task-pv-claim</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  storageClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">manual</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  accessModes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">ReadWriteOnce</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    requests</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      storage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">1Gi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">---</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建 Pod，使用 PVC 作为存储卷</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">task-pv-pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">task-pv-storage</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      persistentVolumeClaim</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        claimName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">task-pv-claim</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">task-pv-container</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">busybox:1.34</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/bin/sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;while true; do echo hello &gt;&gt; /var/log/hello.log; sleep 5;done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      volumeMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">mountPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/var/log&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">          name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">task-pv-storage</span></span></code></pre></div><p>查看创建的 PV, PVC, Pod。 <img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220322143318.png" alt=""></p><p>如下图所示，从左到右依次是 PV, PVC, Pod 的资源详情：</p><ul><li>PV 的 <code>Finalizers</code> 列表中包含 <code>kubernetes.io/pv-protection</code> ，说明 PV 对象是处于被保护状态的，当 PV 没有绑定的 PVC 对象时，该 PV 才允许被删除。PVC 申领与 PV 卷之间的绑定是一种一对一的映射，实现上使用 <code>ClaimRef</code> 来记录 PV 卷与 PVC 申领间的双向绑定关系。</li><li>PV 的 <code>Finalizers</code> 列表中包含 <code>kubernetes.io/pvc-protection</code> ，说明 PVC 对象是处于被保护状态的。Pod 中的 <code>volumes.persistentVolumeClaim</code> 字段记录了使用的 PVC。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220322204924.png" alt=""> 如果用户删除被某 Pod 使用的 PVC 对象，该 PVC 申领不会被立即移除，PVC 对象的移除会被推迟，直至其不再被任何 Pod 使用。 此外，如果删除已绑定到某 PVC 申领的 PV 卷，该 PV 卷也不会被立即移除，PV 对象的移除也要推迟到该 PV 不再绑定到 PVC。</p><p>接下来演示 Kubernetes 是如何延迟删除 PV 和 PVC 对象的。首先删除 PV。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> task-pv-volume</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">persistentvolume</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;task-pv-volume&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> deleted</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">^C</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 删除后控制台会卡住，ctrl + c 退出</span></span></code></pre></div><p>查看该 PV，你可以看到 PV 的状态为 <code>Terminating</code> ，这是因为和该 PV 绑定的 PVC 还未删除，因此 PV 对象此时处于被保护状态的。 <img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220320213337.png" alt=""> 然后删除 PVC。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pvc</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> task-pv-claim</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">persistentvolumeclaim</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;task-pv-claim&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> deleted</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">^C</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 删除后控制台会卡住，ctrl + c 退出</span></span></code></pre></div><p>查看该 PVC，发现 PVC 同样处于 Terminating 状态，这是因为使用 PVC 的 Pod 还未删除，因此 PVC 对象此时还处于被保护状态。 <img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220320213356.png" alt=""> 接着删除 Pod，当 Pod 被删除后，由于没有 Pod 使用 PVC 了，此时 PVC 会被安全地删除；同样地，和 PV 绑定的 PVC 被删除后，PV 也可以被安全地删除了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pod</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> task-pv-pod</span></span></code></pre></div><p>再次查看，可以看到此时 Pod, PVC, PV 都被删除了。 <img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220320213610.png" alt=""></p><h3 id="pod-replicaset-deployment" tabindex="-1">Pod, ReplicaSet, Deployment <a class="header-anchor" href="#pod-replicaset-deployment" aria-label="Permalink to &quot;Pod, ReplicaSet, Deployment&quot;">​</a></h3><p>Deployment 是最常用的用于部署无状态服务的方式，通过 Deployment 控制器能够以声明的方式更新 Pod（容器组）和 ReplicaSet（副本集）。Deployment 会自动创建并管理 ReplicaSet，可以维护多个版本的 ReplicaSet，方便我们升级和回滚应用；ReplicaSet 的职责是确保任何时间都有指定数量的 Pod 副本在运行。</p><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220322134146.png" alt=""> 下面是一个 Deployment 示例，其中创建了一个 ReplicaSet，负责启动三个 <code>nginx</code> Pods：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nginx-deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      app</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        app</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      containers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nginx:1.14.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">        ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">containerPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">80</span></span></code></pre></div><p>查看创建的 Deployment, ReplicaSet, Pod。 <img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220320213936.png" alt=""></p><p>如下图所示，从左到右依次是 Pod, ReplicaSet, Deployment 的资源详情：</p><ul><li>Pod 的 <code>ownerReferences.name</code> 参数表示该 Pod 是名为 <em>nginx-deployment-66b6c48dd5</em> 的 ReplicaSet 的附属对象，并且 Pod 的 <code>ownerReferences.uid</code> 和 ReplicaSet 对象的 <code>uid</code> 相同。</li><li>ReplicaSet 的 <code>ownerReferences.name</code> 参数表示该 ReplicaSet 是名为 <em>nginx-deployment</em> 的 Deployment 的附属对象，并且 ReplicaSet 的 <code>ownerReferences.uid</code> 和 Deployment 对象的 <code>uid</code> 相同。</li></ul><p><img src="https://chengzw258.oss-cn-beijing.aliyuncs.com/Article/20220322131156.png" alt=""></p><p>虽然在上面的资源详情中，我们并没有看到 <code>Finalizers</code> 字段，但是当你使用前台或孤立级联删除时，Kubernetes 也会向属主资源添加 <code>Finalizer</code>。 在前台删除中，会添加 <code>Foreground Finalizer</code>，这样控制器必须在删除了拥有 <code>ownerReferences.blockOwnerDeletion=true</code> 的附属资源后，才能删除属主对象。 如果你指定了孤立删除策略，Kubernetes 会添加 <code>Orphan Finalizer</code>， 这样控制器在删除属主对象后，会忽略附属资源。</p><h3 id="资源处于-terminating-状态无法删除" tabindex="-1">资源处于 Terminating 状态无法删除 <a class="header-anchor" href="#资源处于-terminating-状态无法删除" aria-label="Permalink to &quot;资源处于 Terminating 状态无法删除&quot;">​</a></h3><p>在使用 Kubernetes 的过程中，我们有时候会遇到删除 Namespace 或者 Pod 等资源后一直处于 Terminating 状态，等待很长时间都无法删除，甚至有时增加 <code>--force</code> 参数之后还是无法正常删除。这时就需要 <code>edit</code> 该资源，将 <code>finalizers</code> 字段设置为 []，之后 Kubernetes 资源就正常删除了。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><code>Finalizers</code> 可以防止意外删除集群所依赖的、用于正常运作的资源。</li><li><code>Finalizers</code> 是 Kubernetes 资源删除流程中的一种拦截机制，能够让控制器实现异步的删除前（Pre-delete）回调，在对象删除之前执行相应的逻辑。</li><li>一旦 <code>Finalizers</code> 列表为空时，就意味着所有 <code>Finalizer</code> 都被执行过了，垃圾回收器会最终删除该对象。</li><li>附属对象有一个 <code>metadata.ownerReferences</code> 字段，用于引用其属主对象。</li><li>Kubernetes 中有 3 种删除策略，<code>Foreground</code> 和 <code>Background</code> 是级联删除，<code>Orphan</code> 是非级联删除。<code>Foreground</code> 先删除附属对象，再删除属主对象；<code>Background</code> 先删除属主对象，再删除附属对象。</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/finalizers/" target="_blank" rel="noreferrer">Finalizers</a></li><li><a href="https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/owners-dependents/" target="_blank" rel="noreferrer">属主与附属</a></li><li><a href="https://kubernetes.io/zh/docs/concepts/architecture/garbage-collection/" target="_blank" rel="noreferrer">垃圾收集</a></li><li><a href="https://kubernetes.io/blog/2021/05/14/using-finalizers-to-control-deletion/" target="_blank" rel="noreferrer">Using Finalizers to Control Deletion</a></li><li><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/use-cascading-deletion/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NDc3NTE3MzYsImciOiJGNlp6UlQwcVBaa2NFYTJuIiwiaWF0IjoxNjQ3NzUxNDM2LCJ1c2VySWQiOjY2ODcxNDMwfQ.hD8hXnHvMqXkxJhMUyeI49gT6yXmQFjVJdaksPrHm9Q" target="_blank" rel="noreferrer">在集群中使用级联删除</a></li><li><a href="https://cloud.tencent.com/developer/article/1703237" target="_blank" rel="noreferrer">熟悉又陌生的 k8s 字段：finalizers</a></li><li><a href="https://zdyxry.github.io/2019/09/13/Kubernetes-%E5%AE%9E%E6%88%98-Operator-Finalizers/" target="_blank" rel="noreferrer">Kubernetes 实战-Operator Finalizers 实现</a></li><li><a href="https://github.com/hossainemruz/k8s-initializer-finalizer-practice" target="_blank" rel="noreferrer">initializer-finalizer-practice</a></li><li><a href="https://www.cloudsavvyit.com/15163/what-are-finalizers-in-kubernetes-how-to-handle-object-deletions/" target="_blank" rel="noreferrer">What Are Finalizers In Kubernetes? How to Handle Object Deletions</a></li><li><a href="https://www.bookstack.cn/read/source-code-reading-notes/kubernetes-garbagecollector_controller.md#kubernetes%20%E4%B8%AD%E7%9A%84%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">garbage collector controller 源码分析</a></li><li><a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-persistent-volume-storage/" target="_blank" rel="noreferrer">配置 Pod 以使用 PersistentVolume 作为存储</a></li><li><a href="https://kubernetes.io/zh/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noreferrer">持久卷</a></li><li><a href="https://github.com/kubernetes/kubernetes/blob/ff3e5e06a79bc69ad3d7ccedd277542b6712514b/pkg/controller/volume/pvcprotection/pvc_protection_controller.go#L184-L191" target="_blank" rel="noreferrer">pvc_protection_controller.go</a></li><li><a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/" target="_blank" rel="noreferrer">使用 CustomResourceDefinition 扩展 Kubernetes API</a></li><li><a href="https://howieyuen.github.io/docs/kubernetes/kube-apiserver/garbage-collector/" target="_blank" rel="noreferrer">垃圾回收</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/concepts/garbage-collection.html" target="_blank" rel="noreferrer">垃圾收集</a></li><li><a href="https://draveness.me/kubernetes-garbage-collector/" target="_blank" rel="noreferrer">详解 Kubernetes 垃圾收集器的实现原理</a></li><li><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#creating-a-deployment" target="_blank" rel="noreferrer">Deployments</a></li><li><a href="https://draveness.me/kubernetes-deployment/" target="_blank" rel="noreferrer">详解 Kubernetes Deployment 的实现原理</a></li><li><a href="https://boilingfrog.github.io/2021/07/01/k8s%E4%B8%AD%E7%9A%84PV%E5%92%8CPVC%E7%90%86%E8%A7%A3/" target="_blank" rel="noreferrer">k8s中的PV和PVC理解</a></li><li><a href="https://yhuang.pro/2021/12/11/kubernetes-finalizer%E6%9C%BA%E5%88%B6/" target="_blank" rel="noreferrer">Kubernetes Finalizer机制</a></li><li><a href="https://cloudnative.to/kubebuilder/reference/using-finalizers.html#%E4%BD%BF%E7%94%A8-finalizers" target="_blank" rel="noreferrer">使用 Finalizers</a></li><li><a href="https://zhuanlan.zhihu.com/p/161072336" target="_blank" rel="noreferrer">Kubernetes API 机制: 对象删除</a></li></ul>`,62))])}const V=k(C,[["render",u]]);export{v as __pageData,V as default};
